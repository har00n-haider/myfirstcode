!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
MAIN_DEV_ID	main.c	/^#define MAIN_DEV_ID /;"	d	file:
main	main.c	/^int main($/;"	f
report	main.c	/^static void report(const NComRxC *nrx)$/;"	f	file:
print	main.c	/^static void print(FILE *fp, const NComRxC *nrx)$/;"	f	file:
NOUTPUT_PACKET_LENGTH	NComRxC.c	/^#define NOUTPUT_PACKET_LENGTH /;"	d	file:
NCOM_SYNC	NComRxC.c	/^#define NCOM_SYNC /;"	d	file:
PKT_PERIOD	NComRxC.c	/^#define PKT_PERIOD /;"	d	file:
TIME2SEC	NComRxC.c	/^#define TIME2SEC /;"	d	file:
FINETIME2SEC	NComRxC.c	/^#define FINETIME2SEC /;"	d	file:
TIMECYCLE	NComRxC.c	/^#define TIMECYCLE /;"	d	file:
WEEK2CYCLES	NComRxC.c	/^#define WEEK2CYCLES /;"	d	file:
ACC2MPS2	NComRxC.c	/^#define ACC2MPS2 /;"	d	file:
RATE2RPS	NComRxC.c	/^#define RATE2RPS /;"	d	file:
VEL2MPS	NComRxC.c	/^#define VEL2MPS /;"	d	file:
ANG2RAD	NComRxC.c	/^#define ANG2RAD /;"	d	file:
INNFACTOR	NComRxC.c	/^#define INNFACTOR /;"	d	file:
POSA2M	NComRxC.c	/^#define POSA2M /;"	d	file:
VELA2MPS	NComRxC.c	/^#define VELA2MPS /;"	d	file:
ANGA2RAD	NComRxC.c	/^#define ANGA2RAD /;"	d	file:
GB2RPS	NComRxC.c	/^#define GB2RPS /;"	d	file:
AB2MPS2	NComRxC.c	/^#define AB2MPS2 /;"	d	file:
GSFACTOR	NComRxC.c	/^#define GSFACTOR /;"	d	file:
ASFACTOR	NComRxC.c	/^#define ASFACTOR /;"	d	file:
GBA2RPS	NComRxC.c	/^#define GBA2RPS /;"	d	file:
ABA2MPS2	NComRxC.c	/^#define ABA2MPS2 /;"	d	file:
GSAFACTOR	NComRxC.c	/^#define GSAFACTOR /;"	d	file:
ASAFACTOR	NComRxC.c	/^#define ASAFACTOR /;"	d	file:
GPSPOS2M	NComRxC.c	/^#define GPSPOS2M /;"	d	file:
GPSATT2RAD	NComRxC.c	/^#define GPSATT2RAD /;"	d	file:
GPSPOSA2M	NComRxC.c	/^#define GPSPOSA2M /;"	d	file:
GPSATTA2RAD	NComRxC.c	/^#define GPSATTA2RAD /;"	d	file:
INNFACTOR	NComRxC.c	/^#define INNFACTOR /;"	d	file:
DIFFAGE2SEC	NComRxC.c	/^#define DIFFAGE2SEC /;"	d	file:
REFPOS2M	NComRxC.c	/^#define REFPOS2M /;"	d	file:
REFANG2RAD	NComRxC.c	/^#define REFANG2RAD /;"	d	file:
OUTPOS2M	NComRxC.c	/^#define OUTPOS2M /;"	d	file:
ZVPOS2M	NComRxC.c	/^#define ZVPOS2M /;"	d	file:
ZVPOSA2M	NComRxC.c	/^#define ZVPOSA2M /;"	d	file:
NSPOS2M	NComRxC.c	/^#define NSPOS2M /;"	d	file:
NSPOSA2M	NComRxC.c	/^#define NSPOSA2M /;"	d	file:
ALIGN2RAD	NComRxC.c	/^#define ALIGN2RAD /;"	d	file:
ALIGNA2RAD	NComRxC.c	/^#define ALIGNA2RAD /;"	d	file:
SZVDELAY2S	NComRxC.c	/^#define SZVDELAY2S /;"	d	file:
SZVPERIOD2S	NComRxC.c	/^#define SZVPERIOD2S /;"	d	file:
TOPSPEED2MPS	NComRxC.c	/^#define TOPSPEED2MPS /;"	d	file:
NSDELAY2S	NComRxC.c	/^#define NSDELAY2S /;"	d	file:
NSPERIOD2S	NComRxC.c	/^#define NSPERIOD2S /;"	d	file:
NSACCEL2MPS2	NComRxC.c	/^#define NSACCEL2MPS2 /;"	d	file:
NSSPEED2MPS	NComRxC.c	/^#define NSSPEED2MPS /;"	d	file:
NSRADIUS2M	NComRxC.c	/^#define NSRADIUS2M /;"	d	file:
INITSPEED2MPS	NComRxC.c	/^#define INITSPEED2MPS /;"	d	file:
HLDELAY2S	NComRxC.c	/^#define HLDELAY2S /;"	d	file:
HLPERIOD2S	NComRxC.c	/^#define HLPERIOD2S /;"	d	file:
STATDELAY2S	NComRxC.c	/^#define STATDELAY2S /;"	d	file:
STATSPEED2MPS	NComRxC.c	/^#define STATSPEED2MPS /;"	d	file:
WSPOS2M	NComRxC.c	/^#define WSPOS2M /;"	d	file:
WSPOSA2M	NComRxC.c	/^#define WSPOSA2M /;"	d	file:
WSSF2PPM	NComRxC.c	/^#define WSSF2PPM /;"	d	file:
WSSFA2PC	NComRxC.c	/^#define WSSFA2PC /;"	d	file:
WSDELAY2S	NComRxC.c	/^#define WSDELAY2S /;"	d	file:
WSNOISE2CNT	NComRxC.c	/^#define WSNOISE2CNT /;"	d	file:
UNDUL2M	NComRxC.c	/^#define UNDUL2M /;"	d	file:
DOPFACTOR	NComRxC.c	/^#define DOPFACTOR /;"	d	file:
OMNISTAR_MIN_FREQ	NComRxC.c	/^#define OMNISTAR_MIN_FREQ /;"	d	file:
OMNIFREQ2HZ	NComRxC.c	/^#define OMNIFREQ2HZ /;"	d	file:
SNR2DB	NComRxC.c	/^#define SNR2DB /;"	d	file:
LTIME2SEC	NComRxC.c	/^#define LTIME2SEC /;"	d	file:
TEMPK_OFFSET	NComRxC.c	/^#define TEMPK_OFFSET /;"	d	file:
ABSZERO_TEMPC	NComRxC.c	/^#define ABSZERO_TEMPC /;"	d	file:
FINEANG2RAD	NComRxC.c	/^#define FINEANG2RAD /;"	d	file:
ALT2M	NComRxC.c	/^#define ALT2M /;"	d	file:
SUPPLYV2V	NComRxC.c	/^#define SUPPLYV2V /;"	d	file:
M_PI	NComRxC.c	/^#define M_PI /;"	d	file:
DEG2RAD	NComRxC.c	/^#define DEG2RAD /;"	d	file:
RAD2DEG	NComRxC.c	/^#define RAD2DEG /;"	d	file:
POS_INT_24	NComRxC.c	/^#define POS_INT_24 /;"	d	file:
NEG_INT_24	NComRxC.c	/^#define NEG_INT_24 /;"	d	file:
INV_INT_24	NComRxC.c	/^#define INV_INT_24 /;"	d	file:
NCOM_COUNT_TOO_OLD	NComRxC.c	/^#define NCOM_COUNT_TOO_OLD /;"	d	file:
NCOM_STDCNT_MAX	NComRxC.c	/^#define NCOM_STDCNT_MAX /;"	d	file:
MIN_HORZ_SPEED	NComRxC.c	/^#define MIN_HORZ_SPEED /;"	d	file:
MIN_VERT_SPEED	NComRxC.c	/^#define MIN_VERT_SPEED /;"	d	file:
SPEED_HOLD_FACTOR	NComRxC.c	/^#define SPEED_HOLD_FACTOR /;"	d	file:
MINUTES_IN_WEEK	NComRxC.c	/^#define MINUTES_IN_WEEK /;"	d	file:
NCOM_OMNI_STATUS_UNKNOWN	NComRxC.c	/^#define NCOM_OMNI_STATUS_UNKNOWN /;"	d	file:
NCOM_OMNI_STATUS_VBSEXPIRED	NComRxC.c	/^#define NCOM_OMNI_STATUS_VBSEXPIRED /;"	d	file:
NCOM_OMNI_STATUS_VBSREGION	NComRxC.c	/^#define NCOM_OMNI_STATUS_VBSREGION /;"	d	file:
NCOM_OMNI_STATUS_VBSNOBASE	NComRxC.c	/^#define NCOM_OMNI_STATUS_VBSNOBASE /;"	d	file:
NCOM_OMNI_STATUS_HPEXPIRED	NComRxC.c	/^#define NCOM_OMNI_STATUS_HPEXPIRED /;"	d	file:
NCOM_OMNI_STATUS_HPREGION	NComRxC.c	/^#define NCOM_OMNI_STATUS_HPREGION /;"	d	file:
NCOM_OMNI_STATUS_HPNOBASE	NComRxC.c	/^#define NCOM_OMNI_STATUS_HPNOBASE /;"	d	file:
NCOM_OMNI_STATUS_HPNOCONVERGE	NComRxC.c	/^#define NCOM_OMNI_STATUS_HPNOCONVERGE /;"	d	file:
NCOM_OMNI_STATUS_HPKEYINVALID	NComRxC.c	/^#define NCOM_OMNI_STATUS_HPKEYINVALID /;"	d	file:
NCOM_GPS_ANT_STATUS_BITMASK	NComRxC.c	/^#define NCOM_GPS_ANT_STATUS_BITMASK /;"	d	file:
NCOM_GPS_ANT_STATUS_DONTKNOW	NComRxC.c	/^#define NCOM_GPS_ANT_STATUS_DONTKNOW /;"	d	file:
NCOM_GPS_ANT_STATUS_BITSHIFT	NComRxC.c	/^#define NCOM_GPS_ANT_STATUS_BITSHIFT /;"	d	file:
NCOM_GPS_ANT_POWER_BITMASK	NComRxC.c	/^#define NCOM_GPS_ANT_POWER_BITMASK /;"	d	file:
NCOM_GPS_ANT_POWER_DONTKNOW	NComRxC.c	/^#define NCOM_GPS_ANT_POWER_DONTKNOW /;"	d	file:
NCOM_GPS_ANT_POWER_BITSHIFT	NComRxC.c	/^#define NCOM_GPS_ANT_POWER_BITSHIFT /;"	d	file:
NCOM_GPS_FEATURE_PSRDIFF	NComRxC.c	/^#define NCOM_GPS_FEATURE_PSRDIFF /;"	d	file:
NCOM_GPS_FEATURE_SBAS	NComRxC.c	/^#define NCOM_GPS_FEATURE_SBAS /;"	d	file:
NCOM_GPS_FEATURE_OMNIVBS	NComRxC.c	/^#define NCOM_GPS_FEATURE_OMNIVBS /;"	d	file:
NCOM_GPS_FEATURE_OMNIHP	NComRxC.c	/^#define NCOM_GPS_FEATURE_OMNIHP /;"	d	file:
NCOM_GPS_FEATURE_L1DIFF	NComRxC.c	/^#define NCOM_GPS_FEATURE_L1DIFF /;"	d	file:
NCOM_GPS_FEATURE_L1L2DIFF	NComRxC.c	/^#define NCOM_GPS_FEATURE_L1L2DIFF /;"	d	file:
NCOM_GPS_FEATURE_GLONASS	NComRxC.c	/^#define NCOM_GPS_FEATURE_GLONASS /;"	d	file:
NCOM_GPS_FEATURE_GALILEO	NComRxC.c	/^#define NCOM_GPS_FEATURE_GALILEO /;"	d	file:
NCOM_GPS_FEATURE_RAWRNG	NComRxC.c	/^#define NCOM_GPS_FEATURE_RAWRNG /;"	d	file:
NCOM_GPS_FEATURE_RAWDOP	NComRxC.c	/^#define NCOM_GPS_FEATURE_RAWDOP /;"	d	file:
NCOM_GPS_FEATURE_RAWL1	NComRxC.c	/^#define NCOM_GPS_FEATURE_RAWL1 /;"	d	file:
NCOM_GPS_FEATURE_RAWL2	NComRxC.c	/^#define NCOM_GPS_FEATURE_RAWL2 /;"	d	file:
NCOM_GPS_FEATURE_RAWL5	NComRxC.c	/^#define NCOM_GPS_FEATURE_RAWL5 /;"	d	file:
NCOM_GPS_FEATURE_VALID	NComRxC.c	/^#define NCOM_GPS_FEATURE_VALID /;"	d	file:
GPS_TIME_START_TIME_T	NComRxC.c	/^#define GPS_TIME_START_TIME_T /;"	d	file:
INPUT_JITTER_TOLERANCE	NComRxC.c	/^#define INPUT_JITTER_TOLERANCE /;"	d	file:
PNV_S_	NComRxC.c	/^static const char PNV_S_[] = "%s%s %d %s\\n";           \/\/!< Format string: prefix, name, valid, string$/;"	v	file:
PNV_I_	NComRxC.c	/^static const char PNV_I_[] = "%s%s %d %d\\n";           \/\/!< Format string: prefix, name, valid, int$/;"	v	file:
PNV_IE	NComRxC.c	/^static const char PNV_IE[] = "%s%s %d %d (%s)\\n";      \/\/!< Format string: prefix, name, valid, int, enumerated$/;"	v	file:
PNV_D_	NComRxC.c	/^static const char PNV_D_[] = "%s%s %d %1.16e\\n";       \/\/!< Format string: prefix, name, valid, double$/;"	v	file:
PNA_D_	NComRxC.c	/^static const char PNA_D_[] = "%s%s %d %1.16e\\n";       \/\/!< Format string: prefix, name, age, double$/;"	v	file:
PNVXD_	NComRxC.c	/^static const char PNVXD_[] = "%s%s %d %d %1.16e\\n";    \/\/!< Format string: prefix, name, valid, approx, double$/;"	v	file:
PNVCD_	NComRxC.c	/^static const char PNVCD_[] = "%s%s %d %d %1.16e\\n";    \/\/!< Format string: prefix, name, valid, config, double$/;"	v	file:
PNVND_	NComRxC.c	/^static const char PNVND_[] = "%s%s %d %d %1.16e\\n";    \/\/!< Format string: prefix, name, valid, new, double$/;"	v	file:
PNV_B_	NComRxC.c	/^static const char PNV_B_[] = "%s%s %d %" PRId16 "\\n";  \/\/!< Format string: prefix, name, valid, int16_t$/;"	v	file:
PNV_Q_	NComRxC.c	/^static const char PNV_Q_[] = "%s%s %d %" PRId32 "\\n";  \/\/!< Format string: prefix, name, valid, int32_t$/;"	v	file:
PNV_O_	NComRxC.c	/^static const char PNV_O_[] = "%s%s %d %" PRId64 "\\n";  \/\/!< Format string: prefix, name, valid, int64_t$/;"	v	file:
PNV_b_	NComRxC.c	/^static const char PNV_b_[] = "%s%s %d %" PRIu16 "\\n";  \/\/!< Format string: prefix, name, valid, uint16_t$/;"	v	file:
PNV_q_	NComRxC.c	/^static const char PNV_q_[] = "%s%s %d %" PRIu32 "\\n";  \/\/!< Format string: prefix, name, valid, uint32_t$/;"	v	file:
PNV_o_	NComRxC.c	/^static const char PNV_o_[] = "%s%s %d %" PRIu64 "\\n";  \/\/!< Format string: prefix, name, valid, uint64_t$/;"	v	file:
COM_INVALID	NComRxC.c	/^#define COM_INVALID(/;"	d	file:
COM_CK_VALIDITY	NComRxC.c	/^#define COM_CK_VALIDITY(/;"	d	file:
PARSED_PACKET_VALID	NComRxC.c	/^	PARSED_PACKET_VALID,      \/\/!< Parsed packet in good shape.$/;"	e	enum:__anon1	file:
PARSED_PACKET_INCOMPLETE	NComRxC.c	/^	PARSED_PACKET_INCOMPLETE, \/\/!< Parsed packet is incomplete.$/;"	e	enum:__anon1	file:
PARSED_PACKET_CORRUPT	NComRxC.c	/^	PARSED_PACKET_CORRUPT     \/\/!< Parsed packet is corrupted.$/;"	e	enum:__anon1	file:
ParsedPacketType	NComRxC.c	/^} ParsedPacketType;$/;"	t	typeref:enum:__anon1	file:
OutputPacketName	NComRxC.c	/^static const char *OutputPacketName[8] =$/;"	v	file:
NavigationStatusName	NComRxC.c	/^static const char *NavigationStatusName[24] =$/;"	v	file:
ComUmacStatus	NComRxC.c	/^static const char *ComUmacStatus[11] =$/;"	v	file:
ComOptionVehicle	NComRxC.c	/^static const char *ComOptionVehicle[3] =$/;"	v	file:
ComOptionVibration	NComRxC.c	/^static const char *ComOptionVibration[4] =$/;"	v	file:
ComOptionGpsAccuracy	NComRxC.c	/^static const char *ComOptionGpsAccuracy[4] =$/;"	v	file:
ComOptionOutput	NComRxC.c	/^static const char *ComOptionOutput[16] =$/;"	v	file:
ComOptionHeading	NComRxC.c	/^static const char *ComOptionHeading[5] =$/;"	v	file:
ComHeadQuality	NComRxC.c	/^static const char *ComHeadQuality[5] =$/;"	v	file:
ComHeadSearchType	NComRxC.c	/^static const char *ComHeadSearchType[5] =$/;"	v	file:
ComHeadSearchStatus	NComRxC.c	/^static const char *ComHeadSearchStatus[20] =$/;"	v	file:
ComHeadSearchReady	NComRxC.c	/^static const char *ComHeadSearchReady[3] =$/;"	v	file:
ImuTypeName	NComRxC.c	/^static const char *ImuTypeName[8]=$/;"	v	file:
InterPcbTypeName	NComRxC.c	/^static const char *InterPcbTypeName[5]=$/;"	v	file:
FrontPcbTypeName	NComRxC.c	/^static const char *FrontPcbTypeName[8]=$/;"	v	file:
InterSwIdName	NComRxC.c	/^static const char *InterSwIdName[13]=$/;"	v	file:
DeployCfgName	NComRxC.c	/^static const char *DeployCfgName[6]=$/;"	v	file:
CpuPcbTypeName	NComRxC.c	/^static const char *CpuPcbTypeName[3]=$/;"	v	file:
DualPortRamStatusName	NComRxC.c	/^static const char *DualPortRamStatusName[12] =$/;"	v	file:
ComOptionSerBaud	NComRxC.c	/^static const char *ComOptionSerBaud[16] =$/;"	v	file:
ComOptionCanBaud	NComRxC.c	/^static const char *ComOptionCanBaud[8] =$/;"	v	file:
ComGpsTypeName	NComRxC.c	/^static const char *ComGpsTypeName[11]=$/;"	v	file:
ComGpsFormatName	NComRxC.c	/^static const char *ComGpsFormatName[10]=$/;"	v	file:
ComGpsXRateName	NComRxC.c	/^static const char *ComGpsXRateName[8] =$/;"	v	file:
ComGpsAntStatusName	NComRxC.c	/^static const char *ComGpsAntStatusName[4] =$/;"	v	file:
ComGpsAntPowerName	NComRxC.c	/^static const char *ComGpsAntPowerName[3] =$/;"	v	file:
ComGpsXModeName	NComRxC.c	/^static const char *ComGpsXModeName[31] =$/;"	v	file:
NComInternalInvalidate	NComRxC.c	/^static void NComInternalInvalidate(NComRxCInternal *Com)$/;"	f	file:
NComInternalReportFP	NComRxC.c	/^static void NComInternalReportFP(const NComRxCInternal *Com, FILE *fp, const char *pre)$/;"	f	file:
NComInternalCreate	NComRxC.c	/^static NComRxCInternal *NComInternalCreate()$/;"	f	file:
NComInternalDestroy	NComRxC.c	/^static void NComInternalDestroy(NComRxCInternal *Com)$/;"	f	file:
NComInternalCopy	NComRxC.c	/^void NComInternalCopy(NComRxCInternal *ComDestination, const NComRxCInternal *ComSource)$/;"	f
NComGpsGetTypeString	NComRxC.c	/^const char *NComGpsGetTypeString                     (const NComRxCGps *Com) { return ComGpsTypeName[Com->mType]; }$/;"	f
NComGpsSetTypeEnum	NComRxC.c	/^static void NComGpsSetTypeEnum                       (NComRxCGps *Com, uint8_t     v) { Com->mType = COM_CK_VALIDITY(v, ComGpsTypeName); Com->mIsTypeValid = 1; }$/;"	f	file:
NComGpsGetFormatString	NComRxC.c	/^const char *NComGpsGetFormatString                   (const NComRxCGps *Com) { return ComGpsFormatName[Com->mFormat]; }$/;"	f
NComGpsSetFormatEnum	NComRxC.c	/^static void NComGpsSetFormatEnum                     (NComRxCGps *Com, uint8_t     v) { Com->mFormat = COM_CK_VALIDITY(v, ComGpsFormatName); Com->mIsFormatValid = 1; }$/;"	f	file:
NComGpsGetRawRateString	NComRxC.c	/^const char *NComGpsGetRawRateString                  (const NComRxCGps *Com) { return ComGpsXRateName[Com->mRawRate]; }$/;"	f
NComGpsSetRawRateEnum	NComRxC.c	/^static void NComGpsSetRawRateEnum                    (NComRxCGps *Com, uint8_t     v) { Com->mRawRate = COM_CK_VALIDITY(v, ComGpsXRateName); Com->mIsRawRateValid = 1; }$/;"	f	file:
NComGpsGetPosRateString	NComRxC.c	/^const char *NComGpsGetPosRateString                  (const NComRxCGps *Com) { return ComGpsXRateName[Com->mPosRate]; }$/;"	f
NComGpsSetPosRateEnum	NComRxC.c	/^static void NComGpsSetPosRateEnum                    (NComRxCGps *Com, uint8_t     v) { Com->mPosRate = COM_CK_VALIDITY(v, ComGpsXRateName); Com->mIsPosRateValid = 1; }$/;"	f	file:
NComGpsGetVelRateString	NComRxC.c	/^const char *NComGpsGetVelRateString                  (const NComRxCGps *Com) { return ComGpsXRateName[Com->mVelRate]; }$/;"	f
NComGpsSetVelRateEnum	NComRxC.c	/^static void NComGpsSetVelRateEnum                    (NComRxCGps *Com, uint8_t     v) { Com->mVelRate = COM_CK_VALIDITY(v, ComGpsXRateName); Com->mIsVelRateValid = 1; }$/;"	f	file:
NComGpsGetAntStatusString	NComRxC.c	/^const char *NComGpsGetAntStatusString                (const NComRxCGps *Com) { return ComGpsAntStatusName[Com->mAntStatus]; }$/;"	f
NComGpsSetAntStatusEnum	NComRxC.c	/^static void NComGpsSetAntStatusEnum                  (NComRxCGps *Com, uint8_t     v) { Com->mAntStatus = COM_CK_VALIDITY(v, ComGpsAntStatusName); Com->mIsAntStatusValid = 1; }$/;"	f	file:
NComGpsGetAntPowerString	NComRxC.c	/^const char *NComGpsGetAntPowerString                 (const NComRxCGps *Com) { return ComGpsAntPowerName[Com->mAntPower]; }$/;"	f
NComGpsSetAntPowerEnum	NComRxC.c	/^static void NComGpsSetAntPowerEnum                   (NComRxCGps *Com, uint8_t     v) { Com->mAntPower = COM_CK_VALIDITY(v, ComGpsAntPowerName); Com->mIsAntPowerValid = 1; }$/;"	f	file:
NComGpsGetPosModeString	NComRxC.c	/^const char *NComGpsGetPosModeString                  (const NComRxCGps *Com) { return ComGpsXModeName[Com->mPosMode]; }$/;"	f
NComGpsSetPosModeEnum	NComRxC.c	/^static void NComGpsSetPosModeEnum                    (NComRxCGps *Com, uint8_t     v) { Com->mPosMode = COM_CK_VALIDITY(v, ComGpsXModeName); Com->mIsPosModeValid = 1; }$/;"	f	file:
NComGpsGetSerBaudString	NComRxC.c	/^const char *NComGpsGetSerBaudString                  (const NComRxCGps *Com) { return ComOptionSerBaud[Com->mSerBaud]; }$/;"	f
NComGpsSetSerBaudEnum	NComRxC.c	/^static void NComGpsSetSerBaudEnum                    (NComRxCGps *Com, uint8_t     v) { Com->mSerBaud = COM_CK_VALIDITY(v, ComOptionSerBaud); Com->mIsSerBaudValid = 1; }$/;"	f	file:
NComGpsSetNumSats	NComRxC.c	/^static void NComGpsSetNumSats                        (NComRxCGps *Com, int         v) { Com->mNumSats = v; Com->mIsNumSatsValid = 1; }$/;"	f	file:
NComGpsSetCpuUsed	NComRxC.c	/^static void NComGpsSetCpuUsed                        (NComRxCGps *Com, double      v) { Com->mCpuUsed = v; Com->mIsCpuUsedValid = 1; }$/;"	f	file:
NComGpsSetCoreNoise	NComRxC.c	/^static void NComGpsSetCoreNoise                      (NComRxCGps *Com, double      v) { Com->mCoreNoise = v; Com->mIsCoreNoiseValid = 1; }$/;"	f	file:
NComGpsSetCoreTemp	NComRxC.c	/^static void NComGpsSetCoreTemp                       (NComRxCGps *Com, double      v) { Com->mCoreTemp = v; Com->mIsCoreTempValid = 1; }$/;"	f	file:
NComGpsSetSupplyVolt	NComRxC.c	/^static void NComGpsSetSupplyVolt                     (NComRxCGps *Com, double      v) { Com->mSupplyVolt = v; Com->mIsSupplyVoltValid = 1; }$/;"	f	file:
NComGpsSetChars	NComRxC.c	/^static void NComGpsSetChars                          (NComRxCGps *Com, uint32_t    v) { Com->mChars = v; Com->mIsCharsValid = 1; }$/;"	f	file:
NComGpsSetCharsSkipped	NComRxC.c	/^static void NComGpsSetCharsSkipped                   (NComRxCGps *Com, uint32_t    v) { Com->mCharsSkipped = v; Com->mIsCharsSkippedValid = 1; }$/;"	f	file:
NComGpsSetPkts	NComRxC.c	/^static void NComGpsSetPkts                           (NComRxCGps *Com, uint32_t    v) { Com->mPkts = v; Com->mIsPktsValid = 1; }$/;"	f	file:
NComGpsSetOldPkts	NComRxC.c	/^static void NComGpsSetOldPkts                        (NComRxCGps *Com, uint32_t    v) { Com->mOldPkts = v; Com->mIsOldPktsValid = 1; }$/;"	f	file:
NComGpsInvalidate	NComRxC.c	/^void NComGpsInvalidate(NComRxCGps *Com)$/;"	f
NComGpsReportFP	NComRxC.c	/^static void NComGpsReportFP(const NComRxCGps *Com, FILE *fp, const char *pre)$/;"	f	file:
NComGpsReport	NComRxC.c	/^void NComGpsReport(const NComRxCGps *Com, const char *file_name, int append)$/;"	f
NComGpsCreate	NComRxC.c	/^NComRxCGps *NComGpsCreate()$/;"	f
NComGpsDestroy	NComRxC.c	/^void NComGpsDestroy(NComRxCGps *Com)$/;"	f
NComGpsCopy	NComRxC.c	/^void NComGpsCopy(NComRxCGps *ComDestination, const NComRxCGps *ComSource)$/;"	f
NComGetOutputPacketTypeString	NComRxC.c	/^const char *NComGetOutputPacketTypeString         (const NComRxC *Com) { return OutputPacketName[Com->mOutputPacketType]; }$/;"	f
NComSetOutputPacketTypeEnum	NComRxC.c	/^static void NComSetOutputPacketTypeEnum           (NComRxC *Com, uint8_t     v) { Com->mOutputPacketType = COM_CK_VALIDITY(v, OutputPacketName); Com->mIsOutputPacketTypeValid = 1; }$/;"	f	file:
NComGetInsNavModeString	NComRxC.c	/^const char *NComGetInsNavModeString               (const NComRxC *Com) { return NavigationStatusName[Com->mInsNavMode]; }$/;"	f
NComSetInsNavModeEnum	NComRxC.c	/^static void NComSetInsNavModeEnum                 (NComRxC *Com, uint8_t     v) { Com->mInsNavMode = COM_CK_VALIDITY(v, NavigationStatusName); Com->mIsInsNavModeValid = 1; }$/;"	f	file:
NComSetSerialNumber	NComRxC.c	/^static void NComSetSerialNumber                   (NComRxC *Com, int         v) { Com->mSerialNumber = v; Com->mIsSerialNumberValid = 1; }$/;"	f	file:
NComSetDevId	NComRxC.c	/^static void NComSetDevId                          (NComRxC *Com, const char *v, int n) { strgrab(Com->mDevId, DEV_ID_STRLEN, v, n); Com->mIsDevIdValid = 1; }$/;"	f	file:
NComSetOsVersion1	NComRxC.c	/^static void NComSetOsVersion1                     (NComRxC *Com, int         v) { Com->mOsVersion1 = v; Com->mIsOsVersion1Valid = 1; }$/;"	f	file:
NComSetOsVersion2	NComRxC.c	/^static void NComSetOsVersion2                     (NComRxC *Com, int         v) { Com->mOsVersion2 = v; Com->mIsOsVersion2Valid = 1; }$/;"	f	file:
NComSetOsVersion3	NComRxC.c	/^static void NComSetOsVersion3                     (NComRxC *Com, int         v) { Com->mOsVersion3 = v; Com->mIsOsVersion3Valid = 1; }$/;"	f	file:
NComSetOsScriptId	NComRxC.c	/^static void NComSetOsScriptId                     (NComRxC *Com, const char *v, int n) { strgrab(Com->mOsScriptId, OS_SCRIPT_ID_STRLEN, v, n); Com->mIsOsScriptIdValid = 1; }$/;"	f	file:
NComGetImuTypeString	NComRxC.c	/^const char *NComGetImuTypeString                  (const NComRxC *Com) { return ImuTypeName[Com->mImuType]; }$/;"	f
NComSetImuTypeEnum	NComRxC.c	/^static void NComSetImuTypeEnum                    (NComRxC *Com, uint8_t     v) { Com->mImuType = COM_CK_VALIDITY(v, ImuTypeName); Com->mIsImuTypeValid = 1; }$/;"	f	file:
NComGetCpuPcbTypeString	NComRxC.c	/^const char *NComGetCpuPcbTypeString               (const NComRxC *Com) { return CpuPcbTypeName[Com->mCpuPcbType]; }$/;"	f
NComSetCpuPcbTypeEnum	NComRxC.c	/^static void NComSetCpuPcbTypeEnum                 (NComRxC *Com, uint8_t     v) { Com->mCpuPcbType = COM_CK_VALIDITY(v, CpuPcbTypeName); Com->mIsCpuPcbTypeValid = 1; }$/;"	f	file:
NComGetInterPcbTypeString	NComRxC.c	/^const char *NComGetInterPcbTypeString             (const NComRxC *Com) { return InterPcbTypeName[Com->mInterPcbType]; }$/;"	f
NComSetInterPcbTypeEnum	NComRxC.c	/^static void NComSetInterPcbTypeEnum               (NComRxC *Com, uint8_t     v) { Com->mInterPcbType = COM_CK_VALIDITY(v, InterPcbTypeName); Com->mIsInterPcbTypeValid = 1; }$/;"	f	file:
NComGetFrontPcbTypeString	NComRxC.c	/^const char *NComGetFrontPcbTypeString             (const NComRxC *Com) { return FrontPcbTypeName[Com->mFrontPcbType]; }$/;"	f
NComSetFrontPcbTypeEnum	NComRxC.c	/^static void NComSetFrontPcbTypeEnum               (NComRxC *Com, uint8_t     v) { Com->mFrontPcbType = COM_CK_VALIDITY(v, FrontPcbTypeName); Com->mIsFrontPcbTypeValid = 1; }$/;"	f	file:
NComGetInterSwIdString	NComRxC.c	/^const char *NComGetInterSwIdString                (const NComRxC *Com) { return InterSwIdName[Com->mInterSwId]; }$/;"	f
NComSetInterSwIdEnum	NComRxC.c	/^static void NComSetInterSwIdEnum                  (NComRxC *Com, uint8_t     v) { Com->mInterSwId = COM_CK_VALIDITY(v, InterSwIdName); Com->mIsInterSwIdValid = 1; }$/;"	f	file:
NComGetHwConfigString	NComRxC.c	/^const char *NComGetHwConfigString                 (const NComRxC *Com) { return DeployCfgName[Com->mHwConfig]; }$/;"	f
NComSetHwConfigEnum	NComRxC.c	/^static void NComSetHwConfigEnum                   (NComRxC *Com, uint8_t     v) { Com->mHwConfig = COM_CK_VALIDITY(v, DeployCfgName); Com->mIsHwConfigValid = 1; }$/;"	f	file:
NComSetDiskSpace	NComRxC.c	/^static void NComSetDiskSpace                      (NComRxC *Com, uint64_t    v) { Com->mDiskSpace = v; Com->mIsDiskSpaceValid = 1; }$/;"	f	file:
NComSetFileSize	NComRxC.c	/^static void NComSetFileSize                       (NComRxC *Com, uint64_t    v) { Com->mFileSize = v; Com->mIsFileSizeValid = 1; }$/;"	f	file:
NComSetUpTime	NComRxC.c	/^static void NComSetUpTime                         (NComRxC *Com, uint32_t    v) { Com->mUpTime = v; Com->mIsUpTimeValid = 1; }$/;"	f	file:
NComGetDualPortRamStatusString	NComRxC.c	/^const char *NComGetDualPortRamStatusString        (const NComRxC *Com) { return DualPortRamStatusName[Com->mDualPortRamStatus]; }$/;"	f
NComSetDualPortRamStatusEnum	NComRxC.c	/^static void NComSetDualPortRamStatusEnum          (NComRxC *Com, uint8_t     v) { Com->mDualPortRamStatus = COM_CK_VALIDITY(v, DualPortRamStatusName); Com->mIsDualPortRamStatusValid = 1; }$/;"	f	file:
NComGetUmacStatusString	NComRxC.c	/^const char *NComGetUmacStatusString               (const NComRxC *Com) { return ComUmacStatus[Com->mUmacStatus]; }$/;"	f
NComSetUmacStatusEnum	NComRxC.c	/^static void NComSetUmacStatusEnum                 (NComRxC *Com, uint8_t     v) { Com->mUmacStatus = COM_CK_VALIDITY(v, ComUmacStatus); Com->mIsUmacStatusValid = 1; }$/;"	f	file:
NComSetGnssGpsEnabled	NComRxC.c	/^static void NComSetGnssGpsEnabled                 (NComRxC *Com, int        v) { Com->mGnssGpsEnabled = v; Com->mIsGnssGpsEnabledValid = 1; }$/;"	f	file:
NComSetGnssGlonassEnabled	NComRxC.c	/^static void NComSetGnssGlonassEnabled             (NComRxC *Com, int        v) { Com->mGnssGlonassEnabled = v; Com->mIsGnssGlonassEnabledValid = 1; }$/;"	f	file:
NComSetGnssGalileoEnabled	NComRxC.c	/^static void NComSetGnssGalileoEnabled             (NComRxC *Com, int        v) { Com->mGnssGalileoEnabled = v; Com->mIsGnssGalileoEnabledValid = 1; }$/;"	f	file:
NComSetPsrDiffEnabled	NComRxC.c	/^static void NComSetPsrDiffEnabled                 (NComRxC *Com, int        v) { Com->mPsrDiffEnabled = v; Com->mIsPsrDiffEnabledValid = 1; }$/;"	f	file:
NComSetSBASEnabled	NComRxC.c	/^static void NComSetSBASEnabled                    (NComRxC *Com, int        v) { Com->mSBASEnabled = v; Com->mIsSBASEnabledValid = 1; }$/;"	f	file:
NComSetOmniVBSEnabled	NComRxC.c	/^static void NComSetOmniVBSEnabled                 (NComRxC *Com, int        v) { Com->mOmniVBSEnabled = v; Com->mIsOmniVBSEnabledValid = 1; }$/;"	f	file:
NComSetOmniHPEnabled	NComRxC.c	/^static void NComSetOmniHPEnabled                  (NComRxC *Com, int        v) { Com->mOmniHPEnabled = v; Com->mIsOmniHPEnabledValid = 1; }$/;"	f	file:
NComSetL1DiffEnabled	NComRxC.c	/^static void NComSetL1DiffEnabled                  (NComRxC *Com, int        v) { Com->mL1DiffEnabled = v; Com->mIsL1DiffEnabledValid = 1; }$/;"	f	file:
NComSetL1L2DiffEnabled	NComRxC.c	/^static void NComSetL1L2DiffEnabled                (NComRxC *Com, int        v) { Com->mL1L2DiffEnabled = v; Com->mIsL1L2DiffEnabledValid = 1; }$/;"	f	file:
NComSetRawRngEnabled	NComRxC.c	/^static void NComSetRawRngEnabled                  (NComRxC *Com, int        v) { Com->mRawRngEnabled = v; Com->mIsRawRngEnabledValid = 1; }$/;"	f	file:
NComSetRawDopEnabled	NComRxC.c	/^static void NComSetRawDopEnabled                  (NComRxC *Com, int        v) { Com->mRawDopEnabled = v; Com->mIsRawDopEnabledValid = 1; }$/;"	f	file:
NComSetRawL1Enabled	NComRxC.c	/^static void NComSetRawL1Enabled                   (NComRxC *Com, int        v) { Com->mRawL1Enabled = v; Com->mIsRawL1EnabledValid = 1; }$/;"	f	file:
NComSetRawL2Enabled	NComRxC.c	/^static void NComSetRawL2Enabled                   (NComRxC *Com, int        v) { Com->mRawL2Enabled = v; Com->mIsRawL2EnabledValid = 1; }$/;"	f	file:
NComSetRawL5Enabled	NComRxC.c	/^static void NComSetRawL5Enabled                   (NComRxC *Com, int        v) { Com->mRawL5Enabled = v; Com->mIsRawL5EnabledValid = 1; }$/;"	f	file:
NComGetGpsPosModeString	NComRxC.c	/^const char *NComGetGpsPosModeString               (const NComRxC *Com) { return ComGpsXModeName[Com->mGpsPosMode]; }$/;"	f
NComSetGpsPosModeEnum	NComRxC.c	/^static void NComSetGpsPosModeEnum                 (NComRxC *Com, uint8_t     v) { Com->mGpsPosMode = COM_CK_VALIDITY(v, ComGpsXModeName); Com->mIsGpsPosModeValid = 1; }$/;"	f	file:
NComGetGpsVelModeString	NComRxC.c	/^const char *NComGetGpsVelModeString               (const NComRxC *Com) { return ComGpsXModeName[Com->mGpsVelMode]; }$/;"	f
NComSetGpsVelModeEnum	NComRxC.c	/^static void NComSetGpsVelModeEnum                 (NComRxC *Com, uint8_t     v) { Com->mGpsVelMode = COM_CK_VALIDITY(v, ComGpsXModeName); Com->mIsGpsVelModeValid = 1; }$/;"	f	file:
NComGetGpsAttModeString	NComRxC.c	/^const char *NComGetGpsAttModeString               (const NComRxC *Com) { return ComGpsXModeName[Com->mGpsAttMode]; }$/;"	f
NComSetGpsAttModeEnum	NComRxC.c	/^static void NComSetGpsAttModeEnum                 (NComRxC *Com, uint8_t     v) { Com->mGpsAttMode = COM_CK_VALIDITY(v, ComGpsXModeName); Com->mIsGpsAttModeValid = 1; }$/;"	f	file:
NComSetPDOP	NComRxC.c	/^static void NComSetPDOP                           (NComRxC *Com, double      v) { Com->mPDOP = v; Com->mIsPDOPValid = 1; }$/;"	f	file:
NComSetHDOP	NComRxC.c	/^static void NComSetHDOP                           (NComRxC *Com, double      v) { Com->mHDOP = v; Com->mIsHDOPValid = 1; }$/;"	f	file:
NComSetVDOP	NComRxC.c	/^static void NComSetVDOP                           (NComRxC *Com, double      v) { Com->mVDOP = v; Com->mIsVDOPValid = 1; }$/;"	f	file:
NComSetGpsNumObs	NComRxC.c	/^static void NComSetGpsNumObs                      (NComRxC *Com, int         v) { Com->mGpsNumObs = v; Com->mIsGpsNumObsValid = 1; }$/;"	f	file:
NComSetUndulation	NComRxC.c	/^static void NComSetUndulation                     (NComRxC *Com, double      v) { Com->mUndulation = v; Com->mIsUndulationValid = 1; }$/;"	f	file:
NComSetGpsDiffAge	NComRxC.c	/^static void NComSetGpsDiffAge                     (NComRxC *Com, double      v) { Com->mGpsDiffAge = v; Com->mIsGpsDiffAgeValid = 1; }$/;"	f	file:
NComSetBaseStationId	NComRxC.c	/^static void NComSetBaseStationId                  (NComRxC *Com, const char *v, int n) { strgrab(Com->mBaseStationId, BASE_STATION_ID_STRLEN, v, n); Com->mIsBaseStationIdValid = 1; }$/;"	f	file:
NComGetHeadQualityString	NComRxC.c	/^const char *NComGetHeadQualityString              (const NComRxC *Com) { return ComHeadQuality[Com->mHeadQuality]; }$/;"	f
NComSetHeadQualityEnum	NComRxC.c	/^static void NComSetHeadQualityEnum                (NComRxC *Com, uint8_t     v) { Com->mHeadQuality = COM_CK_VALIDITY(v, ComHeadQuality); Com->mIsHeadQualityValid = 1; }$/;"	f	file:
NComGetHeadSearchTypeString	NComRxC.c	/^const char *NComGetHeadSearchTypeString           (const NComRxC *Com) { return ComHeadSearchType[Com->mHeadSearchType]; }$/;"	f
NComSetHeadSearchTypeEnum	NComRxC.c	/^static void NComSetHeadSearchTypeEnum             (NComRxC *Com, uint8_t     v) { Com->mHeadSearchType = COM_CK_VALIDITY(v, ComHeadSearchType); Com->mIsHeadSearchTypeValid = 1; }$/;"	f	file:
NComGetHeadSearchStatusString	NComRxC.c	/^const char *NComGetHeadSearchStatusString         (const NComRxC *Com) { return ComHeadSearchStatus[Com->mHeadSearchStatus]; }$/;"	f
NComSetHeadSearchStatusEnum	NComRxC.c	/^static void NComSetHeadSearchStatusEnum           (NComRxC *Com, uint8_t     v) { Com->mHeadSearchStatus = COM_CK_VALIDITY(v, ComHeadSearchStatus); Com->mIsHeadSearchStatusValid = 1; }$/;"	f	file:
NComGetHeadSearchReadyString	NComRxC.c	/^const char *NComGetHeadSearchReadyString          (const NComRxC *Com) { return ComHeadSearchReady[Com->mHeadSearchReady]; }$/;"	f
NComSetHeadSearchReadyEnum	NComRxC.c	/^static void NComSetHeadSearchReadyEnum            (NComRxC *Com, uint8_t     v) { Com->mHeadSearchReady = COM_CK_VALIDITY(v, ComHeadSearchReady); Com->mIsHeadSearchReadyValid = 1; }$/;"	f	file:
NComSetHeadSearchInit	NComRxC.c	/^static void NComSetHeadSearchInit                 (NComRxC *Com, int         v) { Com->mHeadSearchInit = v; Com->mIsHeadSearchInitValid = 1; }$/;"	f	file:
NComSetHeadSearchNum	NComRxC.c	/^static void NComSetHeadSearchNum                  (NComRxC *Com, int         v) { Com->mHeadSearchNum = v; Com->mIsHeadSearchNumValid = 1; }$/;"	f	file:
NComSetHeadSearchTime	NComRxC.c	/^static void NComSetHeadSearchTime                 (NComRxC *Com, int         v) { Com->mHeadSearchTime = v; Com->mIsHeadSearchTimeValid = 1; }$/;"	f	file:
NComSetHeadSearchConstr	NComRxC.c	/^static void NComSetHeadSearchConstr               (NComRxC *Com, int         v) { Com->mHeadSearchConstr = v; Com->mIsHeadSearchConstrValid = 1; }$/;"	f	file:
NComSetHeadSearchMaster	NComRxC.c	/^static void NComSetHeadSearchMaster               (NComRxC *Com, int         v) { Com->mHeadSearchMaster = v; Com->mIsHeadSearchMasterValid = 1; }$/;"	f	file:
NComSetHeadSearchSlave1	NComRxC.c	/^static void NComSetHeadSearchSlave1               (NComRxC *Com, int         v) { Com->mHeadSearchSlave1 = v; Com->mIsHeadSearchSlave1Valid = 1; }$/;"	f	file:
NComSetHeadSearchSlave2	NComRxC.c	/^static void NComSetHeadSearchSlave2               (NComRxC *Com, int         v) { Com->mHeadSearchSlave2 = v; Com->mIsHeadSearchSlave2Valid = 1; }$/;"	f	file:
NComSetHeadSearchSlave3	NComRxC.c	/^static void NComSetHeadSearchSlave3               (NComRxC *Com, int         v) { Com->mHeadSearchSlave3 = v; Com->mIsHeadSearchSlave3Valid = 1; }$/;"	f	file:
NComSetOmniStarSerial	NComRxC.c	/^static void NComSetOmniStarSerial                 (NComRxC *Com, const char *v, int n) { strgrab(Com->mOmniStarSerial, OMNISTAR_SERIAL_STRLEN, v, n); Com->mIsOmniStarSerialValid = 1; }$/;"	f	file:
NComSetOmniStarFreq	NComRxC.c	/^static void NComSetOmniStarFreq                   (NComRxC *Com, double      v) { Com->mOmniStarFreq = v; Com->mIsOmniStarFreqValid = 1; }$/;"	f	file:
NComSetOmniStarSNR	NComRxC.c	/^static void NComSetOmniStarSNR                    (NComRxC *Com, double      v) { Com->mOmniStarSNR = v; Com->mIsOmniStarSNRValid = 1; }$/;"	f	file:
NComSetOmniStarLockTime	NComRxC.c	/^static void NComSetOmniStarLockTime               (NComRxC *Com, double      v) { Com->mOmniStarLockTime = v; Com->mIsOmniStarLockTimeValid = 1; }$/;"	f	file:
NComSetOmniStatusVbsExpired	NComRxC.c	/^static void NComSetOmniStatusVbsExpired           (NComRxC *Com, int        v) { Com->mOmniStatusVbsExpired = v; Com->mIsOmniStatusVbsExpiredValid = 1; }$/;"	f	file:
NComSetOmniStatusVbsOutOfRegion	NComRxC.c	/^static void NComSetOmniStatusVbsOutOfRegion       (NComRxC *Com, int        v) { Com->mOmniStatusVbsOutOfRegion = v; Com->mIsOmniStatusVbsOutOfRegionValid = 1; }$/;"	f	file:
NComSetOmniStatusVbsNoRemoteSites	NComRxC.c	/^static void NComSetOmniStatusVbsNoRemoteSites     (NComRxC *Com, int        v) { Com->mOmniStatusVbsNoRemoteSites = v; Com->mIsOmniStatusVbsNoRemoteSitesValid = 1; }$/;"	f	file:
NComSetOmniStatusHpExpired	NComRxC.c	/^static void NComSetOmniStatusHpExpired            (NComRxC *Com, int        v) { Com->mOmniStatusHpExpired = v; Com->mIsOmniStatusHpExpiredValid = 1; }$/;"	f	file:
NComSetOmniStatusHpOutOfRegion	NComRxC.c	/^static void NComSetOmniStatusHpOutOfRegion        (NComRxC *Com, int        v) { Com->mOmniStatusHpOutOfRegion = v; Com->mIsOmniStatusHpOutOfRegionValid = 1; }$/;"	f	file:
NComSetOmniStatusHpNoRemoteSites	NComRxC.c	/^static void NComSetOmniStatusHpNoRemoteSites      (NComRxC *Com, int        v) { Com->mOmniStatusHpNoRemoteSites = v; Com->mIsOmniStatusHpNoRemoteSitesValid = 1; }$/;"	f	file:
NComSetOmniStatusHpNotConverged	NComRxC.c	/^static void NComSetOmniStatusHpNotConverged       (NComRxC *Com, int        v) { Com->mOmniStatusHpNotConverged = v; Com->mIsOmniStatusHpNotConvergedValid = 1; }$/;"	f	file:
NComSetOmniStatusHpKeyInvalid	NComRxC.c	/^static void NComSetOmniStatusHpKeyInvalid         (NComRxC *Com, int        v) { Com->mOmniStatusHpKeyInvalid = v; Com->mIsOmniStatusHpKeyInvalidValid = 1; }$/;"	f	file:
NComGetOptionLevelString	NComRxC.c	/^const char *NComGetOptionLevelString              (const NComRxC *Com) { return ComOptionVehicle[Com->mOptionLevel]; }$/;"	f
NComSetOptionLevelEnum	NComRxC.c	/^static void NComSetOptionLevelEnum                (NComRxC *Com, uint8_t     v) { Com->mOptionLevel = COM_CK_VALIDITY(v, ComOptionVehicle); Com->mIsOptionLevelValid = 1; }$/;"	f	file:
NComGetOptionVibrationString	NComRxC.c	/^const char *NComGetOptionVibrationString          (const NComRxC *Com) { return ComOptionVibration[Com->mOptionVibration]; }$/;"	f
NComSetOptionVibrationEnum	NComRxC.c	/^static void NComSetOptionVibrationEnum            (NComRxC *Com, uint8_t     v) { Com->mOptionVibration = COM_CK_VALIDITY(v, ComOptionVibration); Com->mIsOptionVibrationValid = 1; }$/;"	f	file:
NComGetOptionGpsAccString	NComRxC.c	/^const char *NComGetOptionGpsAccString             (const NComRxC *Com) { return ComOptionGpsAccuracy[Com->mOptionGpsAcc]; }$/;"	f
NComSetOptionGpsAccEnum	NComRxC.c	/^static void NComSetOptionGpsAccEnum               (NComRxC *Com, uint8_t     v) { Com->mOptionGpsAcc = COM_CK_VALIDITY(v, ComOptionGpsAccuracy); Com->mIsOptionGpsAccValid = 1; }$/;"	f	file:
NComGetOptionUdpString	NComRxC.c	/^const char *NComGetOptionUdpString                (const NComRxC *Com) { return ComOptionOutput[Com->mOptionUdp]; }$/;"	f
NComSetOptionUdpEnum	NComRxC.c	/^static void NComSetOptionUdpEnum                  (NComRxC *Com, uint8_t     v) { Com->mOptionUdp = COM_CK_VALIDITY(v, ComOptionOutput); Com->mIsOptionUdpValid = 1; }$/;"	f	file:
NComGetOptionSer1String	NComRxC.c	/^const char *NComGetOptionSer1String               (const NComRxC *Com) { return ComOptionOutput[Com->mOptionSer1]; }$/;"	f
NComSetOptionSer1Enum	NComRxC.c	/^static void NComSetOptionSer1Enum                 (NComRxC *Com, uint8_t     v) { Com->mOptionSer1 = COM_CK_VALIDITY(v, ComOptionOutput); Com->mIsOptionSer1Valid = 1; }$/;"	f	file:
NComGetOptionSer2String	NComRxC.c	/^const char *NComGetOptionSer2String               (const NComRxC *Com) { return ComOptionOutput[Com->mOptionSer2]; }$/;"	f
NComSetOptionSer2Enum	NComRxC.c	/^static void NComSetOptionSer2Enum                 (NComRxC *Com, uint8_t     v) { Com->mOptionSer2 = COM_CK_VALIDITY(v, ComOptionOutput); Com->mIsOptionSer2Valid = 1; }$/;"	f	file:
NComGetOptionSer3String	NComRxC.c	/^const char *NComGetOptionSer3String               (const NComRxC *Com) { return ComOptionOutput[Com->mOptionSer3]; }$/;"	f
NComSetOptionSer3Enum	NComRxC.c	/^static void NComSetOptionSer3Enum                 (NComRxC *Com, uint8_t     v) { Com->mOptionSer3 = COM_CK_VALIDITY(v, ComOptionOutput); Com->mIsOptionSer3Valid = 1; }$/;"	f	file:
NComGetOptionHeadingString	NComRxC.c	/^const char *NComGetOptionHeadingString            (const NComRxC *Com) { return ComOptionHeading[Com->mOptionHeading]; }$/;"	f
NComSetOptionHeadingEnum	NComRxC.c	/^static void NComSetOptionHeadingEnum              (NComRxC *Com, uint8_t     v) { Com->mOptionHeading = COM_CK_VALIDITY(v, ComOptionHeading); Com->mIsOptionHeadingValid = 1; }$/;"	f	file:
NComSetOptionInitSpeed	NComRxC.c	/^static void NComSetOptionInitSpeed                (NComRxC *Com, double      v) { Com->mOptionInitSpeed = v; Com->mIsOptionInitSpeedValid = 1; Com->mIsOptionInitSpeedConfig = 1; }$/;"	f	file:
NComSetOptionTopSpeed	NComRxC.c	/^static void NComSetOptionTopSpeed                 (NComRxC *Com, double      v) { Com->mOptionTopSpeed = v; Com->mIsOptionTopSpeedValid = 1; Com->mIsOptionTopSpeedConfig = 1; }$/;"	f	file:
NComGetOptionSer1BaudString	NComRxC.c	/^const char *NComGetOptionSer1BaudString           (const NComRxC *Com) { return ComOptionSerBaud[Com->mOptionSer1Baud]; }$/;"	f
NComSetOptionSer1BaudEnum	NComRxC.c	/^static void NComSetOptionSer1BaudEnum             (NComRxC *Com, uint8_t     v) { Com->mOptionSer1Baud = COM_CK_VALIDITY(v, ComOptionSerBaud); Com->mIsOptionSer1BaudValid = 1; }$/;"	f	file:
NComGetOptionSer2BaudString	NComRxC.c	/^const char *NComGetOptionSer2BaudString           (const NComRxC *Com) { return ComOptionSerBaud[Com->mOptionSer2Baud]; }$/;"	f
NComSetOptionSer2BaudEnum	NComRxC.c	/^static void NComSetOptionSer2BaudEnum             (NComRxC *Com, uint8_t     v) { Com->mOptionSer2Baud = COM_CK_VALIDITY(v, ComOptionSerBaud); Com->mIsOptionSer2BaudValid = 1; }$/;"	f	file:
NComGetOptionSer3BaudString	NComRxC.c	/^const char *NComGetOptionSer3BaudString           (const NComRxC *Com) { return ComOptionSerBaud[Com->mOptionSer3Baud]; }$/;"	f
NComSetOptionSer3BaudEnum	NComRxC.c	/^static void NComSetOptionSer3BaudEnum             (NComRxC *Com, uint8_t     v) { Com->mOptionSer3Baud = COM_CK_VALIDITY(v, ComOptionSerBaud); Com->mIsOptionSer3BaudValid = 1; }$/;"	f	file:
NComGetOptionCanBaudString	NComRxC.c	/^const char *NComGetOptionCanBaudString            (const NComRxC *Com) { return ComOptionCanBaud[Com->mOptionCanBaud]; }$/;"	f
NComSetOptionCanBaudEnum	NComRxC.c	/^static void NComSetOptionCanBaudEnum              (NComRxC *Com, uint8_t     v) { Com->mOptionCanBaud = COM_CK_VALIDITY(v, ComOptionCanBaud); Com->mIsOptionCanBaudValid = 1; }$/;"	f	file:
NComSetTime	NComRxC.c	/^static void NComSetTime                           (NComRxC *Com, double      v) { Com->mTime = v; Com->mIsTimeValid = 1; }$/;"	f	file:
NComSetTimeWeekCount	NComRxC.c	/^static void NComSetTimeWeekCount                  (NComRxC *Com, uint32_t    v) { Com->mTimeWeekCount = v; Com->mIsTimeWeekCountValid = 1; }$/;"	f	file:
NComSetTimeWeekSecond	NComRxC.c	/^static void NComSetTimeWeekSecond                 (NComRxC *Com, double      v) { Com->mTimeWeekSecond = v; Com->mIsTimeWeekSecondValid = 1; }$/;"	f	file:
NComSetTimeUtcOffset	NComRxC.c	/^static void NComSetTimeUtcOffset                  (NComRxC *Com, int         v) { Com->mTimeUtcOffset = v; Com->mIsTimeUtcOffsetValid = 1; }$/;"	f	file:
NComSetLat	NComRxC.c	/^static void NComSetLat                            (NComRxC *Com, double      v) { Com->mLat = v; Com->mIsLatValid = 1; Com->mIsLatApprox = 1; }$/;"	f	file:
NComSetLon	NComRxC.c	/^static void NComSetLon                            (NComRxC *Com, double      v) { Com->mLon = v; Com->mIsLonValid = 1; Com->mIsLonApprox = 1; }$/;"	f	file:
NComSetAlt	NComRxC.c	/^static void NComSetAlt                            (NComRxC *Com, double      v) { Com->mAlt = v; Com->mIsAltValid = 1; Com->mIsAltApprox = 1; }$/;"	f	file:
NComSetNorthAcc	NComRxC.c	/^static void NComSetNorthAcc                       (NComRxC *Com, double      v) { Com->mNorthAcc = v; Com->mIsNorthAccValid = 1; }$/;"	f	file:
NComSetEastAcc	NComRxC.c	/^static void NComSetEastAcc                        (NComRxC *Com, double      v) { Com->mEastAcc = v; Com->mIsEastAccValid = 1; }$/;"	f	file:
NComSetAltAcc	NComRxC.c	/^static void NComSetAltAcc                         (NComRxC *Com, double      v) { Com->mAltAcc = v; Com->mIsAltAccValid = 1; }$/;"	f	file:
NComSetDist2d	NComRxC.c	/^static void NComSetDist2d                         (NComRxC *Com, double      v) { Com->mDist2d = v; Com->mIsDist2dValid = 1; }$/;"	f	file:
NComSetDist3d	NComRxC.c	/^static void NComSetDist3d                         (NComRxC *Com, double      v) { Com->mDist3d = v; Com->mIsDist3dValid = 1; }$/;"	f	file:
NComSetVn	NComRxC.c	/^static void NComSetVn                             (NComRxC *Com, double      v) { Com->mVn = v; Com->mIsVnValid = 1; Com->mIsVnApprox = 1; }$/;"	f	file:
NComSetVe	NComRxC.c	/^static void NComSetVe                             (NComRxC *Com, double      v) { Com->mVe = v; Com->mIsVeValid = 1; Com->mIsVeApprox = 1; }$/;"	f	file:
NComSetVd	NComRxC.c	/^static void NComSetVd                             (NComRxC *Com, double      v) { Com->mVd = v; Com->mIsVdValid = 1; Com->mIsVdApprox = 1; }$/;"	f	file:
NComSetVf	NComRxC.c	/^static void NComSetVf                             (NComRxC *Com, double      v) { Com->mVf = v; Com->mIsVfValid = 1; }$/;"	f	file:
NComSetVl	NComRxC.c	/^static void NComSetVl                             (NComRxC *Com, double      v) { Com->mVl = v; Com->mIsVlValid = 1; }$/;"	f	file:
NComSetVnAcc	NComRxC.c	/^static void NComSetVnAcc                          (NComRxC *Com, double      v) { Com->mVnAcc = v; Com->mIsVnAccValid = 1; }$/;"	f	file:
NComSetVeAcc	NComRxC.c	/^static void NComSetVeAcc                          (NComRxC *Com, double      v) { Com->mVeAcc = v; Com->mIsVeAccValid = 1; }$/;"	f	file:
NComSetVdAcc	NComRxC.c	/^static void NComSetVdAcc                          (NComRxC *Com, double      v) { Com->mVdAcc = v; Com->mIsVdAccValid = 1; }$/;"	f	file:
NComSetSpeed2d	NComRxC.c	/^static void NComSetSpeed2d                        (NComRxC *Com, double      v) { Com->mSpeed2d = v; Com->mIsSpeed2dValid = 1; }$/;"	f	file:
NComSetSpeed3d	NComRxC.c	/^static void NComSetSpeed3d                        (NComRxC *Com, double      v) { Com->mSpeed3d = v; Com->mIsSpeed3dValid = 1; }$/;"	f	file:
NComSetAx	NComRxC.c	/^static void NComSetAx                             (NComRxC *Com, double      v) { Com->mAx = v; Com->mIsAxValid = 1; }$/;"	f	file:
NComSetAy	NComRxC.c	/^static void NComSetAy                             (NComRxC *Com, double      v) { Com->mAy = v; Com->mIsAyValid = 1; }$/;"	f	file:
NComSetAz	NComRxC.c	/^static void NComSetAz                             (NComRxC *Com, double      v) { Com->mAz = v; Com->mIsAzValid = 1; }$/;"	f	file:
NComSetAf	NComRxC.c	/^static void NComSetAf                             (NComRxC *Com, double      v) { Com->mAf = v; Com->mIsAfValid = 1; }$/;"	f	file:
NComSetAl	NComRxC.c	/^static void NComSetAl                             (NComRxC *Com, double      v) { Com->mAl = v; Com->mIsAlValid = 1; }$/;"	f	file:
NComSetAd	NComRxC.c	/^static void NComSetAd                             (NComRxC *Com, double      v) { Com->mAd = v; Com->mIsAdValid = 1; }$/;"	f	file:
NComSetFiltAx	NComRxC.c	/^static void NComSetFiltAx                         (NComRxC *Com, double      v) { Com->mFiltAx = v; Com->mIsFiltAxValid = 1; }$/;"	f	file:
NComSetFiltAy	NComRxC.c	/^static void NComSetFiltAy                         (NComRxC *Com, double      v) { Com->mFiltAy = v; Com->mIsFiltAyValid = 1; }$/;"	f	file:
NComSetFiltAz	NComRxC.c	/^static void NComSetFiltAz                         (NComRxC *Com, double      v) { Com->mFiltAz = v; Com->mIsFiltAzValid = 1; }$/;"	f	file:
NComSetFiltAf	NComRxC.c	/^static void NComSetFiltAf                         (NComRxC *Com, double      v) { Com->mFiltAf = v; Com->mIsFiltAfValid = 1; }$/;"	f	file:
NComSetFiltAl	NComRxC.c	/^static void NComSetFiltAl                         (NComRxC *Com, double      v) { Com->mFiltAl = v; Com->mIsFiltAlValid = 1; }$/;"	f	file:
NComSetFiltAd	NComRxC.c	/^static void NComSetFiltAd                         (NComRxC *Com, double      v) { Com->mFiltAd = v; Com->mIsFiltAdValid = 1; }$/;"	f	file:
NComSetHeading	NComRxC.c	/^static void NComSetHeading                        (NComRxC *Com, double      v) { Com->mHeading = v; Com->mIsHeadingValid = 1; Com->mIsHeadingApprox = 1; }$/;"	f	file:
NComSetPitch	NComRxC.c	/^static void NComSetPitch                          (NComRxC *Com, double      v) { Com->mPitch = v; Com->mIsPitchValid = 1; Com->mIsPitchApprox = 1; }$/;"	f	file:
NComSetRoll	NComRxC.c	/^static void NComSetRoll                           (NComRxC *Com, double      v) { Com->mRoll = v; Com->mIsRollValid = 1; Com->mIsRollApprox = 1; }$/;"	f	file:
NComSetHeadingAcc	NComRxC.c	/^static void NComSetHeadingAcc                     (NComRxC *Com, double      v) { Com->mHeadingAcc = v; Com->mIsHeadingAccValid = 1; }$/;"	f	file:
NComSetPitchAcc	NComRxC.c	/^static void NComSetPitchAcc                       (NComRxC *Com, double      v) { Com->mPitchAcc = v; Com->mIsPitchAccValid = 1; }$/;"	f	file:
NComSetRollAcc	NComRxC.c	/^static void NComSetRollAcc                        (NComRxC *Com, double      v) { Com->mRollAcc = v; Com->mIsRollAccValid = 1; }$/;"	f	file:
NComSetTrack	NComRxC.c	/^static void NComSetTrack                          (NComRxC *Com, double      v) { Com->mTrack = v; Com->mIsTrackValid = 1; }$/;"	f	file:
NComSetSlip	NComRxC.c	/^static void NComSetSlip                           (NComRxC *Com, double      v) { Com->mSlip = v; Com->mIsSlipValid = 1; }$/;"	f	file:
NComSetCurvature	NComRxC.c	/^static void NComSetCurvature                      (NComRxC *Com, double      v) { Com->mCurvature = v; Com->mIsCurvatureValid = 1; }$/;"	f	file:
NComSetWx	NComRxC.c	/^static void NComSetWx                             (NComRxC *Com, double      v) { Com->mWx = v; Com->mIsWxValid = 1; }$/;"	f	file:
NComSetWy	NComRxC.c	/^static void NComSetWy                             (NComRxC *Com, double      v) { Com->mWy = v; Com->mIsWyValid = 1; }$/;"	f	file:
NComSetWz	NComRxC.c	/^static void NComSetWz                             (NComRxC *Com, double      v) { Com->mWz = v; Com->mIsWzValid = 1; }$/;"	f	file:
NComSetWf	NComRxC.c	/^static void NComSetWf                             (NComRxC *Com, double      v) { Com->mWf = v; Com->mIsWfValid = 1; }$/;"	f	file:
NComSetWl	NComRxC.c	/^static void NComSetWl                             (NComRxC *Com, double      v) { Com->mWl = v; Com->mIsWlValid = 1; }$/;"	f	file:
NComSetWd	NComRxC.c	/^static void NComSetWd                             (NComRxC *Com, double      v) { Com->mWd = v; Com->mIsWdValid = 1; }$/;"	f	file:
NComSetYx	NComRxC.c	/^static void NComSetYx                             (NComRxC *Com, double      v) { Com->mYx = v; Com->mIsYxValid = 1; }$/;"	f	file:
NComSetYy	NComRxC.c	/^static void NComSetYy                             (NComRxC *Com, double      v) { Com->mYy = v; Com->mIsYyValid = 1; }$/;"	f	file:
NComSetYz	NComRxC.c	/^static void NComSetYz                             (NComRxC *Com, double      v) { Com->mYz = v; Com->mIsYzValid = 1; }$/;"	f	file:
NComSetYf	NComRxC.c	/^static void NComSetYf                             (NComRxC *Com, double      v) { Com->mYf = v; Com->mIsYfValid = 1; }$/;"	f	file:
NComSetYl	NComRxC.c	/^static void NComSetYl                             (NComRxC *Com, double      v) { Com->mYl = v; Com->mIsYlValid = 1; }$/;"	f	file:
NComSetYd	NComRxC.c	/^static void NComSetYd                             (NComRxC *Com, double      v) { Com->mYd = v; Com->mIsYdValid = 1; }$/;"	f	file:
NComSetFiltYx	NComRxC.c	/^static void NComSetFiltYx                         (NComRxC *Com, double      v) { Com->mFiltYx = v; Com->mIsFiltYxValid = 1; }$/;"	f	file:
NComSetFiltYy	NComRxC.c	/^static void NComSetFiltYy                         (NComRxC *Com, double      v) { Com->mFiltYy = v; Com->mIsFiltYyValid = 1; }$/;"	f	file:
NComSetFiltYz	NComRxC.c	/^static void NComSetFiltYz                         (NComRxC *Com, double      v) { Com->mFiltYz = v; Com->mIsFiltYzValid = 1; }$/;"	f	file:
NComSetFiltYf	NComRxC.c	/^static void NComSetFiltYf                         (NComRxC *Com, double      v) { Com->mFiltYf = v; Com->mIsFiltYfValid = 1; }$/;"	f	file:
NComSetFiltYl	NComRxC.c	/^static void NComSetFiltYl                         (NComRxC *Com, double      v) { Com->mFiltYl = v; Com->mIsFiltYlValid = 1; }$/;"	f	file:
NComSetFiltYd	NComRxC.c	/^static void NComSetFiltYd                         (NComRxC *Com, double      v) { Com->mFiltYd = v; Com->mIsFiltYdValid = 1; }$/;"	f	file:
NComSetInnPosX	NComRxC.c	/^static void NComSetInnPosX                        (NComRxC *Com, double      v) { Com->mInnPosX = v; Com->mInnPosXAge = 0; }$/;"	f	file:
NComSetInnPosY	NComRxC.c	/^static void NComSetInnPosY                        (NComRxC *Com, double      v) { Com->mInnPosY = v; Com->mInnPosYAge = 0; }$/;"	f	file:
NComSetInnPosZ	NComRxC.c	/^static void NComSetInnPosZ                        (NComRxC *Com, double      v) { Com->mInnPosZ = v; Com->mInnPosZAge = 0; }$/;"	f	file:
NComSetInnVelX	NComRxC.c	/^static void NComSetInnVelX                        (NComRxC *Com, double      v) { Com->mInnVelX = v; Com->mInnVelXAge = 0; }$/;"	f	file:
NComSetInnVelY	NComRxC.c	/^static void NComSetInnVelY                        (NComRxC *Com, double      v) { Com->mInnVelY = v; Com->mInnVelYAge = 0; }$/;"	f	file:
NComSetInnVelZ	NComRxC.c	/^static void NComSetInnVelZ                        (NComRxC *Com, double      v) { Com->mInnVelZ = v; Com->mInnVelZAge = 0; }$/;"	f	file:
NComSetInnHeading	NComRxC.c	/^static void NComSetInnHeading                     (NComRxC *Com, double      v) { Com->mInnHeading = v; Com->mInnHeadingAge = 0; }$/;"	f	file:
NComSetInnPitch	NComRxC.c	/^static void NComSetInnPitch                       (NComRxC *Com, double      v) { Com->mInnPitch = v; Com->mInnPitchAge = 0; }$/;"	f	file:
NComSetWxBias	NComRxC.c	/^static void NComSetWxBias                         (NComRxC *Com, double      v) { Com->mWxBias = v; Com->mIsWxBiasValid = 1; }$/;"	f	file:
NComSetWyBias	NComRxC.c	/^static void NComSetWyBias                         (NComRxC *Com, double      v) { Com->mWyBias = v; Com->mIsWyBiasValid = 1; }$/;"	f	file:
NComSetWzBias	NComRxC.c	/^static void NComSetWzBias                         (NComRxC *Com, double      v) { Com->mWzBias = v; Com->mIsWzBiasValid = 1; }$/;"	f	file:
NComSetWxBiasAcc	NComRxC.c	/^static void NComSetWxBiasAcc                      (NComRxC *Com, double      v) { Com->mWxBiasAcc = v; Com->mIsWxBiasAccValid = 1; }$/;"	f	file:
NComSetWyBiasAcc	NComRxC.c	/^static void NComSetWyBiasAcc                      (NComRxC *Com, double      v) { Com->mWyBiasAcc = v; Com->mIsWyBiasAccValid = 1; }$/;"	f	file:
NComSetWzBiasAcc	NComRxC.c	/^static void NComSetWzBiasAcc                      (NComRxC *Com, double      v) { Com->mWzBiasAcc = v; Com->mIsWzBiasAccValid = 1; }$/;"	f	file:
NComSetWxSf	NComRxC.c	/^static void NComSetWxSf                           (NComRxC *Com, double      v) { Com->mWxSf = v; Com->mIsWxSfValid = 1; }$/;"	f	file:
NComSetWySf	NComRxC.c	/^static void NComSetWySf                           (NComRxC *Com, double      v) { Com->mWySf = v; Com->mIsWySfValid = 1; }$/;"	f	file:
NComSetWzSf	NComRxC.c	/^static void NComSetWzSf                           (NComRxC *Com, double      v) { Com->mWzSf = v; Com->mIsWzSfValid = 1; }$/;"	f	file:
NComSetWxSfAcc	NComRxC.c	/^static void NComSetWxSfAcc                        (NComRxC *Com, double      v) { Com->mWxSfAcc = v; Com->mIsWxSfAccValid = 1; }$/;"	f	file:
NComSetWySfAcc	NComRxC.c	/^static void NComSetWySfAcc                        (NComRxC *Com, double      v) { Com->mWySfAcc = v; Com->mIsWySfAccValid = 1; }$/;"	f	file:
NComSetWzSfAcc	NComRxC.c	/^static void NComSetWzSfAcc                        (NComRxC *Com, double      v) { Com->mWzSfAcc = v; Com->mIsWzSfAccValid = 1; }$/;"	f	file:
NComSetAxBias	NComRxC.c	/^static void NComSetAxBias                         (NComRxC *Com, double      v) { Com->mAxBias = v; Com->mIsAxBiasValid = 1; }$/;"	f	file:
NComSetAyBias	NComRxC.c	/^static void NComSetAyBias                         (NComRxC *Com, double      v) { Com->mAyBias = v; Com->mIsAyBiasValid = 1; }$/;"	f	file:
NComSetAzBias	NComRxC.c	/^static void NComSetAzBias                         (NComRxC *Com, double      v) { Com->mAzBias = v; Com->mIsAzBiasValid = 1; }$/;"	f	file:
NComSetAxBiasAcc	NComRxC.c	/^static void NComSetAxBiasAcc                      (NComRxC *Com, double      v) { Com->mAxBiasAcc = v; Com->mIsAxBiasAccValid = 1; }$/;"	f	file:
NComSetAyBiasAcc	NComRxC.c	/^static void NComSetAyBiasAcc                      (NComRxC *Com, double      v) { Com->mAyBiasAcc = v; Com->mIsAyBiasAccValid = 1; }$/;"	f	file:
NComSetAzBiasAcc	NComRxC.c	/^static void NComSetAzBiasAcc                      (NComRxC *Com, double      v) { Com->mAzBiasAcc = v; Com->mIsAzBiasAccValid = 1; }$/;"	f	file:
NComSetAxSf	NComRxC.c	/^static void NComSetAxSf                           (NComRxC *Com, double      v) { Com->mAxSf = v; Com->mIsAxSfValid = 1; }$/;"	f	file:
NComSetAySf	NComRxC.c	/^static void NComSetAySf                           (NComRxC *Com, double      v) { Com->mAySf = v; Com->mIsAySfValid = 1; }$/;"	f	file:
NComSetAzSf	NComRxC.c	/^static void NComSetAzSf                           (NComRxC *Com, double      v) { Com->mAzSf = v; Com->mIsAzSfValid = 1; }$/;"	f	file:
NComSetAxSfAcc	NComRxC.c	/^static void NComSetAxSfAcc                        (NComRxC *Com, double      v) { Com->mAxSfAcc = v; Com->mIsAxSfAccValid = 1; }$/;"	f	file:
NComSetAySfAcc	NComRxC.c	/^static void NComSetAySfAcc                        (NComRxC *Com, double      v) { Com->mAySfAcc = v; Com->mIsAySfAccValid = 1; }$/;"	f	file:
NComSetAzSfAcc	NComRxC.c	/^static void NComSetAzSfAcc                        (NComRxC *Com, double      v) { Com->mAzSfAcc = v; Com->mIsAzSfAccValid = 1; }$/;"	f	file:
NComSetGAPx	NComRxC.c	/^static void NComSetGAPx                           (NComRxC *Com, double      v) { Com->mGAPx = v; Com->mIsGAPxValid = 1; }$/;"	f	file:
NComSetGAPy	NComRxC.c	/^static void NComSetGAPy                           (NComRxC *Com, double      v) { Com->mGAPy = v; Com->mIsGAPyValid = 1; }$/;"	f	file:
NComSetGAPz	NComRxC.c	/^static void NComSetGAPz                           (NComRxC *Com, double      v) { Com->mGAPz = v; Com->mIsGAPzValid = 1; }$/;"	f	file:
NComSetGAPxAcc	NComRxC.c	/^static void NComSetGAPxAcc                        (NComRxC *Com, double      v) { Com->mGAPxAcc = v; Com->mIsGAPxAccValid = 1; }$/;"	f	file:
NComSetGAPyAcc	NComRxC.c	/^static void NComSetGAPyAcc                        (NComRxC *Com, double      v) { Com->mGAPyAcc = v; Com->mIsGAPyAccValid = 1; }$/;"	f	file:
NComSetGAPzAcc	NComRxC.c	/^static void NComSetGAPzAcc                        (NComRxC *Com, double      v) { Com->mGAPzAcc = v; Com->mIsGAPzAccValid = 1; }$/;"	f	file:
NComSetAtH	NComRxC.c	/^static void NComSetAtH                            (NComRxC *Com, double      v) { Com->mAtH = v; Com->mIsAtHValid = 1; }$/;"	f	file:
NComSetAtP	NComRxC.c	/^static void NComSetAtP                            (NComRxC *Com, double      v) { Com->mAtP = v; Com->mIsAtPValid = 1; }$/;"	f	file:
NComSetAtHAcc	NComRxC.c	/^static void NComSetAtHAcc                         (NComRxC *Com, double      v) { Com->mAtHAcc = v; Com->mIsAtHAccValid = 1; }$/;"	f	file:
NComSetAtPAcc	NComRxC.c	/^static void NComSetAtPAcc                         (NComRxC *Com, double      v) { Com->mAtPAcc = v; Com->mIsAtPAccValid = 1; }$/;"	f	file:
NComSetBaseLineLength	NComRxC.c	/^static void NComSetBaseLineLength                 (NComRxC *Com, double      v) { Com->mBaseLineLength = v; Com->mIsBaseLineLengthValid = 1; Com->mIsBaseLineLengthConfig = 1; }$/;"	f	file:
NComSetBaseLineLengthAcc	NComRxC.c	/^static void NComSetBaseLineLengthAcc              (NComRxC *Com, double      v) { Com->mBaseLineLengthAcc = v; Com->mIsBaseLineLengthAccValid = 1; Com->mIsBaseLineLengthAccConfig = 1; }$/;"	f	file:
NComSetImuMissedPkts	NComRxC.c	/^static void NComSetImuMissedPkts                  (NComRxC *Com, uint32_t    v) { Com->mImuMissedPkts = v; Com->mIsImuMissedPktsValid = 1; }$/;"	f	file:
NComSetImuResetCount	NComRxC.c	/^static void NComSetImuResetCount                  (NComRxC *Com, uint32_t    v) { Com->mImuResetCount = v; Com->mIsImuResetCountValid = 1; }$/;"	f	file:
NComSetImuErrorCount	NComRxC.c	/^static void NComSetImuErrorCount                  (NComRxC *Com, uint32_t    v) { Com->mImuErrorCount = v; Com->mIsImuErrorCountValid = 1; }$/;"	f	file:
NComSetGPSPosReject	NComRxC.c	/^static void NComSetGPSPosReject                   (NComRxC *Com, uint32_t    v) { Com->mGPSPosReject = v; Com->mIsGPSPosRejectValid = 1; }$/;"	f	file:
NComSetGPSVelReject	NComRxC.c	/^static void NComSetGPSVelReject                   (NComRxC *Com, uint32_t    v) { Com->mGPSVelReject = v; Com->mIsGPSVelRejectValid = 1; }$/;"	f	file:
NComSetGPSAttReject	NComRxC.c	/^static void NComSetGPSAttReject                   (NComRxC *Com, uint32_t    v) { Com->mGPSAttReject = v; Com->mIsGPSAttRejectValid = 1; }$/;"	f	file:
NComSetImuChars	NComRxC.c	/^static void NComSetImuChars                       (NComRxC *Com, uint32_t    v) { Com->mImuChars = v; Com->mIsImuCharsValid = 1; }$/;"	f	file:
NComSetImuCharsSkipped	NComRxC.c	/^static void NComSetImuCharsSkipped                (NComRxC *Com, uint32_t    v) { Com->mImuCharsSkipped = v; Com->mIsImuCharsSkippedValid = 1; }$/;"	f	file:
NComSetImuPkts	NComRxC.c	/^static void NComSetImuPkts                        (NComRxC *Com, uint32_t    v) { Com->mImuPkts = v; Com->mIsImuPktsValid = 1; }$/;"	f	file:
NComSetCmdChars	NComRxC.c	/^static void NComSetCmdChars                       (NComRxC *Com, uint32_t    v) { Com->mCmdChars = v; Com->mIsCmdCharsValid = 1; }$/;"	f	file:
NComSetCmdCharsSkipped	NComRxC.c	/^static void NComSetCmdCharsSkipped                (NComRxC *Com, uint32_t    v) { Com->mCmdCharsSkipped = v; Com->mIsCmdCharsSkippedValid = 1; }$/;"	f	file:
NComSetCmdPkts	NComRxC.c	/^static void NComSetCmdPkts                        (NComRxC *Com, uint32_t    v) { Com->mCmdPkts = v; Com->mIsCmdPktsValid = 1; }$/;"	f	file:
NComSetCmdErrors	NComRxC.c	/^static void NComSetCmdErrors                      (NComRxC *Com, uint32_t    v) { Com->mCmdErrors = v; Com->mIsCmdErrorsValid = 1; }$/;"	f	file:
NComSetImu2VehHeading	NComRxC.c	/^static void NComSetImu2VehHeading                 (NComRxC *Com, double      v) { Com->mImu2VehHeading = v; Com->mIsImu2VehHeadingValid = 1; }$/;"	f	file:
NComSetImu2VehPitch	NComRxC.c	/^static void NComSetImu2VehPitch                   (NComRxC *Com, double      v) { Com->mImu2VehPitch = v; Com->mIsImu2VehPitchValid = 1; }$/;"	f	file:
NComSetImu2VehRoll	NComRxC.c	/^static void NComSetImu2VehRoll                    (NComRxC *Com, double      v) { Com->mImu2VehRoll = v; Com->mIsImu2VehRollValid = 1; }$/;"	f	file:
NComSetTrigTime	NComRxC.c	/^static void NComSetTrigTime                       (NComRxC *Com, double      v) { Com->mTrigTime = v; Com->mIsTrigTimeValid = 1; Com->mIsTrigTimeNew = 1; }$/;"	f	file:
NComSetTrig2Time	NComRxC.c	/^static void NComSetTrig2Time                      (NComRxC *Com, double      v) { Com->mTrig2Time = v; Com->mIsTrig2TimeValid = 1; Com->mIsTrig2TimeNew = 1; }$/;"	f	file:
NComSetDigitalOutTime	NComRxC.c	/^static void NComSetDigitalOutTime                 (NComRxC *Com, double      v) { Com->mDigitalOutTime = v; Com->mIsDigitalOutTimeValid = 1; Com->mIsDigitalOutTimeNew = 1; }$/;"	f	file:
NComSetRemoteLeverArmX	NComRxC.c	/^static void NComSetRemoteLeverArmX                (NComRxC *Com, double      v) { Com->mRemoteLeverArmX = v; Com->mIsRemoteLeverArmXValid = 1; }$/;"	f	file:
NComSetRemoteLeverArmY	NComRxC.c	/^static void NComSetRemoteLeverArmY                (NComRxC *Com, double      v) { Com->mRemoteLeverArmY = v; Com->mIsRemoteLeverArmYValid = 1; }$/;"	f	file:
NComSetRemoteLeverArmZ	NComRxC.c	/^static void NComSetRemoteLeverArmZ                (NComRxC *Com, double      v) { Com->mRemoteLeverArmZ = v; Com->mIsRemoteLeverArmZValid = 1; }$/;"	f	file:
NComSetRefLat	NComRxC.c	/^static void NComSetRefLat                         (NComRxC *Com, double      v) { Com->mRefLat = v; Com->mIsRefLatValid = 1; }$/;"	f	file:
NComSetRefLon	NComRxC.c	/^static void NComSetRefLon                         (NComRxC *Com, double      v) { Com->mRefLon = v; Com->mIsRefLonValid = 1; }$/;"	f	file:
NComSetRefAlt	NComRxC.c	/^static void NComSetRefAlt                         (NComRxC *Com, double      v) { Com->mRefAlt = v; Com->mIsRefAltValid = 1; }$/;"	f	file:
NComSetRefHeading	NComRxC.c	/^static void NComSetRefHeading                     (NComRxC *Com, double      v) { Com->mRefHeading = v; Com->mIsRefHeadingValid = 1; }$/;"	f	file:
NComSetInnZeroVelX	NComRxC.c	/^static void NComSetInnZeroVelX                    (NComRxC *Com, double      v) { Com->mInnZeroVelX = v; Com->mInnZeroVelXAge = 0; }$/;"	f	file:
NComSetInnZeroVelY	NComRxC.c	/^static void NComSetInnZeroVelY                    (NComRxC *Com, double      v) { Com->mInnZeroVelY = v; Com->mInnZeroVelYAge = 0; }$/;"	f	file:
NComSetInnZeroVelZ	NComRxC.c	/^static void NComSetInnZeroVelZ                    (NComRxC *Com, double      v) { Com->mInnZeroVelZ = v; Com->mInnZeroVelZAge = 0; }$/;"	f	file:
NComSetInnNoSlipH	NComRxC.c	/^static void NComSetInnNoSlipH                     (NComRxC *Com, double      v) { Com->mInnNoSlipH = v; Com->mInnNoSlipHAge = 0; }$/;"	f	file:
NComSetZeroVelLeverArmX	NComRxC.c	/^static void NComSetZeroVelLeverArmX               (NComRxC *Com, double      v) { Com->mZeroVelLeverArmX = v; Com->mIsZeroVelLeverArmXValid = 1; }$/;"	f	file:
NComSetZeroVelLeverArmY	NComRxC.c	/^static void NComSetZeroVelLeverArmY               (NComRxC *Com, double      v) { Com->mZeroVelLeverArmY = v; Com->mIsZeroVelLeverArmYValid = 1; }$/;"	f	file:
NComSetZeroVelLeverArmZ	NComRxC.c	/^static void NComSetZeroVelLeverArmZ               (NComRxC *Com, double      v) { Com->mZeroVelLeverArmZ = v; Com->mIsZeroVelLeverArmZValid = 1; }$/;"	f	file:
NComSetZeroVelLeverArmXAcc	NComRxC.c	/^static void NComSetZeroVelLeverArmXAcc            (NComRxC *Com, double      v) { Com->mZeroVelLeverArmXAcc = v; Com->mIsZeroVelLeverArmXAccValid = 1; }$/;"	f	file:
NComSetZeroVelLeverArmYAcc	NComRxC.c	/^static void NComSetZeroVelLeverArmYAcc            (NComRxC *Com, double      v) { Com->mZeroVelLeverArmYAcc = v; Com->mIsZeroVelLeverArmYAccValid = 1; }$/;"	f	file:
NComSetZeroVelLeverArmZAcc	NComRxC.c	/^static void NComSetZeroVelLeverArmZAcc            (NComRxC *Com, double      v) { Com->mZeroVelLeverArmZAcc = v; Com->mIsZeroVelLeverArmZAccValid = 1; }$/;"	f	file:
NComSetNoSlipLeverArmX	NComRxC.c	/^static void NComSetNoSlipLeverArmX                (NComRxC *Com, double      v) { Com->mNoSlipLeverArmX = v; Com->mIsNoSlipLeverArmXValid = 1; }$/;"	f	file:
NComSetNoSlipLeverArmY	NComRxC.c	/^static void NComSetNoSlipLeverArmY                (NComRxC *Com, double      v) { Com->mNoSlipLeverArmY = v; Com->mIsNoSlipLeverArmYValid = 1; }$/;"	f	file:
NComSetNoSlipLeverArmZ	NComRxC.c	/^static void NComSetNoSlipLeverArmZ                (NComRxC *Com, double      v) { Com->mNoSlipLeverArmZ = v; Com->mIsNoSlipLeverArmZValid = 1; }$/;"	f	file:
NComSetNoSlipLeverArmXAcc	NComRxC.c	/^static void NComSetNoSlipLeverArmXAcc             (NComRxC *Com, double      v) { Com->mNoSlipLeverArmXAcc = v; Com->mIsNoSlipLeverArmXAccValid = 1; }$/;"	f	file:
NComSetNoSlipLeverArmYAcc	NComRxC.c	/^static void NComSetNoSlipLeverArmYAcc             (NComRxC *Com, double      v) { Com->mNoSlipLeverArmYAcc = v; Com->mIsNoSlipLeverArmYAccValid = 1; }$/;"	f	file:
NComSetNoSlipLeverArmZAcc	NComRxC.c	/^static void NComSetNoSlipLeverArmZAcc             (NComRxC *Com, double      v) { Com->mNoSlipLeverArmZAcc = v; Com->mIsNoSlipLeverArmZAccValid = 1; }$/;"	f	file:
NComSetHeadingMisAlign	NComRxC.c	/^static void NComSetHeadingMisAlign                (NComRxC *Com, double      v) { Com->mHeadingMisAlign = v; Com->mIsHeadingMisAlignValid = 1; }$/;"	f	file:
NComSetHeadingMisAlignAcc	NComRxC.c	/^static void NComSetHeadingMisAlignAcc             (NComRxC *Com, double      v) { Com->mHeadingMisAlignAcc = v; Com->mIsHeadingMisAlignAccValid = 1; }$/;"	f	file:
NComSetOptionSZVDelay	NComRxC.c	/^static void NComSetOptionSZVDelay                 (NComRxC *Com, double      v) { Com->mOptionSZVDelay = v; Com->mIsOptionSZVDelayValid = 1; Com->mIsOptionSZVDelayConfig = 1; }$/;"	f	file:
NComSetOptionSZVPeriod	NComRxC.c	/^static void NComSetOptionSZVPeriod                (NComRxC *Com, double      v) { Com->mOptionSZVPeriod = v; Com->mIsOptionSZVPeriodValid = 1; Com->mIsOptionSZVPeriodConfig = 1; }$/;"	f	file:
NComSetOptionNSDelay	NComRxC.c	/^static void NComSetOptionNSDelay                  (NComRxC *Com, double      v) { Com->mOptionNSDelay = v; Com->mIsOptionNSDelayValid = 1; Com->mIsOptionNSDelayConfig = 1; }$/;"	f	file:
NComSetOptionNSPeriod	NComRxC.c	/^static void NComSetOptionNSPeriod                 (NComRxC *Com, double      v) { Com->mOptionNSPeriod = v; Com->mIsOptionNSPeriodValid = 1; Com->mIsOptionNSPeriodConfig = 1; }$/;"	f	file:
NComSetOptionNSAngleStd	NComRxC.c	/^static void NComSetOptionNSAngleStd               (NComRxC *Com, double      v) { Com->mOptionNSAngleStd = v; Com->mIsOptionNSAngleStdValid = 1; Com->mIsOptionNSAngleStdConfig = 1; }$/;"	f	file:
NComSetOptionNSHAccel	NComRxC.c	/^static void NComSetOptionNSHAccel                 (NComRxC *Com, double      v) { Com->mOptionNSHAccel = v; Com->mIsOptionNSHAccelValid = 1; Com->mIsOptionNSHAccelConfig = 1; }$/;"	f	file:
NComSetOptionNSVAccel	NComRxC.c	/^static void NComSetOptionNSVAccel                 (NComRxC *Com, double      v) { Com->mOptionNSVAccel = v; Com->mIsOptionNSVAccelValid = 1; Com->mIsOptionNSVAccelConfig = 1; }$/;"	f	file:
NComSetOptionNSSpeed	NComRxC.c	/^static void NComSetOptionNSSpeed                  (NComRxC *Com, double      v) { Com->mOptionNSSpeed = v; Com->mIsOptionNSSpeedValid = 1; Com->mIsOptionNSSpeedConfig = 1; }$/;"	f	file:
NComSetOptionNSRadius	NComRxC.c	/^static void NComSetOptionNSRadius                 (NComRxC *Com, double      v) { Com->mOptionNSRadius = v; Com->mIsOptionNSRadiusValid = 1; Com->mIsOptionNSRadiusConfig = 1; }$/;"	f	file:
NComSetInnWSpeed	NComRxC.c	/^static void NComSetInnWSpeed                      (NComRxC *Com, double      v) { Com->mInnWSpeed = v; Com->mInnWSpeedAge = 0; }$/;"	f	file:
NComSetWSpeedLeverArmX	NComRxC.c	/^static void NComSetWSpeedLeverArmX                (NComRxC *Com, double      v) { Com->mWSpeedLeverArmX = v; Com->mIsWSpeedLeverArmXValid = 1; }$/;"	f	file:
NComSetWSpeedLeverArmY	NComRxC.c	/^static void NComSetWSpeedLeverArmY                (NComRxC *Com, double      v) { Com->mWSpeedLeverArmY = v; Com->mIsWSpeedLeverArmYValid = 1; }$/;"	f	file:
NComSetWSpeedLeverArmZ	NComRxC.c	/^static void NComSetWSpeedLeverArmZ                (NComRxC *Com, double      v) { Com->mWSpeedLeverArmZ = v; Com->mIsWSpeedLeverArmZValid = 1; }$/;"	f	file:
NComSetWSpeedLeverArmXAcc	NComRxC.c	/^static void NComSetWSpeedLeverArmXAcc             (NComRxC *Com, double      v) { Com->mWSpeedLeverArmXAcc = v; Com->mIsWSpeedLeverArmXAccValid = 1; }$/;"	f	file:
NComSetWSpeedLeverArmYAcc	NComRxC.c	/^static void NComSetWSpeedLeverArmYAcc             (NComRxC *Com, double      v) { Com->mWSpeedLeverArmYAcc = v; Com->mIsWSpeedLeverArmYAccValid = 1; }$/;"	f	file:
NComSetWSpeedLeverArmZAcc	NComRxC.c	/^static void NComSetWSpeedLeverArmZAcc             (NComRxC *Com, double      v) { Com->mWSpeedLeverArmZAcc = v; Com->mIsWSpeedLeverArmZAccValid = 1; }$/;"	f	file:
NComSetWSpeedScale	NComRxC.c	/^static void NComSetWSpeedScale                    (NComRxC *Com, double      v) { Com->mWSpeedScale = v; Com->mIsWSpeedScaleValid = 1; Com->mIsWSpeedScaleConfig = 1; }$/;"	f	file:
NComSetWSpeedScaleStd	NComRxC.c	/^static void NComSetWSpeedScaleStd                 (NComRxC *Com, double      v) { Com->mWSpeedScaleStd = v; Com->mIsWSpeedScaleStdValid = 1; Com->mIsWSpeedScaleStdConfig = 1; }$/;"	f	file:
NComSetOptionWSpeedDelay	NComRxC.c	/^static void NComSetOptionWSpeedDelay              (NComRxC *Com, double      v) { Com->mOptionWSpeedDelay = v; Com->mIsOptionWSpeedDelayValid = 1; Com->mIsOptionWSpeedDelayConfig = 1; }$/;"	f	file:
NComSetOptionWSpeedZVDelay	NComRxC.c	/^static void NComSetOptionWSpeedZVDelay            (NComRxC *Com, double      v) { Com->mOptionWSpeedZVDelay = v; Com->mIsOptionWSpeedZVDelayValid = 1; Com->mIsOptionWSpeedZVDelayConfig = 1; }$/;"	f	file:
NComSetOptionWSpeedNoiseStd	NComRxC.c	/^static void NComSetOptionWSpeedNoiseStd           (NComRxC *Com, double      v) { Com->mOptionWSpeedNoiseStd = v; Com->mIsOptionWSpeedNoiseStdValid = 1; Com->mIsOptionWSpeedNoiseStdConfig = 1; }$/;"	f	file:
NComSetWSpeedTime	NComRxC.c	/^static void NComSetWSpeedTime                     (NComRxC *Com, double      v) { Com->mWSpeedTime = v; Com->mIsWSpeedTimeValid = 1; }$/;"	f	file:
NComSetWSpeedCount	NComRxC.c	/^static void NComSetWSpeedCount                    (NComRxC *Com, double      v) { Com->mWSpeedCount = v; Com->mIsWSpeedCountValid = 1; }$/;"	f	file:
NComSetWSpeedTimeUnchanged	NComRxC.c	/^static void NComSetWSpeedTimeUnchanged            (NComRxC *Com, double      v) { Com->mWSpeedTimeUnchanged = v; Com->mIsWSpeedTimeUnchangedValid = 1; }$/;"	f	file:
NComSetWSpeedFreq	NComRxC.c	/^static void NComSetWSpeedFreq                     (NComRxC *Com, double      v) { Com->mWSpeedFreq = v; Com->mIsWSpeedFreqValid = 1; }$/;"	f	file:
NComSetInnHeadingH	NComRxC.c	/^static void NComSetInnHeadingH                    (NComRxC *Com, double      v) { Com->mInnHeadingH = v; Com->mInnHeadingHAge = 0; }$/;"	f	file:
NComSetOptionHLDelay	NComRxC.c	/^static void NComSetOptionHLDelay                  (NComRxC *Com, double      v) { Com->mOptionHLDelay = v; Com->mIsOptionHLDelayValid = 1; Com->mIsOptionHLDelayConfig = 1; }$/;"	f	file:
NComSetOptionHLPeriod	NComRxC.c	/^static void NComSetOptionHLPeriod                 (NComRxC *Com, double      v) { Com->mOptionHLPeriod = v; Com->mIsOptionHLPeriodValid = 1; Com->mIsOptionHLPeriodConfig = 1; }$/;"	f	file:
NComSetOptionHLAngleStd	NComRxC.c	/^static void NComSetOptionHLAngleStd               (NComRxC *Com, double      v) { Com->mOptionHLAngleStd = v; Com->mIsOptionHLAngleStdValid = 1; Com->mIsOptionHLAngleStdConfig = 1; }$/;"	f	file:
NComSetOptionStatDelay	NComRxC.c	/^static void NComSetOptionStatDelay                (NComRxC *Com, double      v) { Com->mOptionStatDelay = v; Com->mIsOptionStatDelayValid = 1; Com->mIsOptionStatDelayConfig = 1; }$/;"	f	file:
NComSetOptionStatSpeed	NComRxC.c	/^static void NComSetOptionStatSpeed                (NComRxC *Com, double      v) { Com->mOptionStatSpeed = v; Com->mIsOptionStatSpeedValid = 1; Com->mIsOptionStatSpeedConfig = 1; }$/;"	f	file:
NComSetTimeMismatch	NComRxC.c	/^static void NComSetTimeMismatch                   (NComRxC *Com, int         v) { Com->mTimeMismatch = v; Com->mIsTimeMismatchValid = 1; }$/;"	f	file:
NComSetImuTimeDiff	NComRxC.c	/^static void NComSetImuTimeDiff                    (NComRxC *Com, int         v) { Com->mImuTimeDiff = v; Com->mIsImuTimeDiffValid = 1; }$/;"	f	file:
NComSetImuTimeMargin	NComRxC.c	/^static void NComSetImuTimeMargin                  (NComRxC *Com, int         v) { Com->mImuTimeMargin = v; Com->mIsImuTimeMarginValid = 1; }$/;"	f	file:
NComSetImuLoopTime	NComRxC.c	/^static void NComSetImuLoopTime                    (NComRxC *Com, int         v) { Com->mImuLoopTime = v; Com->mIsImuLoopTimeValid = 1; }$/;"	f	file:
NComSetOpLoopTime	NComRxC.c	/^static void NComSetOpLoopTime                     (NComRxC *Com, int         v) { Com->mOpLoopTime = v; Com->mIsOpLoopTimeValid = 1; }$/;"	f	file:
NComSetBnsLag	NComRxC.c	/^static void NComSetBnsLag                         (NComRxC *Com, int         v) { Com->mBnsLag = v; Com->mIsBnsLagValid = 1; }$/;"	f	file:
NComSetBnsLagFilt	NComRxC.c	/^static void NComSetBnsLagFilt                     (NComRxC *Com, double      v) { Com->mBnsLagFilt = v; Com->mIsBnsLagFiltValid = 1; }$/;"	f	file:
NComInvalidate	NComRxC.c	/^void NComInvalidate(NComRxC *Com)$/;"	f
NComReportFP	NComRxC.c	/^static void NComReportFP(const NComRxC *Com, FILE *fp, const char *pre)$/;"	f	file:
NComReport	NComRxC.c	/^void NComReport(const NComRxC *Com, const char *file_name, int append)$/;"	f
NComCreateNComRxC	NComRxC.c	/^NComRxC *NComCreateNComRxC()$/;"	f
NComDestroyNComRxC	NComRxC.c	/^void NComDestroyNComRxC(NComRxC *Com)$/;"	f
NComCopy	NComRxC.c	/^void NComCopy(NComRxC *ComDestination, const NComRxC *ComSource)$/;"	f
NComDecoderVersionString	NComRxC.c	/^const char *NComDecoderVersionString()$/;"	f
NComFileDefaultExt	NComRxC.c	/^const char *NComFileDefaultExt(const NComRxC *Com)$/;"	f
NComFileFilter	NComRxC.c	/^const char *NComFileFilter(const NComRxC *Com)$/;"	f
NComBaudRate	NComRxC.c	/^const int32_t NComBaudRate(const NComRxC *Com)$/;"	f
NComNewChar	NComRxC.c	/^ComResponse NComNewChar(NComRxC *Com, unsigned char c)$/;"	f
NComNewChars	NComRxC.c	/^ComResponse NComNewChars(NComRxC *Com, const unsigned char *data, int num)$/;"	f
NComNumChars	NComRxC.c	/^uint64_t NComNumChars(const NComRxC *Com)$/;"	f
NComSkippedChars	NComRxC.c	/^uint64_t NComSkippedChars(const NComRxC *Com)$/;"	f
NComNumPackets	NComRxC.c	/^uint64_t NComNumPackets(const NComRxC *Com)$/;"	f
NComUpdateInnAge	NComRxC.c	/^void NComUpdateInnAge(NComRxC *Com)$/;"	f
NComInterpolate	NComRxC.c	/^void NComInterpolate(NComRxC *Com, double a, const NComRxC *A, double b, const NComRxC *B)$/;"	f
PktStatus	NComRxC.c	/^static ParsedPacketType PktStatus(size_t Len, const unsigned char *p)$/;"	f	file:
RemoveFromBuffer	NComRxC.c	/^static void RemoveFromBuffer(NComRxCInternal *Com, int n)$/;"	f	file:
IsDevIDAfter	NComRxC.c	/^static char IsDevIDAfter(NComRxC *Com, char *datestr)$/;"	f	file:
UpdateNavInvalidate	NComRxC.c	/^static void UpdateNavInvalidate(NComRxC *Com)$/;"	f	file:
UpdateNav	NComRxC.c	/^static void UpdateNav(NComRxC *Com)$/;"	f	file:
FilteredOutputsInvalidate	NComRxC.c	/^static void FilteredOutputsInvalidate(NComRxC *Com)$/;"	f	file:
FilteredOutputsCompute	NComRxC.c	/^static void FilteredOutputsCompute(NComRxC *Com)$/;"	f	file:
RotateOutputsInvalidate	NComRxC.c	/^static void RotateOutputsInvalidate(NComRxC *Com)$/;"	f	file:
RotateOutputsCompute	NComRxC.c	/^static void RotateOutputsCompute(NComRxC *Com)$/;"	f	file:
SpeedSlipInvalidate	NComRxC.c	/^static void SpeedSlipInvalidate(NComRxC *Com)$/;"	f	file:
SpeedSlipCompute	NComRxC.c	/^static void SpeedSlipCompute(NComRxC *Com)$/;"	f	file:
DistanceInvalidate	NComRxC.c	/^static void DistanceInvalidate(NComRxC *Com)$/;"	f	file:
DistanceCompute	NComRxC.c	/^static void DistanceCompute(NComRxC *Com, char trig)$/;"	f	file:
NComSetLinAccFiltFreq	NComRxC.c	/^static void NComSetLinAccFiltFreq(NComRxC *Com, double freq)$/;"	f	file:
NComSetLinAccFiltZeta	NComRxC.c	/^static void NComSetLinAccFiltZeta(NComRxC *Com, double zeta)$/;"	f	file:
NComFixLinAccFilt	NComRxC.c	/^static void NComFixLinAccFilt(NComRxC *Com, double freq, double zeta)$/;"	f	file:
NComClearLinAccFilt	NComRxC.c	/^static void NComClearLinAccFilt(NComRxC *Com)$/;"	f	file:
NComSetAngAccFiltFreq	NComRxC.c	/^static void NComSetAngAccFiltFreq(NComRxC *Com, double freq)$/;"	f	file:
NComSetAngAccFiltZeta	NComRxC.c	/^static void NComSetAngAccFiltZeta(NComRxC *Com, double zeta)$/;"	f	file:
NComFixAngAccFilt	NComRxC.c	/^static void NComFixAngAccFilt(NComRxC *Com, double freq, double zeta)$/;"	f	file:
NComClearAngAccFilt	NComRxC.c	/^static void NComClearAngAccFilt(NComRxC *Com)$/;"	f	file:
SetRefFrame	NComRxC.c	/^static void SetRefFrame(NComRxC *Com, double lat, double lon, double alt, double heading)$/;"	f	file:
DecodeStatusMsg	NComRxC.c	/^static void DecodeStatusMsg(NComRxC *Com)$/;"	f	file:
DecodeExtra0	NComRxC.c	/^static void DecodeExtra0(NComRxC *Com)$/;"	f	file:
DecodeExtra1	NComRxC.c	/^static void DecodeExtra1(NComRxC *Com)$/;"	f	file:
DecodeExtra2	NComRxC.c	/^static void DecodeExtra2(NComRxC *Com)$/;"	f	file:
DecodeExtra3	NComRxC.c	/^static void DecodeExtra3(NComRxC *Com)$/;"	f	file:
DecodeExtra4	NComRxC.c	/^static void DecodeExtra4(NComRxC *Com)$/;"	f	file:
DecodeExtra5	NComRxC.c	/^static void DecodeExtra5(NComRxC *Com)$/;"	f	file:
DecodeExtra6	NComRxC.c	/^static void DecodeExtra6(NComRxC *Com)$/;"	f	file:
DecodeExtra7	NComRxC.c	/^static void DecodeExtra7(NComRxC *Com)$/;"	f	file:
DecodeExtra8	NComRxC.c	/^static void DecodeExtra8(NComRxC *Com)$/;"	f	file:
DecodeExtra9	NComRxC.c	/^static void DecodeExtra9(NComRxC *Com)$/;"	f	file:
DecodeExtra10	NComRxC.c	/^static void DecodeExtra10(NComRxC *Com)$/;"	f	file:
DecodeExtra11	NComRxC.c	/^static void DecodeExtra11(NComRxC *Com)$/;"	f	file:
DecodeExtra12	NComRxC.c	/^static void DecodeExtra12(NComRxC *Com)$/;"	f	file:
DecodeExtra13	NComRxC.c	/^static void DecodeExtra13(NComRxC *Com)$/;"	f	file:
DecodeExtra14	NComRxC.c	/^static void DecodeExtra14(NComRxC *Com)$/;"	f	file:
DecodeExtra15	NComRxC.c	/^static void DecodeExtra15(NComRxC *Com)$/;"	f	file:
DecodeExtra16	NComRxC.c	/^static void DecodeExtra16(NComRxC *Com)$/;"	f	file:
DecodeExtra17	NComRxC.c	/^static void DecodeExtra17(NComRxC *Com)$/;"	f	file:
DecodeExtra18	NComRxC.c	/^static void DecodeExtra18(NComRxC *Com)$/;"	f	file:
DecodeExtra19	NComRxC.c	/^static void DecodeExtra19(NComRxC *Com)$/;"	f	file:
DecodeExtra20	NComRxC.c	/^static void DecodeExtra20(NComRxC *Com)$/;"	f	file:
DecodeExtra21	NComRxC.c	/^static void DecodeExtra21(NComRxC *Com)$/;"	f	file:
DecodeExtra22	NComRxC.c	/^static void DecodeExtra22(NComRxC *Com)$/;"	f	file:
DecodeExtra23	NComRxC.c	/^static void DecodeExtra23(NComRxC *Com)$/;"	f	file:
DecodeExtra24	NComRxC.c	/^static void DecodeExtra24(NComRxC *Com)$/;"	f	file:
DecodeExtra25	NComRxC.c	/^static void DecodeExtra25(NComRxC *Com)$/;"	f	file:
DecodeExtra26	NComRxC.c	/^static void DecodeExtra26(NComRxC *Com)$/;"	f	file:
DecodeExtra27	NComRxC.c	/^static void DecodeExtra27(NComRxC *Com)$/;"	f	file:
DecodeExtra28	NComRxC.c	/^static void DecodeExtra28(NComRxC *Com)$/;"	f	file:
DecodeExtra29	NComRxC.c	/^static void DecodeExtra29(NComRxC *Com)$/;"	f	file:
DecodeExtra30	NComRxC.c	/^static void DecodeExtra30(NComRxC *Com)$/;"	f	file:
DecodeExtra31	NComRxC.c	/^static void DecodeExtra31(NComRxC *Com)$/;"	f	file:
DecodeExtra32	NComRxC.c	/^static void DecodeExtra32(NComRxC *Com)$/;"	f	file:
DecodeExtra33	NComRxC.c	/^static void DecodeExtra33(NComRxC *Com)$/;"	f	file:
DecodeExtra34	NComRxC.c	/^static void DecodeExtra34(NComRxC *Com)$/;"	f	file:
DecodeExtra35	NComRxC.c	/^static void DecodeExtra35(NComRxC *Com)$/;"	f	file:
DecodeExtra36	NComRxC.c	/^static void DecodeExtra36(NComRxC *Com)$/;"	f	file:
DecodeExtra37	NComRxC.c	/^static void DecodeExtra37(NComRxC *Com)$/;"	f	file:
DecodeExtra38	NComRxC.c	/^static void DecodeExtra38(NComRxC *Com)$/;"	f	file:
DecodeExtra39	NComRxC.c	/^static void DecodeExtra39(NComRxC *Com)$/;"	f	file:
DecodeExtra41	NComRxC.c	/^static void DecodeExtra41(NComRxC *Com)$/;"	f	file:
DecodeExtra42	NComRxC.c	/^static void DecodeExtra42(NComRxC *Com)$/;"	f	file:
DecodeExtra43	NComRxC.c	/^static void DecodeExtra43(NComRxC *Com)$/;"	f	file:
DecodeExtra44	NComRxC.c	/^static void DecodeExtra44(NComRxC *Com)$/;"	f	file:
DecodeExtra45	NComRxC.c	/^static void DecodeExtra45(NComRxC *Com)$/;"	f	file:
DecodeExtra46	NComRxC.c	/^static void DecodeExtra46(NComRxC *Com)$/;"	f	file:
DecodeExtra47	NComRxC.c	/^static void DecodeExtra47(NComRxC *Com)$/;"	f	file:
DecodeExtra48	NComRxC.c	/^static void DecodeExtra48(NComRxC *Com)$/;"	f	file:
DecodeExtra49	NComRxC.c	/^static void DecodeExtra49(NComRxC *Com)$/;"	f	file:
DecodeExtra50	NComRxC.c	/^static void DecodeExtra50(NComRxC *Com)$/;"	f	file:
DecodeExtra55	NComRxC.c	/^static void DecodeExtra55(NComRxC *Com)$/;"	f	file:
DecodeExtra56	NComRxC.c	/^static void DecodeExtra56(NComRxC *Com)$/;"	f	file:
DecodeExtra57	NComRxC.c	/^static void DecodeExtra57(NComRxC *Com)$/;"	f	file:
DecodeExtra59	NComRxC.c	/^static void DecodeExtra59(NComRxC *Com)$/;"	f	file:
DecodeExtra61	NComRxC.c	/^static void DecodeExtra61(NComRxC *Com)$/;"	f	file:
DecodeExtra62	NComRxC.c	/^static void DecodeExtra62(NComRxC *Com)$/;"	f	file:
DecodeExtra63	NComRxC.c	/^static void DecodeExtra63(NComRxC *Com)$/;"	f	file:
DecodeExtra64	NComRxC.c	/^static void DecodeExtra64(NComRxC *Com)$/;"	f	file:
DecodeExtra65	NComRxC.c	/^static void DecodeExtra65(NComRxC *Com)$/;"	f	file:
DecodeExtra66	NComRxC.c	/^static void DecodeExtra66(NComRxC *Com)$/;"	f	file:
DecodeExtra67	NComRxC.c	/^static void DecodeExtra67(NComRxC *Com)$/;"	f	file:
DecodeExtra72	NComRxC.c	/^static void DecodeExtra72(NComRxC *Com)$/;"	f	file:
DecodeExtra73	NComRxC.c	/^static void DecodeExtra73(NComRxC *Com)$/;"	f	file:
DecodeExtra74	NComRxC.c	/^static void DecodeExtra74(NComRxC *Com)$/;"	f	file:
DecodeExtraGpsReceived	NComRxC.c	/^static void DecodeExtraGpsReceived(const unsigned char *mCurStatus, NComRxCGps *Com)$/;"	f	file:
DecodeExtraGpsStatus	NComRxC.c	/^static void DecodeExtraGpsStatus(const unsigned char *mCurStatus, NComRxCGps *Com)$/;"	f	file:
cast_8_byte_to_double	NComRxC.c	/^static double cast_8_byte_to_double(const uint8_t *b)$/;"	f	file:
cast_4_byte_to_float	NComRxC.c	/^static float cast_4_byte_to_float(const uint8_t *b)$/;"	f	file:
cast_4_byte_to_int32	NComRxC.c	/^static int32_t cast_4_byte_to_int32(const uint8_t *b)$/;"	f	file:
cast_4_byte_to_uint32	NComRxC.c	/^static uint32_t cast_4_byte_to_uint32(const uint8_t *b)$/;"	f	file:
cast_3_byte_to_int32	NComRxC.c	/^static int32_t cast_3_byte_to_int32(const uint8_t *b)$/;"	f	file:
cast_3_byte_to_uint32	NComRxC.c	/^static uint32_t cast_3_byte_to_uint32(const uint8_t *b)$/;"	f	file:
cast_2_byte_to_int16	NComRxC.c	/^static int16_t cast_2_byte_to_int16(const uint8_t *b)$/;"	f	file:
cast_2_byte_to_uint16	NComRxC.c	/^static uint16_t cast_2_byte_to_uint16(const uint8_t *b)$/;"	f	file:
incr_2_byte_to_uint32	NComRxC.c	/^static uint32_t incr_2_byte_to_uint32(const uint8_t *b, uint32_t z)$/;"	f	file:
incr_1_byte_to_uint32	NComRxC.c	/^static uint32_t incr_1_byte_to_uint32(const uint8_t *b, uint32_t z)$/;"	f	file:
strgrab	NComRxC.c	/^static void strgrab(char *destination, int destination_length, const char *source, int source_length)$/;"	f	file:
Filt2ndOrderCreate	NComRxC.c	/^static Filt2ndOrder *Filt2ndOrderCreate()$/;"	f	file:
Filt2ndOrderDestroy	NComRxC.c	/^static void Filt2ndOrderDestroy(Filt2ndOrder *Filt)$/;"	f	file:
Filt2ndOrderReset	NComRxC.c	/^static void Filt2ndOrderReset(Filt2ndOrder *Filt)$/;"	f	file:
Filt2ndOrderSetCharacteristics	NComRxC.c	/^static void Filt2ndOrderSetCharacteristics(Filt2ndOrder *Filt, double freq, double zeta)$/;"	f	file:
Filt2ndOrderNewInput	NComRxC.c	/^static void Filt2ndOrderNewInput(Filt2ndOrder *Filt, double t, double x)$/;"	f	file:
Filt2ndOrderInitialise	NComRxC.c	/^static void Filt2ndOrderInitialise(Filt2ndOrder *Filt)$/;"	f	file:
MatAllocR	NComRxC.c	/^static int MatAllocR( Mat *R, long r, long c )$/;"	f	file:
MatFillR	NComRxC.c	/^static int MatFillR( Mat *R, long r, long c, ... )$/;"	f	file:
MatFree	NComRxC.c	/^static int MatFree( Mat *A )$/;"	f	file:
MatMultRAB	NComRxC.c	/^static int MatMultRAB( Mat *R, Mat *A, Mat *B )$/;"	f	file:
MatMultRAtB	NComRxC.c	/^static int MatMultRAtB( Mat *R, Mat *A, Mat *B )$/;"	f	file:
Euler2DirCos2	NComRxC.c	/^static int Euler2DirCos2( Mat *C, Mat *E )$/;"	f	file:
Euler2DirCosH	NComRxC.c	/^static int Euler2DirCosH( Mat *C, Mat *E )$/;"	f	file:
EARTH_EQUAT_RADIUS	NComRxC.c	/^#define EARTH_EQUAT_RADIUS /;"	d	file:
EARTH_ECCENTRICITY	NComRxC.c	/^#define EARTH_ECCENTRICITY /;"	d	file:
compute_earth_curvature	NComRxC.c	/^static int compute_earth_curvature(double *rho_e, double *rho_n, double lat)$/;"	f	file:
NCOMRXC_H	NComRxC.h	/^#define NCOMRXC_H$/;"	d
NCOMRXC_DEV_ID	NComRxC.h	/^#define NCOMRXC_DEV_ID /;"	d
__STDC_LIMIT_MACROS	NComRxC.h	/^#define __STDC_LIMIT_MACROS$/;"	d
__STDC_FORMAT_MACROS	NComRxC.h	/^#define	__STDC_FORMAT_MACROS$/;"	d
__STDC_CONSTANT_MACROS	NComRxC.h	/^#define __STDC_CONSTANT_MACROS$/;"	d
int8_t	NComRxC.h	/^	typedef signed   char     int8_t;$/;"	t
int16_t	NComRxC.h	/^	typedef signed   short    int16_t;$/;"	t
int32_t	NComRxC.h	/^	typedef signed   int      int32_t;$/;"	t
int64_t	NComRxC.h	/^	typedef signed   __int64  int64_t;$/;"	t
uint8_t	NComRxC.h	/^	typedef unsigned char     uint8_t;$/;"	t
uint16_t	NComRxC.h	/^	typedef unsigned short    uint16_t;$/;"	t
uint32_t	NComRxC.h	/^	typedef unsigned int      uint32_t;$/;"	t
uint64_t	NComRxC.h	/^	typedef unsigned __int64  uint64_t;$/;"	t
int8_t	NComRxC.h	/^	typedef signed   __int8   int8_t;          \/\/!< Standard signed integer basic type of 8 bits.$/;"	t
int16_t	NComRxC.h	/^	typedef signed   __int16  int16_t;         \/\/!< Standard signed integer basic type of 16 bits.$/;"	t
int32_t	NComRxC.h	/^	typedef signed   __int32  int32_t;         \/\/!< Standard signed integer basic type of 32 bits.$/;"	t
int64_t	NComRxC.h	/^	typedef signed   __int64  int64_t;         \/\/!< Standard signed integer basic type of 64 bits.$/;"	t
uint8_t	NComRxC.h	/^	typedef unsigned __int8   uint8_t;         \/\/!< Standard unsigned integer basic type of 8 bits.$/;"	t
uint16_t	NComRxC.h	/^	typedef unsigned __int16  uint16_t;        \/\/!< Standard unsigned integer basic type of 16 bits.$/;"	t
uint32_t	NComRxC.h	/^	typedef unsigned __int32  uint32_t;        \/\/!< Standard unsigned integer basic type of 32 bits.$/;"	t
uint64_t	NComRxC.h	/^	typedef unsigned __int64  uint64_t;        \/\/!< Standard unsigned integer basic type of 64 bits.$/;"	t
INT8_MIN	NComRxC.h	/^	#define INT8_MIN /;"	d
INT16_MIN	NComRxC.h	/^	#define INT16_MIN /;"	d
INT32_MIN	NComRxC.h	/^	#define INT32_MIN /;"	d
INT64_MIN	NComRxC.h	/^	#define INT64_MIN /;"	d
INT8_MAX	NComRxC.h	/^	#define INT8_MAX /;"	d
INT16_MAX	NComRxC.h	/^	#define INT16_MAX /;"	d
INT32_MAX	NComRxC.h	/^	#define INT32_MAX /;"	d
INT64_MAX	NComRxC.h	/^	#define INT64_MAX /;"	d
UINT8_MAX	NComRxC.h	/^	#define UINT8_MAX /;"	d
UINT16_MAX	NComRxC.h	/^	#define UINT16_MAX /;"	d
UINT32_MAX	NComRxC.h	/^	#define UINT32_MAX /;"	d
UINT64_MAX	NComRxC.h	/^	#define UINT64_MAX /;"	d
PRId8	NComRxC.h	/^	#define PRId8 /;"	d
PRId16	NComRxC.h	/^	#define PRId16 /;"	d
PRId32	NComRxC.h	/^	#define PRId32 /;"	d
PRId64	NComRxC.h	/^	#define PRId64 /;"	d
PRIu8	NComRxC.h	/^	#define PRIu8 /;"	d
PRIu16	NComRxC.h	/^	#define PRIu16 /;"	d
PRIu32	NComRxC.h	/^	#define PRIu32 /;"	d
PRIu64	NComRxC.h	/^	#define PRIu64 /;"	d
INT8_C	NComRxC.h	/^	#define INT8_C(/;"	d
INT16_C	NComRxC.h	/^	#define INT16_C(/;"	d
INT32_C	NComRxC.h	/^	#define INT32_C(/;"	d
INT64_C	NComRxC.h	/^	#define INT64_C(/;"	d
UINT8_C	NComRxC.h	/^	#define UINT8_C(/;"	d
UINT16_C	NComRxC.h	/^	#define UINT16_C(/;"	d
UINT32_C	NComRxC.h	/^	#define UINT32_C(/;"	d
UINT64_C	NComRxC.h	/^	#define UINT64_C(/;"	d
MatElement	NComRxC.h	/^typedef double MatElement;  \/\/ Use double numbers for the matrix type.$/;"	t
m	NComRxC.h	/^    MatElement *m; \/\/!< Pointer to the matrix data.$/;"	m	struct:__anon2
r	NComRxC.h	/^    long r;        \/\/!< Rows of the matrix.$/;"	m	struct:__anon2
c	NComRxC.h	/^    long c;        \/\/!< Columns of the matrix.$/;"	m	struct:__anon2
tr	NComRxC.h	/^    long tr;       \/\/!< Number of allocated rows.$/;"	m	struct:__anon2
tc	NComRxC.h	/^    long tc;       \/\/!< Number of allocated columns.$/;"	m	struct:__anon2
Mat	NComRxC.h	/^} Mat;$/;"	t	typeref:struct:__anon2
e	NComRxC.h	/^#def/;"	d
EMPTY_MAT	NComRxC.h	/^#define EMPTY_MAT /;"	d
MAX_INN_AGE	NComRxC.h	/^#define MAX_INN_AGE /;"	d
DEV_ID_STRLEN	NComRxC.h	/^#define DEV_ID_STRLEN /;"	d
OS_SCRIPT_ID_STRLEN	NComRxC.h	/^#define OS_SCRIPT_ID_STRLEN /;"	d
BASE_STATION_ID_STRLEN	NComRxC.h	/^#define BASE_STATION_ID_STRLEN /;"	d
OMNISTAR_SERIAL_STRLEN	NComRxC.h	/^#define OMNISTAR_SERIAL_STRLEN /;"	d
NCOMRX_BUFFER_SIZE	NComRxC.h	/^#define NCOMRX_BUFFER_SIZE /;"	d
COM_NO_UPDATE	NComRxC.h	/^	COM_NO_UPDATE,       \/\/!< No update (invalid or incomplete data).$/;"	e	enum:__anon3
COM_NEW_UPDATE	NComRxC.h	/^	COM_NEW_UPDATE,      \/\/!< Successful update.$/;"	e	enum:__anon3
ComResponse	NComRxC.h	/^} ComResponse;$/;"	t	typeref:enum:__anon3
OUTPUT_PACKET_INVALID	NComRxC.h	/^	OUTPUT_PACKET_INVALID,     \/\/!< An invalid output packet (only on invalidation).$/;"	e	enum:__anon4
OUTPUT_PACKET_EMPTY	NComRxC.h	/^	OUTPUT_PACKET_EMPTY,       \/\/!< An empty output packet.$/;"	e	enum:__anon4
OUTPUT_PACKET_REGULAR	NComRxC.h	/^	OUTPUT_PACKET_REGULAR,     \/\/!< A regular output packet.$/;"	e	enum:__anon4
OUTPUT_PACKET_STATUS	NComRxC.h	/^	OUTPUT_PACKET_STATUS,      \/\/!< Status only output packet.$/;"	e	enum:__anon4
OUTPUT_PACKET_IN1DOWN	NComRxC.h	/^	OUTPUT_PACKET_IN1DOWN,     \/\/!< Trigger output packet (falling edge of input).$/;"	e	enum:__anon4
OUTPUT_PACKET_IN1UP	NComRxC.h	/^	OUTPUT_PACKET_IN1UP,       \/\/!< Trigger2 output packet (rising edge of input).$/;"	e	enum:__anon4
OUTPUT_PACKET_OUT1	NComRxC.h	/^	OUTPUT_PACKET_OUT1,        \/\/!< Digital output packet.$/;"	e	enum:__anon4
OUTPUT_PACKET_INTERPOLATED	NComRxC.h	/^	OUTPUT_PACKET_INTERPOLATED \/\/!< Interpolated output packet.$/;"	e	enum:__anon4
OutputPacketType	NComRxC.h	/^} OutputPacketType;$/;"	t	typeref:enum:__anon4
NAVIGATION_STATUS_NOTHING	NComRxC.h	/^	NAVIGATION_STATUS_NOTHING,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RAWIMU	NComRxC.h	/^	NAVIGATION_STATUS_RAWIMU,$/;"	e	enum:__anon5
NAVIGATION_STATUS_INIT	NComRxC.h	/^	NAVIGATION_STATUS_INIT,$/;"	e	enum:__anon5
NAVIGATION_STATUS_LOCKING	NComRxC.h	/^	NAVIGATION_STATUS_LOCKING,$/;"	e	enum:__anon5
NAVIGATION_STATUS_LOCKED	NComRxC.h	/^	NAVIGATION_STATUS_LOCKED,$/;"	e	enum:__anon5
NAVIGATION_STATUS_UNLOCKED	NComRxC.h	/^	NAVIGATION_STATUS_UNLOCKED,$/;"	e	enum:__anon5
NAVIGATION_STATUS_EXPIRED	NComRxC.h	/^	NAVIGATION_STATUS_EXPIRED,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_07	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_07,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_08	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_08,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_09	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_09,$/;"	e	enum:__anon5
NAVIGATION_STATUS_STATUSONLY	NComRxC.h	/^	NAVIGATION_STATUS_STATUSONLY,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_11	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_11,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_12	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_12,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_13	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_13,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_14	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_14,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_15	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_15,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_16	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_16,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_17	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_17,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_18	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_18,$/;"	e	enum:__anon5
NAVIGATION_STATUS_RESERVED_19	NComRxC.h	/^	NAVIGATION_STATUS_RESERVED_19,$/;"	e	enum:__anon5
NAVIGATION_STATUS_TRIGINIT	NComRxC.h	/^	NAVIGATION_STATUS_TRIGINIT,$/;"	e	enum:__anon5
NAVIGATION_STATUS_TRIGLOCKING	NComRxC.h	/^	NAVIGATION_STATUS_TRIGLOCKING,$/;"	e	enum:__anon5
NAVIGATION_STATUS_TRIGLOCKED	NComRxC.h	/^	NAVIGATION_STATUS_TRIGLOCKED,$/;"	e	enum:__anon5
NAVIGATION_STATUS_UNKNOWN	NComRxC.h	/^	NAVIGATION_STATUS_UNKNOWN$/;"	e	enum:__anon5
NavigationStatus	NComRxC.h	/^} NavigationStatus;$/;"	t	typeref:enum:__anon5
IMU_TYPE_SIIMUA	NComRxC.h	/^	IMU_TYPE_SIIMUA      = 0,$/;"	e	enum:__anon6
IMU_TYPE_IMU200	NComRxC.h	/^	IMU_TYPE_IMU200      = 1,$/;"	e	enum:__anon6
IMU_TYPE_IMU2	NComRxC.h	/^	IMU_TYPE_IMU2        = 2,$/;"	e	enum:__anon6
IMU_TYPE_IMU2X	NComRxC.h	/^	IMU_TYPE_IMU2X       = 3,$/;"	e	enum:__anon6
IMU_TYPE_IMU3	NComRxC.h	/^	IMU_TYPE_IMU3        = 4,$/;"	e	enum:__anon6
IMU_TYPE_IMU3X	NComRxC.h	/^	IMU_TYPE_IMU3X       = 5$/;"	e	enum:__anon6
IMUType	NComRxC.h	/^} IMUType;$/;"	t	typeref:enum:__anon6
GPS_TYPE_BEELINE	NComRxC.h	/^	GPS_TYPE_BEELINE     = 0,$/;"	e	enum:__anon7
GPS_TYPE_OEM4	NComRxC.h	/^	GPS_TYPE_OEM4        = 1,$/;"	e	enum:__anon7
GPS_TYPE_NONE	NComRxC.h	/^	GPS_TYPE_NONE        = 2,$/;"	e	enum:__anon7
GPS_TYPE_OEMV	NComRxC.h	/^	GPS_TYPE_OEMV        = 3,$/;"	e	enum:__anon7
GPS_TYPE_LEA4	NComRxC.h	/^	GPS_TYPE_LEA4        = 4,$/;"	e	enum:__anon7
GPS_TYPE_GENERIC	NComRxC.h	/^	GPS_TYPE_GENERIC     = 5,$/;"	e	enum:__anon7
GPS_TYPE_TRIMBLE5700	NComRxC.h	/^	GPS_TYPE_TRIMBLE5700 = 6,$/;"	e	enum:__anon7
GPS_TYPE_AGGPS132	NComRxC.h	/^	GPS_TYPE_AGGPS132    = 7$/;"	e	enum:__anon7
GPSType	NComRxC.h	/^} GPSType;$/;"	t	typeref:enum:__anon7
PI_SYNC	NComRxC.h	/^	PI_SYNC           =  0,$/;"	e	enum:__anon8
PI_TIME	NComRxC.h	/^	PI_TIME           =  1,$/;"	e	enum:__anon8
PI_ACCEL_X	NComRxC.h	/^	PI_ACCEL_X        =  3,$/;"	e	enum:__anon8
PI_ACCEL_Y	NComRxC.h	/^	PI_ACCEL_Y        =  6,$/;"	e	enum:__anon8
PI_ACCEL_Z	NComRxC.h	/^	PI_ACCEL_Z        =  9,$/;"	e	enum:__anon8
PI_ANG_RATE_X	NComRxC.h	/^	PI_ANG_RATE_X     = 12,$/;"	e	enum:__anon8
PI_ANG_RATE_Y	NComRxC.h	/^	PI_ANG_RATE_Y     = 15,$/;"	e	enum:__anon8
PI_ANG_RATE_Z	NComRxC.h	/^	PI_ANG_RATE_Z     = 18,$/;"	e	enum:__anon8
PI_INS_NAV_MODE	NComRxC.h	/^	PI_INS_NAV_MODE   = 21,$/;"	e	enum:__anon8
PI_CHECKSUM_1	NComRxC.h	/^	PI_CHECKSUM_1     = 22,$/;"	e	enum:__anon8
PI_POS_LAT	NComRxC.h	/^	PI_POS_LAT        = 23,$/;"	e	enum:__anon8
PI_POS_LON	NComRxC.h	/^	PI_POS_LON        = 31,$/;"	e	enum:__anon8
PI_POS_ALT	NComRxC.h	/^	PI_POS_ALT        = 39,$/;"	e	enum:__anon8
PI_VEL_N	NComRxC.h	/^	PI_VEL_N          = 43,$/;"	e	enum:__anon8
PI_VEL_E	NComRxC.h	/^	PI_VEL_E          = 46,$/;"	e	enum:__anon8
PI_VEL_D	NComRxC.h	/^	PI_VEL_D          = 49,$/;"	e	enum:__anon8
PI_ORIEN_H	NComRxC.h	/^	PI_ORIEN_H        = 52,$/;"	e	enum:__anon8
PI_ORIEN_P	NComRxC.h	/^	PI_ORIEN_P        = 55,$/;"	e	enum:__anon8
PI_ORIEN_R	NComRxC.h	/^	PI_ORIEN_R        = 58,$/;"	e	enum:__anon8
PI_CHECKSUM_2	NComRxC.h	/^	PI_CHECKSUM_2     = 61,$/;"	e	enum:__anon8
PI_CHANNEL_INDEX	NComRxC.h	/^	PI_CHANNEL_INDEX  = 62,$/;"	e	enum:__anon8
PI_CHANNEL_STATUS	NComRxC.h	/^	PI_CHANNEL_STATUS = 63,$/;"	e	enum:__anon8
PI_CHECKSUM_3	NComRxC.h	/^	PI_CHECKSUM_3     = 71$/;"	e	enum:__anon8
PacketIndexes	NComRxC.h	/^} PacketIndexes;$/;"	t	typeref:enum:__anon8
PCSR_CHECKSUM_1_START	NComRxC.h	/^	PCSR_CHECKSUM_1_START =  1,$/;"	e	enum:__anon9
PCSR_CHECKSUM_1_STOP	NComRxC.h	/^	PCSR_CHECKSUM_1_STOP  = 22,$/;"	e	enum:__anon9
PCSR_CHECKSUM_2_START	NComRxC.h	/^	PCSR_CHECKSUM_2_START = 22,$/;"	e	enum:__anon9
PCSR_CHECKSUM_2_STOP	NComRxC.h	/^	PCSR_CHECKSUM_2_STOP  = 61,$/;"	e	enum:__anon9
PCSR_CHECKSUM_3_START	NComRxC.h	/^	PCSR_CHECKSUM_3_START = 61,$/;"	e	enum:__anon9
PCSR_CHECKSUM_3_STOP	NComRxC.h	/^	PCSR_CHECKSUM_3_STOP  = 71$/;"	e	enum:__anon9
PacketChecksumRanges	NComRxC.h	/^} PacketChecksumRanges;$/;"	t	typeref:enum:__anon9
mFreqSample	NComRxC.h	/^	double mFreqSample;        \/\/!< Input sampling frequency. [Hz]$/;"	m	struct:__anon10
mFreqCutoff	NComRxC.h	/^	double mFreqCutoff;        \/\/!< Filter cut-off frequency. [Hz]$/;"	m	struct:__anon10
mZeta	NComRxC.h	/^	double mZeta;              \/\/!< Filter damping ratio. [-]$/;"	m	struct:__anon10
mA0	NComRxC.h	/^	double mA0, mA1, mA2;      \/\/!< Transfer function numerator coefficients.$/;"	m	struct:__anon10
mA1	NComRxC.h	/^	double mA0, mA1, mA2;      \/\/!< Transfer function numerator coefficients.$/;"	m	struct:__anon10
mA2	NComRxC.h	/^	double mA0, mA1, mA2;      \/\/!< Transfer function numerator coefficients.$/;"	m	struct:__anon10
mB0	NComRxC.h	/^	double mB0, mB1, mB2;      \/\/!< Transfer function denominator coefficients.$/;"	m	struct:__anon10
mB1	NComRxC.h	/^	double mB0, mB1, mB2;      \/\/!< Transfer function denominator coefficients.$/;"	m	struct:__anon10
mB2	NComRxC.h	/^	double mB0, mB1, mB2;      \/\/!< Transfer function denominator coefficients.$/;"	m	struct:__anon10
mT0	NComRxC.h	/^	double mT0, mT1, mT2;      \/\/!< Time stamps of past inputs.$/;"	m	struct:__anon10
mT1	NComRxC.h	/^	double mT0, mT1, mT2;      \/\/!< Time stamps of past inputs.$/;"	m	struct:__anon10
mT2	NComRxC.h	/^	double mT0, mT1, mT2;      \/\/!< Time stamps of past inputs.$/;"	m	struct:__anon10
mX0	NComRxC.h	/^	double mX0, mX1, mX2;      \/\/!< Past inputs.$/;"	m	struct:__anon10
mX1	NComRxC.h	/^	double mX0, mX1, mX2;      \/\/!< Past inputs.$/;"	m	struct:__anon10
mX2	NComRxC.h	/^	double mX0, mX1, mX2;      \/\/!< Past inputs.$/;"	m	struct:__anon10
mU0	NComRxC.h	/^	double mU0, mU1, mU2;      \/\/!< Past outputs.$/;"	m	struct:__anon10
mU1	NComRxC.h	/^	double mU0, mU1, mU2;      \/\/!< Past outputs.$/;"	m	struct:__anon10
mU2	NComRxC.h	/^	double mU0, mU1, mU2;      \/\/!< Past outputs.$/;"	m	struct:__anon10
mOutputValid	NComRxC.h	/^	int    mOutputValid;       \/\/!< Is current output valid?$/;"	m	struct:__anon10
Filt2ndOrder	NComRxC.h	/^} Filt2ndOrder;$/;"	t	typeref:struct:__anon10
mHoldDistWhenSlow	NComRxC.h	/^	int mHoldDistWhenSlow;  \/\/!< Distance hold when Slow.$/;"	m	struct:__anon11
mCurPkt	NComRxC.h	/^	unsigned char  mCurPkt[NCOMRX_BUFFER_SIZE]; \/\/!< Holds the incoming data.$/;"	m	struct:__anon11
mCurStatus	NComRxC.h	/^	unsigned char *mCurStatus;                  \/\/!< A pointer to mCurPkt+CHANNEL_STATUS$/;"	m	struct:__anon11
mCurLen	NComRxC.h	/^	int mCurLen;                                \/\/!< Length of data in buffer.$/;"	m	struct:__anon11
mPktProcessed	NComRxC.h	/^	int mPktProcessed;                          \/\/!< Flag indicates processed packet.$/;"	m	struct:__anon11
mNumChars	NComRxC.h	/^	uint64_t mNumChars;     \/\/!< Number of bytes.$/;"	m	struct:__anon11
mSkippedChars	NComRxC.h	/^	uint64_t mSkippedChars; \/\/!< Number of skipped bytes.$/;"	m	struct:__anon11
mNumPackets	NComRxC.h	/^	uint64_t mNumPackets;   \/\/!< Number of packets.$/;"	m	struct:__anon11
mMilliSecs	NComRxC.h	/^	int32_t mMilliSecs;$/;"	m	struct:__anon11
mMinutes	NComRxC.h	/^	int32_t mMinutes;$/;"	m	struct:__anon11
mTrigCount	NComRxC.h	/^	unsigned char mTrigCount;$/;"	m	struct:__anon11
mTrig2Count	NComRxC.h	/^	unsigned char mTrig2Count;$/;"	m	struct:__anon11
mDigitalOutCount	NComRxC.h	/^	unsigned char mDigitalOutCount;$/;"	m	struct:__anon11
mPrevDist2dValid	NComRxC.h	/^	int    mPrevDist2dValid;$/;"	m	struct:__anon11
mPrevDist2dTime	NComRxC.h	/^	double mPrevDist2dTime;$/;"	m	struct:__anon11
mPrevDist2dSpeed	NComRxC.h	/^	double mPrevDist2dSpeed;$/;"	m	struct:__anon11
mPrevDist2d	NComRxC.h	/^	double mPrevDist2d;$/;"	m	struct:__anon11
mPrevDist3dValid	NComRxC.h	/^	int    mPrevDist3dValid;$/;"	m	struct:__anon11
mPrevDist3dTime	NComRxC.h	/^	double mPrevDist3dTime;$/;"	m	struct:__anon11
mPrevDist3dSpeed	NComRxC.h	/^	double mPrevDist3dSpeed;$/;"	m	struct:__anon11
mPrevDist3d	NComRxC.h	/^	double mPrevDist3d;$/;"	m	struct:__anon11
mIsOldWSpeedTimeValid	NComRxC.h	/^	int mIsOldWSpeedTimeValid;       double mOldWSpeedTime;$/;"	m	struct:__anon11
mOldWSpeedTime	NComRxC.h	/^	int mIsOldWSpeedTimeValid;       double mOldWSpeedTime;$/;"	m	struct:__anon11
mIsOldWSpeedCountValid	NComRxC.h	/^	int mIsOldWSpeedCountValid;      double mOldWSpeedCount;$/;"	m	struct:__anon11
mOldWSpeedCount	NComRxC.h	/^	int mIsOldWSpeedCountValid;      double mOldWSpeedCount;$/;"	m	struct:__anon11
mIsAccurateRefLatValid	NComRxC.h	/^	int mIsAccurateRefLatValid;      double mAccurateRefLat;$/;"	m	struct:__anon11
mAccurateRefLat	NComRxC.h	/^	int mIsAccurateRefLatValid;      double mAccurateRefLat;$/;"	m	struct:__anon11
mIsAccurateRefLonValid	NComRxC.h	/^	int mIsAccurateRefLonValid;      double mAccurateRefLon;$/;"	m	struct:__anon11
mAccurateRefLon	NComRxC.h	/^	int mIsAccurateRefLonValid;      double mAccurateRefLon;$/;"	m	struct:__anon11
mIsAccurateRefAltValid	NComRxC.h	/^	int mIsAccurateRefAltValid;      double mAccurateRefAlt;$/;"	m	struct:__anon11
mAccurateRefAlt	NComRxC.h	/^	int mIsAccurateRefAltValid;      double mAccurateRefAlt;$/;"	m	struct:__anon11
mIsAccurateRefHeadingValid	NComRxC.h	/^	int mIsAccurateRefHeadingValid;  double mAccurateRefHeading;$/;"	m	struct:__anon11
mAccurateRefHeading	NComRxC.h	/^	int mIsAccurateRefHeadingValid;  double mAccurateRefHeading;$/;"	m	struct:__anon11
E	NComRxC.h	/^	Mat E;           \/\/!< Euler angles.$/;"	m	struct:__anon11
Ch	NComRxC.h	/^	Mat Ch;          \/\/!< DirCos for World to Level (Heading).$/;"	m	struct:__anon11
Cb	NComRxC.h	/^	Mat Cb;          \/\/!< DirCos for Body to Level  (Roll\/Pitch).$/;"	m	struct:__anon11
Ab	NComRxC.h	/^	Mat Ab;          \/\/!< Accels Body.$/;"	m	struct:__anon11
Al	NComRxC.h	/^	Mat Al;          \/\/!< Accels level.$/;"	m	struct:__anon11
Wb	NComRxC.h	/^	Mat Wb;          \/\/!< Ang Rate Body.$/;"	m	struct:__anon11
Wl	NComRxC.h	/^	Mat Wl;          \/\/!< Ang Rate level.$/;"	m	struct:__anon11
Vn	NComRxC.h	/^	Mat Vn;          \/\/!< Velocities NED.$/;"	m	struct:__anon11
Vl	NComRxC.h	/^	Mat Vl;          \/\/!< Velocities level.$/;"	m	struct:__anon11
Yb	NComRxC.h	/^	Mat Yb;          \/\/!< Ang Accel Body.$/;"	m	struct:__anon11
Yl	NComRxC.h	/^	Mat Yl;          \/\/!< Ang Accel level.$/;"	m	struct:__anon11
mMatrixHold	NComRxC.h	/^	int mMatrixHold; \/\/!< Prevents matrix calculations when 1 (say for slow computers), normally 0.$/;"	m	struct:__anon11
FiltForAx	NComRxC.h	/^	Filt2ndOrder FiltForAx;      \/\/!< Filter for X-axis linear acceleration.$/;"	m	struct:__anon11
FiltForAy	NComRxC.h	/^	Filt2ndOrder FiltForAy;      \/\/!< Filter for Y-axis linear acceleration.$/;"	m	struct:__anon11
FiltForAz	NComRxC.h	/^	Filt2ndOrder FiltForAz;      \/\/!< Filter for Z-axis linear acceleration.$/;"	m	struct:__anon11
mPrevWx	NComRxC.h	/^	double mPrevWx;      \/\/!< Previous value of Wx. [deg\/s]$/;"	m	struct:__anon11
mPrevWy	NComRxC.h	/^	double mPrevWy;      \/\/!< Previous value of Wy. [deg\/s]$/;"	m	struct:__anon11
mPrevWz	NComRxC.h	/^	double mPrevWz;      \/\/!< Previous value of Wz. [deg\/s]$/;"	m	struct:__anon11
mPrevWbTime	NComRxC.h	/^	double mPrevWbTime;  \/\/!< Time corresponding to previous values of Wx, Wy and Wz. [s]$/;"	m	struct:__anon11
FiltForYx	NComRxC.h	/^	Filt2ndOrder FiltForYx;      \/\/!< Filter for X-axis angular acceleration.$/;"	m	struct:__anon11
FiltForYy	NComRxC.h	/^	Filt2ndOrder FiltForYy;      \/\/!< Filter for Y-axis angular acceleration.$/;"	m	struct:__anon11
FiltForYz	NComRxC.h	/^	Filt2ndOrder FiltForYz;      \/\/!< Filter for Z-axis angular acceleration.$/;"	m	struct:__anon11
NComRxCInternal	NComRxC.h	/^} NComRxCInternal;$/;"	t	typeref:struct:__anon11
mIsTypeValid	NComRxC.h	/^	int mIsTypeValid;                         uint8_t mType;                     \/\/!< Type of card fitted\/connected. [enum]$/;"	m	struct:__anon12
mType	NComRxC.h	/^	int mIsTypeValid;                         uint8_t mType;                     \/\/!< Type of card fitted\/connected. [enum]$/;"	m	struct:__anon12
mIsFormatValid	NComRxC.h	/^	int mIsFormatValid;                       uint8_t mFormat;                   \/\/!< Data format of card fitted\/connected. [enum]$/;"	m	struct:__anon12
mFormat	NComRxC.h	/^	int mIsFormatValid;                       uint8_t mFormat;                   \/\/!< Data format of card fitted\/connected. [enum]$/;"	m	struct:__anon12
mIsRawRateValid	NComRxC.h	/^	int mIsRawRateValid;                      uint8_t mRawRate;                  \/\/!< Raw update rate. [enum]$/;"	m	struct:__anon12
mRawRate	NComRxC.h	/^	int mIsRawRateValid;                      uint8_t mRawRate;                  \/\/!< Raw update rate. [enum]$/;"	m	struct:__anon12
mIsPosRateValid	NComRxC.h	/^	int mIsPosRateValid;                      uint8_t mPosRate;                  \/\/!< Position update rate. [enum]$/;"	m	struct:__anon12
mPosRate	NComRxC.h	/^	int mIsPosRateValid;                      uint8_t mPosRate;                  \/\/!< Position update rate. [enum]$/;"	m	struct:__anon12
mIsVelRateValid	NComRxC.h	/^	int mIsVelRateValid;                      uint8_t mVelRate;                  \/\/!< Velocity update rate. [enum]$/;"	m	struct:__anon12
mVelRate	NComRxC.h	/^	int mIsVelRateValid;                      uint8_t mVelRate;                  \/\/!< Velocity update rate. [enum]$/;"	m	struct:__anon12
mIsAntStatusValid	NComRxC.h	/^	int mIsAntStatusValid;                    uint8_t mAntStatus;                \/\/!< Antenna status. [enum]$/;"	m	struct:__anon12
mAntStatus	NComRxC.h	/^	int mIsAntStatusValid;                    uint8_t mAntStatus;                \/\/!< Antenna status. [enum]$/;"	m	struct:__anon12
mIsAntPowerValid	NComRxC.h	/^	int mIsAntPowerValid;                     uint8_t mAntPower;                 \/\/!< Antenna power. [enum]$/;"	m	struct:__anon12
mAntPower	NComRxC.h	/^	int mIsAntPowerValid;                     uint8_t mAntPower;                 \/\/!< Antenna power. [enum]$/;"	m	struct:__anon12
mIsPosModeValid	NComRxC.h	/^	int mIsPosModeValid;                      uint8_t mPosMode;                  \/\/!< Position mode. [enum]$/;"	m	struct:__anon12
mPosMode	NComRxC.h	/^	int mIsPosModeValid;                      uint8_t mPosMode;                  \/\/!< Position mode. [enum]$/;"	m	struct:__anon12
mIsSerBaudValid	NComRxC.h	/^	int mIsSerBaudValid;                      uint8_t mSerBaud;                  \/\/!< Receiver baud. [enum]$/;"	m	struct:__anon12
mSerBaud	NComRxC.h	/^	int mIsSerBaudValid;                      uint8_t mSerBaud;                  \/\/!< Receiver baud. [enum]$/;"	m	struct:__anon12
mIsNumSatsValid	NComRxC.h	/^	int mIsNumSatsValid;                          int mNumSats;                  \/\/!< Number of satellites tracked.$/;"	m	struct:__anon12
mNumSats	NComRxC.h	/^	int mIsNumSatsValid;                          int mNumSats;                  \/\/!< Number of satellites tracked.$/;"	m	struct:__anon12
mIsCpuUsedValid	NComRxC.h	/^	int mIsCpuUsedValid;                       double mCpuUsed;                  \/\/!< CPU usage. [%]$/;"	m	struct:__anon12
mCpuUsed	NComRxC.h	/^	int mIsCpuUsedValid;                       double mCpuUsed;                  \/\/!< CPU usage. [%]$/;"	m	struct:__anon12
mIsCoreNoiseValid	NComRxC.h	/^	int mIsCoreNoiseValid;                     double mCoreNoise;                \/\/!< Core noise. [%]$/;"	m	struct:__anon12
mCoreNoise	NComRxC.h	/^	int mIsCoreNoiseValid;                     double mCoreNoise;                \/\/!< Core noise. [%]$/;"	m	struct:__anon12
mIsCoreTempValid	NComRxC.h	/^	int mIsCoreTempValid;                      double mCoreTemp;                 \/\/!< Core temperature. [deg C]$/;"	m	struct:__anon12
mCoreTemp	NComRxC.h	/^	int mIsCoreTempValid;                      double mCoreTemp;                 \/\/!< Core temperature. [deg C]$/;"	m	struct:__anon12
mIsSupplyVoltValid	NComRxC.h	/^	int mIsSupplyVoltValid;                    double mSupplyVolt;               \/\/!< Supply voltage. [V]$/;"	m	struct:__anon12
mSupplyVolt	NComRxC.h	/^	int mIsSupplyVoltValid;                    double mSupplyVolt;               \/\/!< Supply voltage. [V]$/;"	m	struct:__anon12
mIsCharsValid	NComRxC.h	/^	int mIsCharsValid;                       uint32_t mChars;                    \/\/!< Number of bytes.$/;"	m	struct:__anon12
mChars	NComRxC.h	/^	int mIsCharsValid;                       uint32_t mChars;                    \/\/!< Number of bytes.$/;"	m	struct:__anon12
mIsCharsSkippedValid	NComRxC.h	/^	int mIsCharsSkippedValid;                uint32_t mCharsSkipped;             \/\/!< Number of invalid bytes.$/;"	m	struct:__anon12
mCharsSkipped	NComRxC.h	/^	int mIsCharsSkippedValid;                uint32_t mCharsSkipped;             \/\/!< Number of invalid bytes.$/;"	m	struct:__anon12
mIsPktsValid	NComRxC.h	/^	int mIsPktsValid;                        uint32_t mPkts;                     \/\/!< Number of valid packets.$/;"	m	struct:__anon12
mPkts	NComRxC.h	/^	int mIsPktsValid;                        uint32_t mPkts;                     \/\/!< Number of valid packets.$/;"	m	struct:__anon12
mIsOldPktsValid	NComRxC.h	/^	int mIsOldPktsValid;                     uint32_t mOldPkts;                  \/\/!< Number of out of date packets.$/;"	m	struct:__anon12
mOldPkts	NComRxC.h	/^	int mIsOldPktsValid;                     uint32_t mOldPkts;                  \/\/!< Number of out of date packets.$/;"	m	struct:__anon12
NComRxCGps	NComRxC.h	/^} NComRxCGps;$/;"	t	typeref:struct:__anon12
mGpsPrimary	NComRxC.h	/^	NComRxCGps *mGpsPrimary;      \/\/!< Primary internal GPS receiver.$/;"	m	struct:__anon13
mGpsSecondary	NComRxC.h	/^	NComRxCGps *mGpsSecondary;    \/\/!< Secondary internal GPS receiver.$/;"	m	struct:__anon13
mGpsExternal	NComRxC.h	/^	NComRxCGps *mGpsExternal;     \/\/!< External GPS receiver.$/;"	m	struct:__anon13
mIsOutputPacketTypeValid	NComRxC.h	/^	int mIsOutputPacketTypeValid;             uint8_t mOutputPacketType;         \/\/!< Type of output packet from the decoder. [enum]$/;"	m	struct:__anon13
mOutputPacketType	NComRxC.h	/^	int mIsOutputPacketTypeValid;             uint8_t mOutputPacketType;         \/\/!< Type of output packet from the decoder. [enum]$/;"	m	struct:__anon13
mIsInsNavModeValid	NComRxC.h	/^	int mIsInsNavModeValid;                   uint8_t mInsNavMode;               \/\/!< Navigation system mode. [enum]$/;"	m	struct:__anon13
mInsNavMode	NComRxC.h	/^	int mIsInsNavModeValid;                   uint8_t mInsNavMode;               \/\/!< Navigation system mode. [enum]$/;"	m	struct:__anon13
mIsSerialNumberValid	NComRxC.h	/^	int mIsSerialNumberValid;                     int mSerialNumber;             \/\/!< Unit serial number.$/;"	m	struct:__anon13
mSerialNumber	NComRxC.h	/^	int mIsSerialNumberValid;                     int mSerialNumber;             \/\/!< Unit serial number.$/;"	m	struct:__anon13
mIsDevIdValid	NComRxC.h	/^	int mIsDevIdValid;                           char mDevId[DEV_ID_STRLEN+1];                    \/\/!< Development ID.$/;"	m	struct:__anon13
mDevId	NComRxC.h	/^	int mIsDevIdValid;                           char mDevId[DEV_ID_STRLEN+1];                    \/\/!< Development ID.$/;"	m	struct:__anon13
mIsOsVersion1Valid	NComRxC.h	/^	int mIsOsVersion1Valid;                       int mOsVersion1;               \/\/!< Operating system major version.$/;"	m	struct:__anon13
mOsVersion1	NComRxC.h	/^	int mIsOsVersion1Valid;                       int mOsVersion1;               \/\/!< Operating system major version.$/;"	m	struct:__anon13
mIsOsVersion2Valid	NComRxC.h	/^	int mIsOsVersion2Valid;                       int mOsVersion2;               \/\/!< Operating system minor version.$/;"	m	struct:__anon13
mOsVersion2	NComRxC.h	/^	int mIsOsVersion2Valid;                       int mOsVersion2;               \/\/!< Operating system minor version.$/;"	m	struct:__anon13
mIsOsVersion3Valid	NComRxC.h	/^	int mIsOsVersion3Valid;                       int mOsVersion3;               \/\/!< Operating system revision version.$/;"	m	struct:__anon13
mOsVersion3	NComRxC.h	/^	int mIsOsVersion3Valid;                       int mOsVersion3;               \/\/!< Operating system revision version.$/;"	m	struct:__anon13
mIsOsScriptIdValid	NComRxC.h	/^	int mIsOsScriptIdValid;                      char mOsScriptId[OS_SCRIPT_ID_STRLEN+1];               \/\/!< Operating system boot up script ID.$/;"	m	struct:__anon13
mOsScriptId	NComRxC.h	/^	int mIsOsScriptIdValid;                      char mOsScriptId[OS_SCRIPT_ID_STRLEN+1];               \/\/!< Operating system boot up script ID.$/;"	m	struct:__anon13
mIsImuTypeValid	NComRxC.h	/^	int mIsImuTypeValid;                      uint8_t mImuType;                  \/\/!< Type of IMU fitted. [enum]$/;"	m	struct:__anon13
mImuType	NComRxC.h	/^	int mIsImuTypeValid;                      uint8_t mImuType;                  \/\/!< Type of IMU fitted. [enum]$/;"	m	struct:__anon13
mIsCpuPcbTypeValid	NComRxC.h	/^	int mIsCpuPcbTypeValid;                   uint8_t mCpuPcbType;               \/\/!< Type of CPU PCB fitted. [enum]$/;"	m	struct:__anon13
mCpuPcbType	NComRxC.h	/^	int mIsCpuPcbTypeValid;                   uint8_t mCpuPcbType;               \/\/!< Type of CPU PCB fitted. [enum]$/;"	m	struct:__anon13
mIsInterPcbTypeValid	NComRxC.h	/^	int mIsInterPcbTypeValid;                 uint8_t mInterPcbType;             \/\/!< Type of interconnection PCB fitted. [enum]$/;"	m	struct:__anon13
mInterPcbType	NComRxC.h	/^	int mIsInterPcbTypeValid;                 uint8_t mInterPcbType;             \/\/!< Type of interconnection PCB fitted. [enum]$/;"	m	struct:__anon13
mIsFrontPcbTypeValid	NComRxC.h	/^	int mIsFrontPcbTypeValid;                 uint8_t mFrontPcbType;             \/\/!< Type of front panel PCB fitted. [enum]$/;"	m	struct:__anon13
mFrontPcbType	NComRxC.h	/^	int mIsFrontPcbTypeValid;                 uint8_t mFrontPcbType;             \/\/!< Type of front panel PCB fitted. [enum]$/;"	m	struct:__anon13
mIsInterSwIdValid	NComRxC.h	/^	int mIsInterSwIdValid;                    uint8_t mInterSwId;                \/\/!< Software ID of interconnection PCB. [enum]$/;"	m	struct:__anon13
mInterSwId	NComRxC.h	/^	int mIsInterSwIdValid;                    uint8_t mInterSwId;                \/\/!< Software ID of interconnection PCB. [enum]$/;"	m	struct:__anon13
mIsHwConfigValid	NComRxC.h	/^	int mIsHwConfigValid;                     uint8_t mHwConfig;                 \/\/!< Reserved for testing. [enum]$/;"	m	struct:__anon13
mHwConfig	NComRxC.h	/^	int mIsHwConfigValid;                     uint8_t mHwConfig;                 \/\/!< Reserved for testing. [enum]$/;"	m	struct:__anon13
mIsDiskSpaceValid	NComRxC.h	/^	int mIsDiskSpaceValid;                   uint64_t mDiskSpace;                \/\/!< Remaining disk space. [B]$/;"	m	struct:__anon13
mDiskSpace	NComRxC.h	/^	int mIsDiskSpaceValid;                   uint64_t mDiskSpace;                \/\/!< Remaining disk space. [B]$/;"	m	struct:__anon13
mIsFileSizeValid	NComRxC.h	/^	int mIsFileSizeValid;                    uint64_t mFileSize;                 \/\/!< Size of current raw data file. [B]$/;"	m	struct:__anon13
mFileSize	NComRxC.h	/^	int mIsFileSizeValid;                    uint64_t mFileSize;                 \/\/!< Size of current raw data file. [B]$/;"	m	struct:__anon13
mIsUpTimeValid	NComRxC.h	/^	int mIsUpTimeValid;                      uint32_t mUpTime;                   \/\/!< Up time. [s]$/;"	m	struct:__anon13
mUpTime	NComRxC.h	/^	int mIsUpTimeValid;                      uint32_t mUpTime;                   \/\/!< Up time. [s]$/;"	m	struct:__anon13
mIsDualPortRamStatusValid	NComRxC.h	/^	int mIsDualPortRamStatusValid;            uint8_t mDualPortRamStatus;        \/\/!< Dual port RAM interface status. [enum]$/;"	m	struct:__anon13
mDualPortRamStatus	NComRxC.h	/^	int mIsDualPortRamStatusValid;            uint8_t mDualPortRamStatus;        \/\/!< Dual port RAM interface status. [enum]$/;"	m	struct:__anon13
mIsUmacStatusValid	NComRxC.h	/^	int mIsUmacStatusValid;                   uint8_t mUmacStatus;               \/\/!< UMAC (ABD) status. [enum]$/;"	m	struct:__anon13
mUmacStatus	NComRxC.h	/^	int mIsUmacStatusValid;                   uint8_t mUmacStatus;               \/\/!< UMAC (ABD) status. [enum]$/;"	m	struct:__anon13
mIsGnssGpsEnabledValid	NComRxC.h	/^	int mIsGnssGpsEnabledValid;                  int mGnssGpsEnabled;           \/\/!< Global Positioning System (GPS) enabled.$/;"	m	struct:__anon13
mGnssGpsEnabled	NComRxC.h	/^	int mIsGnssGpsEnabledValid;                  int mGnssGpsEnabled;           \/\/!< Global Positioning System (GPS) enabled.$/;"	m	struct:__anon13
mIsGnssGlonassEnabledValid	NComRxC.h	/^	int mIsGnssGlonassEnabledValid;              int mGnssGlonassEnabled;       \/\/!< GLObal NAvigation Satellite System (GLONASS) enabled.$/;"	m	struct:__anon13
mGnssGlonassEnabled	NComRxC.h	/^	int mIsGnssGlonassEnabledValid;              int mGnssGlonassEnabled;       \/\/!< GLObal NAvigation Satellite System (GLONASS) enabled.$/;"	m	struct:__anon13
mIsGnssGalileoEnabledValid	NComRxC.h	/^	int mIsGnssGalileoEnabledValid;              int mGnssGalileoEnabled;       \/\/!< Galileo enabled.$/;"	m	struct:__anon13
mGnssGalileoEnabled	NComRxC.h	/^	int mIsGnssGalileoEnabledValid;              int mGnssGalileoEnabled;       \/\/!< Galileo enabled.$/;"	m	struct:__anon13
mIsPsrDiffEnabledValid	NComRxC.h	/^	int mIsPsrDiffEnabledValid;                  int mPsrDiffEnabled;           \/\/!< Pseudo-range differential.$/;"	m	struct:__anon13
mPsrDiffEnabled	NComRxC.h	/^	int mIsPsrDiffEnabledValid;                  int mPsrDiffEnabled;           \/\/!< Pseudo-range differential.$/;"	m	struct:__anon13
mIsSBASEnabledValid	NComRxC.h	/^	int mIsSBASEnabledValid;                     int mSBASEnabled;              \/\/!< Satellite Based Augmentation System (SBAS).$/;"	m	struct:__anon13
mSBASEnabled	NComRxC.h	/^	int mIsSBASEnabledValid;                     int mSBASEnabled;              \/\/!< Satellite Based Augmentation System (SBAS).$/;"	m	struct:__anon13
mIsOmniVBSEnabledValid	NComRxC.h	/^	int mIsOmniVBSEnabledValid;                  int mOmniVBSEnabled;           \/\/!< OmniSTAR Virtual Base Station (VBS).$/;"	m	struct:__anon13
mOmniVBSEnabled	NComRxC.h	/^	int mIsOmniVBSEnabledValid;                  int mOmniVBSEnabled;           \/\/!< OmniSTAR Virtual Base Station (VBS).$/;"	m	struct:__anon13
mIsOmniHPEnabledValid	NComRxC.h	/^	int mIsOmniHPEnabledValid;                   int mOmniHPEnabled;            \/\/!< OmniSTAR High Performance (HP).$/;"	m	struct:__anon13
mOmniHPEnabled	NComRxC.h	/^	int mIsOmniHPEnabledValid;                   int mOmniHPEnabled;            \/\/!< OmniSTAR High Performance (HP).$/;"	m	struct:__anon13
mIsL1DiffEnabledValid	NComRxC.h	/^	int mIsL1DiffEnabledValid;                   int mL1DiffEnabled;            \/\/!< L1 carrier-phase differential (RT20).$/;"	m	struct:__anon13
mL1DiffEnabled	NComRxC.h	/^	int mIsL1DiffEnabledValid;                   int mL1DiffEnabled;            \/\/!< L1 carrier-phase differential (RT20).$/;"	m	struct:__anon13
mIsL1L2DiffEnabledValid	NComRxC.h	/^	int mIsL1L2DiffEnabledValid;                 int mL1L2DiffEnabled;          \/\/!< L1\/L2 carrier-phase differential (RT2).$/;"	m	struct:__anon13
mL1L2DiffEnabled	NComRxC.h	/^	int mIsL1L2DiffEnabledValid;                 int mL1L2DiffEnabled;          \/\/!< L1\/L2 carrier-phase differential (RT2).$/;"	m	struct:__anon13
mIsRawRngEnabledValid	NComRxC.h	/^	int mIsRawRngEnabledValid;                   int mRawRngEnabled;            \/\/!< Raw pseudo-range output.$/;"	m	struct:__anon13
mRawRngEnabled	NComRxC.h	/^	int mIsRawRngEnabledValid;                   int mRawRngEnabled;            \/\/!< Raw pseudo-range output.$/;"	m	struct:__anon13
mIsRawDopEnabledValid	NComRxC.h	/^	int mIsRawDopEnabledValid;                   int mRawDopEnabled;            \/\/!< Raw Doppler output.$/;"	m	struct:__anon13
mRawDopEnabled	NComRxC.h	/^	int mIsRawDopEnabledValid;                   int mRawDopEnabled;            \/\/!< Raw Doppler output.$/;"	m	struct:__anon13
mIsRawL1EnabledValid	NComRxC.h	/^	int mIsRawL1EnabledValid;                    int mRawL1Enabled;             \/\/!< Raw L1 output.$/;"	m	struct:__anon13
mRawL1Enabled	NComRxC.h	/^	int mIsRawL1EnabledValid;                    int mRawL1Enabled;             \/\/!< Raw L1 output.$/;"	m	struct:__anon13
mIsRawL2EnabledValid	NComRxC.h	/^	int mIsRawL2EnabledValid;                    int mRawL2Enabled;             \/\/!< Raw L2 output.$/;"	m	struct:__anon13
mRawL2Enabled	NComRxC.h	/^	int mIsRawL2EnabledValid;                    int mRawL2Enabled;             \/\/!< Raw L2 output.$/;"	m	struct:__anon13
mIsRawL5EnabledValid	NComRxC.h	/^	int mIsRawL5EnabledValid;                    int mRawL5Enabled;             \/\/!< Raw L5 output.$/;"	m	struct:__anon13
mRawL5Enabled	NComRxC.h	/^	int mIsRawL5EnabledValid;                    int mRawL5Enabled;             \/\/!< Raw L5 output.$/;"	m	struct:__anon13
mIsGpsPosModeValid	NComRxC.h	/^	int mIsGpsPosModeValid;                   uint8_t mGpsPosMode;               \/\/!< Position mode. [enum]$/;"	m	struct:__anon13
mGpsPosMode	NComRxC.h	/^	int mIsGpsPosModeValid;                   uint8_t mGpsPosMode;               \/\/!< Position mode. [enum]$/;"	m	struct:__anon13
mIsGpsVelModeValid	NComRxC.h	/^	int mIsGpsVelModeValid;                   uint8_t mGpsVelMode;               \/\/!< Velocity mode. [enum]$/;"	m	struct:__anon13
mGpsVelMode	NComRxC.h	/^	int mIsGpsVelModeValid;                   uint8_t mGpsVelMode;               \/\/!< Velocity mode. [enum]$/;"	m	struct:__anon13
mIsGpsAttModeValid	NComRxC.h	/^	int mIsGpsAttModeValid;                   uint8_t mGpsAttMode;               \/\/!< Attitude mode. [enum]$/;"	m	struct:__anon13
mGpsAttMode	NComRxC.h	/^	int mIsGpsAttModeValid;                   uint8_t mGpsAttMode;               \/\/!< Attitude mode. [enum]$/;"	m	struct:__anon13
mIsPDOPValid	NComRxC.h	/^	int mIsPDOPValid;                          double mPDOP;                     \/\/!< Positional dilution of precision. [-]$/;"	m	struct:__anon13
mPDOP	NComRxC.h	/^	int mIsPDOPValid;                          double mPDOP;                     \/\/!< Positional dilution of precision. [-]$/;"	m	struct:__anon13
mIsHDOPValid	NComRxC.h	/^	int mIsHDOPValid;                          double mHDOP;                     \/\/!< Horizontal dilution of precision. [-]$/;"	m	struct:__anon13
mHDOP	NComRxC.h	/^	int mIsHDOPValid;                          double mHDOP;                     \/\/!< Horizontal dilution of precision. [-]$/;"	m	struct:__anon13
mIsVDOPValid	NComRxC.h	/^	int mIsVDOPValid;                          double mVDOP;                     \/\/!< Vertical dilution of precision. [-]$/;"	m	struct:__anon13
mVDOP	NComRxC.h	/^	int mIsVDOPValid;                          double mVDOP;                     \/\/!< Vertical dilution of precision. [-]$/;"	m	struct:__anon13
mIsGpsNumObsValid	NComRxC.h	/^	int mIsGpsNumObsValid;                        int mGpsNumObs;                \/\/!< Number of satellites.$/;"	m	struct:__anon13
mGpsNumObs	NComRxC.h	/^	int mIsGpsNumObsValid;                        int mGpsNumObs;                \/\/!< Number of satellites.$/;"	m	struct:__anon13
mIsUndulationValid	NComRxC.h	/^	int mIsUndulationValid;                    double mUndulation;               \/\/!< Difference between ellipsoidal altitude and geoidal altitude. [m]$/;"	m	struct:__anon13
mUndulation	NComRxC.h	/^	int mIsUndulationValid;                    double mUndulation;               \/\/!< Difference between ellipsoidal altitude and geoidal altitude. [m]$/;"	m	struct:__anon13
mIsGpsDiffAgeValid	NComRxC.h	/^	int mIsGpsDiffAgeValid;                    double mGpsDiffAge;               \/\/!< Differential corrections age to GPS. [s]$/;"	m	struct:__anon13
mGpsDiffAge	NComRxC.h	/^	int mIsGpsDiffAgeValid;                    double mGpsDiffAge;               \/\/!< Differential corrections age to GPS. [s]$/;"	m	struct:__anon13
mIsBaseStationIdValid	NComRxC.h	/^	int mIsBaseStationIdValid;                   char mBaseStationId[BASE_STATION_ID_STRLEN+1];            \/\/!< Differential base station ID.$/;"	m	struct:__anon13
mBaseStationId	NComRxC.h	/^	int mIsBaseStationIdValid;                   char mBaseStationId[BASE_STATION_ID_STRLEN+1];            \/\/!< Differential base station ID.$/;"	m	struct:__anon13
mIsHeadQualityValid	NComRxC.h	/^	int mIsHeadQualityValid;                  uint8_t mHeadQuality;              \/\/!< Dual antenna Heading quality. [enum]$/;"	m	struct:__anon13
mHeadQuality	NComRxC.h	/^	int mIsHeadQualityValid;                  uint8_t mHeadQuality;              \/\/!< Dual antenna Heading quality. [enum]$/;"	m	struct:__anon13
mIsHeadSearchTypeValid	NComRxC.h	/^	int mIsHeadSearchTypeValid;               uint8_t mHeadSearchType;           \/\/!< Dual antenna Heading search type. [enum]$/;"	m	struct:__anon13
mHeadSearchType	NComRxC.h	/^	int mIsHeadSearchTypeValid;               uint8_t mHeadSearchType;           \/\/!< Dual antenna Heading search type. [enum]$/;"	m	struct:__anon13
mIsHeadSearchStatusValid	NComRxC.h	/^	int mIsHeadSearchStatusValid;             uint8_t mHeadSearchStatus;         \/\/!< Dual antenna Heading search status. [enum]$/;"	m	struct:__anon13
mHeadSearchStatus	NComRxC.h	/^	int mIsHeadSearchStatusValid;             uint8_t mHeadSearchStatus;         \/\/!< Dual antenna Heading search status. [enum]$/;"	m	struct:__anon13
mIsHeadSearchReadyValid	NComRxC.h	/^	int mIsHeadSearchReadyValid;              uint8_t mHeadSearchReady;          \/\/!< Dual antenna Heading search ready. [enum]$/;"	m	struct:__anon13
mHeadSearchReady	NComRxC.h	/^	int mIsHeadSearchReadyValid;              uint8_t mHeadSearchReady;          \/\/!< Dual antenna Heading search ready. [enum]$/;"	m	struct:__anon13
mIsHeadSearchInitValid	NComRxC.h	/^	int mIsHeadSearchInitValid;                   int mHeadSearchInit;           \/\/!< Initial number of ambiguities in the heading search.$/;"	m	struct:__anon13
mHeadSearchInit	NComRxC.h	/^	int mIsHeadSearchInitValid;                   int mHeadSearchInit;           \/\/!< Initial number of ambiguities in the heading search.$/;"	m	struct:__anon13
mIsHeadSearchNumValid	NComRxC.h	/^	int mIsHeadSearchNumValid;                    int mHeadSearchNum;            \/\/!< Remaining number of ambiguities in the heading search.$/;"	m	struct:__anon13
mHeadSearchNum	NComRxC.h	/^	int mIsHeadSearchNumValid;                    int mHeadSearchNum;            \/\/!< Remaining number of ambiguities in the heading search.$/;"	m	struct:__anon13
mIsHeadSearchTimeValid	NComRxC.h	/^	int mIsHeadSearchTimeValid;                   int mHeadSearchTime;           \/\/!< Heading Search Duration. [s]$/;"	m	struct:__anon13
mHeadSearchTime	NComRxC.h	/^	int mIsHeadSearchTimeValid;                   int mHeadSearchTime;           \/\/!< Heading Search Duration. [s]$/;"	m	struct:__anon13
mIsHeadSearchConstrValid	NComRxC.h	/^	int mIsHeadSearchConstrValid;                 int mHeadSearchConstr;         \/\/!< Number of constraints applied in the Heading Search.$/;"	m	struct:__anon13
mHeadSearchConstr	NComRxC.h	/^	int mIsHeadSearchConstrValid;                 int mHeadSearchConstr;         \/\/!< Number of constraints applied in the Heading Search.$/;"	m	struct:__anon13
mIsHeadSearchMasterValid	NComRxC.h	/^	int mIsHeadSearchMasterValid;                 int mHeadSearchMaster;         \/\/!< Master Satellite PRN in the Heading Search.$/;"	m	struct:__anon13
mHeadSearchMaster	NComRxC.h	/^	int mIsHeadSearchMasterValid;                 int mHeadSearchMaster;         \/\/!< Master Satellite PRN in the Heading Search.$/;"	m	struct:__anon13
mIsHeadSearchSlave1Valid	NComRxC.h	/^	int mIsHeadSearchSlave1Valid;                 int mHeadSearchSlave1;         \/\/!< Slave 1 Satellite PRN in the Heading Search.$/;"	m	struct:__anon13
mHeadSearchSlave1	NComRxC.h	/^	int mIsHeadSearchSlave1Valid;                 int mHeadSearchSlave1;         \/\/!< Slave 1 Satellite PRN in the Heading Search.$/;"	m	struct:__anon13
mIsHeadSearchSlave2Valid	NComRxC.h	/^	int mIsHeadSearchSlave2Valid;                 int mHeadSearchSlave2;         \/\/!< Slave 2 Satellite PRN in the Heading Search.$/;"	m	struct:__anon13
mHeadSearchSlave2	NComRxC.h	/^	int mIsHeadSearchSlave2Valid;                 int mHeadSearchSlave2;         \/\/!< Slave 2 Satellite PRN in the Heading Search.$/;"	m	struct:__anon13
mIsHeadSearchSlave3Valid	NComRxC.h	/^	int mIsHeadSearchSlave3Valid;                 int mHeadSearchSlave3;         \/\/!< Slave 3 Satellite PRN in the Heading Search.$/;"	m	struct:__anon13
mHeadSearchSlave3	NComRxC.h	/^	int mIsHeadSearchSlave3Valid;                 int mHeadSearchSlave3;         \/\/!< Slave 3 Satellite PRN in the Heading Search.$/;"	m	struct:__anon13
mIsOmniStarSerialValid	NComRxC.h	/^	int mIsOmniStarSerialValid;                  char mOmniStarSerial[OMNISTAR_SERIAL_STRLEN+1];           \/\/!< OmniSTAR serial string.$/;"	m	struct:__anon13
mOmniStarSerial	NComRxC.h	/^	int mIsOmniStarSerialValid;                  char mOmniStarSerial[OMNISTAR_SERIAL_STRLEN+1];           \/\/!< OmniSTAR serial string.$/;"	m	struct:__anon13
mIsOmniStarFreqValid	NComRxC.h	/^	int mIsOmniStarFreqValid;                  double mOmniStarFreq;             \/\/!< OmniSTAR frequency. [Hz]$/;"	m	struct:__anon13
mOmniStarFreq	NComRxC.h	/^	int mIsOmniStarFreqValid;                  double mOmniStarFreq;             \/\/!< OmniSTAR frequency. [Hz]$/;"	m	struct:__anon13
mIsOmniStarSNRValid	NComRxC.h	/^	int mIsOmniStarSNRValid;                   double mOmniStarSNR;              \/\/!< OmniSTAR signal to noise ratio. [dB]$/;"	m	struct:__anon13
mOmniStarSNR	NComRxC.h	/^	int mIsOmniStarSNRValid;                   double mOmniStarSNR;              \/\/!< OmniSTAR signal to noise ratio. [dB]$/;"	m	struct:__anon13
mIsOmniStarLockTimeValid	NComRxC.h	/^	int mIsOmniStarLockTimeValid;              double mOmniStarLockTime;         \/\/!< OmniSTAR lock time. [s]$/;"	m	struct:__anon13
mOmniStarLockTime	NComRxC.h	/^	int mIsOmniStarLockTimeValid;              double mOmniStarLockTime;         \/\/!< OmniSTAR lock time. [s]$/;"	m	struct:__anon13
mIsOmniStatusVbsExpiredValid	NComRxC.h	/^	int mIsOmniStatusVbsExpiredValid;            int mOmniStatusVbsExpired;     \/\/!< Virtual Base Station status: Expired.$/;"	m	struct:__anon13
mOmniStatusVbsExpired	NComRxC.h	/^	int mIsOmniStatusVbsExpiredValid;            int mOmniStatusVbsExpired;     \/\/!< Virtual Base Station status: Expired.$/;"	m	struct:__anon13
mIsOmniStatusVbsOutOfRegionValid	NComRxC.h	/^	int mIsOmniStatusVbsOutOfRegionValid;        int mOmniStatusVbsOutOfRegion; \/\/!< Virtual Base Station status: Out of region.$/;"	m	struct:__anon13
mOmniStatusVbsOutOfRegion	NComRxC.h	/^	int mIsOmniStatusVbsOutOfRegionValid;        int mOmniStatusVbsOutOfRegion; \/\/!< Virtual Base Station status: Out of region.$/;"	m	struct:__anon13
mIsOmniStatusVbsNoRemoteSitesValid	NComRxC.h	/^	int mIsOmniStatusVbsNoRemoteSitesValid;       int mOmniStatusVbsNoRemoteSites;\/\/!< Virtual Base Station status: No remote sites.$/;"	m	struct:__anon13
mOmniStatusVbsNoRemoteSites	NComRxC.h	/^	int mIsOmniStatusVbsNoRemoteSitesValid;       int mOmniStatusVbsNoRemoteSites;\/\/!< Virtual Base Station status: No remote sites.$/;"	m	struct:__anon13
mIsOmniStatusHpExpiredValid	NComRxC.h	/^	int mIsOmniStatusHpExpiredValid;             int mOmniStatusHpExpired;      \/\/!< High Performance status: Expired.$/;"	m	struct:__anon13
mOmniStatusHpExpired	NComRxC.h	/^	int mIsOmniStatusHpExpiredValid;             int mOmniStatusHpExpired;      \/\/!< High Performance status: Expired.$/;"	m	struct:__anon13
mIsOmniStatusHpOutOfRegionValid	NComRxC.h	/^	int mIsOmniStatusHpOutOfRegionValid;         int mOmniStatusHpOutOfRegion;  \/\/!< High Performance status: Out of region.$/;"	m	struct:__anon13
mOmniStatusHpOutOfRegion	NComRxC.h	/^	int mIsOmniStatusHpOutOfRegionValid;         int mOmniStatusHpOutOfRegion;  \/\/!< High Performance status: Out of region.$/;"	m	struct:__anon13
mIsOmniStatusHpNoRemoteSitesValid	NComRxC.h	/^	int mIsOmniStatusHpNoRemoteSitesValid;       int mOmniStatusHpNoRemoteSites;\/\/!< High Performance status: No remote sites.$/;"	m	struct:__anon13
mOmniStatusHpNoRemoteSites	NComRxC.h	/^	int mIsOmniStatusHpNoRemoteSitesValid;       int mOmniStatusHpNoRemoteSites;\/\/!< High Performance status: No remote sites.$/;"	m	struct:__anon13
mIsOmniStatusHpNotConvergedValid	NComRxC.h	/^	int mIsOmniStatusHpNotConvergedValid;        int mOmniStatusHpNotConverged; \/\/!< High Performance status: Not converged.$/;"	m	struct:__anon13
mOmniStatusHpNotConverged	NComRxC.h	/^	int mIsOmniStatusHpNotConvergedValid;        int mOmniStatusHpNotConverged; \/\/!< High Performance status: Not converged.$/;"	m	struct:__anon13
mIsOmniStatusHpKeyInvalidValid	NComRxC.h	/^	int mIsOmniStatusHpKeyInvalidValid;          int mOmniStatusHpKeyInvalid;   \/\/!< High Performance status: Key is invalid.$/;"	m	struct:__anon13
mOmniStatusHpKeyInvalid	NComRxC.h	/^	int mIsOmniStatusHpKeyInvalidValid;          int mOmniStatusHpKeyInvalid;   \/\/!< High Performance status: Key is invalid.$/;"	m	struct:__anon13
mIsOptionLevelValid	NComRxC.h	/^	int mIsOptionLevelValid;                  uint8_t mOptionLevel;              \/\/!< Vehicle approximately level during initialisation? [enum]$/;"	m	struct:__anon13
mOptionLevel	NComRxC.h	/^	int mIsOptionLevelValid;                  uint8_t mOptionLevel;              \/\/!< Vehicle approximately level during initialisation? [enum]$/;"	m	struct:__anon13
mIsOptionVibrationValid	NComRxC.h	/^	int mIsOptionVibrationValid;              uint8_t mOptionVibration;          \/\/!< Vibration level. [enum]$/;"	m	struct:__anon13
mOptionVibration	NComRxC.h	/^	int mIsOptionVibrationValid;              uint8_t mOptionVibration;          \/\/!< Vibration level. [enum]$/;"	m	struct:__anon13
mIsOptionGpsAccValid	NComRxC.h	/^	int mIsOptionGpsAccValid;                 uint8_t mOptionGpsAcc;             \/\/!< GPS environment. [enum]$/;"	m	struct:__anon13
mOptionGpsAcc	NComRxC.h	/^	int mIsOptionGpsAccValid;                 uint8_t mOptionGpsAcc;             \/\/!< GPS environment. [enum]$/;"	m	struct:__anon13
mIsOptionUdpValid	NComRxC.h	/^	int mIsOptionUdpValid;                    uint8_t mOptionUdp;                \/\/!< Packet format transmitted over Ethernet. [enum]$/;"	m	struct:__anon13
mOptionUdp	NComRxC.h	/^	int mIsOptionUdpValid;                    uint8_t mOptionUdp;                \/\/!< Packet format transmitted over Ethernet. [enum]$/;"	m	struct:__anon13
mIsOptionSer1Valid	NComRxC.h	/^	int mIsOptionSer1Valid;                   uint8_t mOptionSer1;               \/\/!< Packet format transmitted over serial port 1. [enum]$/;"	m	struct:__anon13
mOptionSer1	NComRxC.h	/^	int mIsOptionSer1Valid;                   uint8_t mOptionSer1;               \/\/!< Packet format transmitted over serial port 1. [enum]$/;"	m	struct:__anon13
mIsOptionSer2Valid	NComRxC.h	/^	int mIsOptionSer2Valid;                   uint8_t mOptionSer2;               \/\/!< Packet format transmitted over serial port 2. [enum]$/;"	m	struct:__anon13
mOptionSer2	NComRxC.h	/^	int mIsOptionSer2Valid;                   uint8_t mOptionSer2;               \/\/!< Packet format transmitted over serial port 2. [enum]$/;"	m	struct:__anon13
mIsOptionSer3Valid	NComRxC.h	/^	int mIsOptionSer3Valid;                   uint8_t mOptionSer3;               \/\/!< Packet format transmitted over serial port 3. [enum]$/;"	m	struct:__anon13
mOptionSer3	NComRxC.h	/^	int mIsOptionSer3Valid;                   uint8_t mOptionSer3;               \/\/!< Packet format transmitted over serial port 3. [enum]$/;"	m	struct:__anon13
mIsOptionHeadingValid	NComRxC.h	/^	int mIsOptionHeadingValid;                uint8_t mOptionHeading;            \/\/!< Dual antenna heading initialisation mode. [enum]$/;"	m	struct:__anon13
mOptionHeading	NComRxC.h	/^	int mIsOptionHeadingValid;                uint8_t mOptionHeading;            \/\/!< Dual antenna heading initialisation mode. [enum]$/;"	m	struct:__anon13
mIsOptionInitSpeedValid	NComRxC.h	/^	int mIsOptionInitSpeedValid;          int mIsOptionInitSpeedConfig;               double mOptionInitSpeed;          \/\/!< Initialisation speed. [m s^(-1)]$/;"	m	struct:__anon13
mIsOptionInitSpeedConfig	NComRxC.h	/^	int mIsOptionInitSpeedValid;          int mIsOptionInitSpeedConfig;               double mOptionInitSpeed;          \/\/!< Initialisation speed. [m s^(-1)]$/;"	m	struct:__anon13
mOptionInitSpeed	NComRxC.h	/^	int mIsOptionInitSpeedValid;          int mIsOptionInitSpeedConfig;               double mOptionInitSpeed;          \/\/!< Initialisation speed. [m s^(-1)]$/;"	m	struct:__anon13
mIsOptionTopSpeedValid	NComRxC.h	/^	int mIsOptionTopSpeedValid;           int mIsOptionTopSpeedConfig;                double mOptionTopSpeed;           \/\/!< Maximum vehicle speed. [m s^(-1)]$/;"	m	struct:__anon13
mIsOptionTopSpeedConfig	NComRxC.h	/^	int mIsOptionTopSpeedValid;           int mIsOptionTopSpeedConfig;                double mOptionTopSpeed;           \/\/!< Maximum vehicle speed. [m s^(-1)]$/;"	m	struct:__anon13
mOptionTopSpeed	NComRxC.h	/^	int mIsOptionTopSpeedValid;           int mIsOptionTopSpeedConfig;                double mOptionTopSpeed;           \/\/!< Maximum vehicle speed. [m s^(-1)]$/;"	m	struct:__anon13
mIsOptionSer1BaudValid	NComRxC.h	/^	int mIsOptionSer1BaudValid;               uint8_t mOptionSer1Baud;           \/\/!< Serial port 1 baud. [enum]$/;"	m	struct:__anon13
mOptionSer1Baud	NComRxC.h	/^	int mIsOptionSer1BaudValid;               uint8_t mOptionSer1Baud;           \/\/!< Serial port 1 baud. [enum]$/;"	m	struct:__anon13
mIsOptionSer2BaudValid	NComRxC.h	/^	int mIsOptionSer2BaudValid;               uint8_t mOptionSer2Baud;           \/\/!< Serial port 2 baud. [enum]$/;"	m	struct:__anon13
mOptionSer2Baud	NComRxC.h	/^	int mIsOptionSer2BaudValid;               uint8_t mOptionSer2Baud;           \/\/!< Serial port 2 baud. [enum]$/;"	m	struct:__anon13
mIsOptionSer3BaudValid	NComRxC.h	/^	int mIsOptionSer3BaudValid;               uint8_t mOptionSer3Baud;           \/\/!< Serial port 3 baud. [enum]$/;"	m	struct:__anon13
mOptionSer3Baud	NComRxC.h	/^	int mIsOptionSer3BaudValid;               uint8_t mOptionSer3Baud;           \/\/!< Serial port 3 baud. [enum]$/;"	m	struct:__anon13
mIsOptionCanBaudValid	NComRxC.h	/^	int mIsOptionCanBaudValid;                uint8_t mOptionCanBaud;            \/\/!< Controller area network (CAN) bus baud rate. [enum]$/;"	m	struct:__anon13
mOptionCanBaud	NComRxC.h	/^	int mIsOptionCanBaudValid;                uint8_t mOptionCanBaud;            \/\/!< Controller area network (CAN) bus baud rate. [enum]$/;"	m	struct:__anon13
mIsTimeValid	NComRxC.h	/^	int mIsTimeValid;                          double mTime;                     \/\/!< Seconds from GPS time zero (0h 1980-01-06). [s]$/;"	m	struct:__anon13
mTime	NComRxC.h	/^	int mIsTimeValid;                          double mTime;                     \/\/!< Seconds from GPS time zero (0h 1980-01-06). [s]$/;"	m	struct:__anon13
mIsTimeWeekCountValid	NComRxC.h	/^	int mIsTimeWeekCountValid;               uint32_t mTimeWeekCount;            \/\/!< GPS time format, week counter. [week]$/;"	m	struct:__anon13
mTimeWeekCount	NComRxC.h	/^	int mIsTimeWeekCountValid;               uint32_t mTimeWeekCount;            \/\/!< GPS time format, week counter. [week]$/;"	m	struct:__anon13
mIsTimeWeekSecondValid	NComRxC.h	/^	int mIsTimeWeekSecondValid;                double mTimeWeekSecond;           \/\/!< GPS time format, seconds into week. [s]$/;"	m	struct:__anon13
mTimeWeekSecond	NComRxC.h	/^	int mIsTimeWeekSecondValid;                double mTimeWeekSecond;           \/\/!< GPS time format, seconds into week. [s]$/;"	m	struct:__anon13
mIsTimeUtcOffsetValid	NComRxC.h	/^	int mIsTimeUtcOffsetValid;                    int mTimeUtcOffset;            \/\/!< Offset between Coordinated Universal Time (UTC) and GPS time. [s]$/;"	m	struct:__anon13
mTimeUtcOffset	NComRxC.h	/^	int mIsTimeUtcOffsetValid;                    int mTimeUtcOffset;            \/\/!< Offset between Coordinated Universal Time (UTC) and GPS time. [s]$/;"	m	struct:__anon13
mIsLatValid	NComRxC.h	/^	int mIsLatValid;                      int mIsLatApprox;                           double mLat;                      \/\/!< Latitude. [deg]$/;"	m	struct:__anon13
mIsLatApprox	NComRxC.h	/^	int mIsLatValid;                      int mIsLatApprox;                           double mLat;                      \/\/!< Latitude. [deg]$/;"	m	struct:__anon13
mLat	NComRxC.h	/^	int mIsLatValid;                      int mIsLatApprox;                           double mLat;                      \/\/!< Latitude. [deg]$/;"	m	struct:__anon13
mIsLonValid	NComRxC.h	/^	int mIsLonValid;                      int mIsLonApprox;                           double mLon;                      \/\/!< Longitude. [deg]$/;"	m	struct:__anon13
mIsLonApprox	NComRxC.h	/^	int mIsLonValid;                      int mIsLonApprox;                           double mLon;                      \/\/!< Longitude. [deg]$/;"	m	struct:__anon13
mLon	NComRxC.h	/^	int mIsLonValid;                      int mIsLonApprox;                           double mLon;                      \/\/!< Longitude. [deg]$/;"	m	struct:__anon13
mIsAltValid	NComRxC.h	/^	int mIsAltValid;                      int mIsAltApprox;                           double mAlt;                      \/\/!< Altitude. [m]$/;"	m	struct:__anon13
mIsAltApprox	NComRxC.h	/^	int mIsAltValid;                      int mIsAltApprox;                           double mAlt;                      \/\/!< Altitude. [m]$/;"	m	struct:__anon13
mAlt	NComRxC.h	/^	int mIsAltValid;                      int mIsAltApprox;                           double mAlt;                      \/\/!< Altitude. [m]$/;"	m	struct:__anon13
mIsNorthAccValid	NComRxC.h	/^	int mIsNorthAccValid;                      double mNorthAcc;                 \/\/!< North accuracy. [m]$/;"	m	struct:__anon13
mNorthAcc	NComRxC.h	/^	int mIsNorthAccValid;                      double mNorthAcc;                 \/\/!< North accuracy. [m]$/;"	m	struct:__anon13
mIsEastAccValid	NComRxC.h	/^	int mIsEastAccValid;                       double mEastAcc;                  \/\/!< East accuracy. [m]$/;"	m	struct:__anon13
mEastAcc	NComRxC.h	/^	int mIsEastAccValid;                       double mEastAcc;                  \/\/!< East accuracy. [m]$/;"	m	struct:__anon13
mIsAltAccValid	NComRxC.h	/^	int mIsAltAccValid;                        double mAltAcc;                   \/\/!< Altitude accuracy. [m]$/;"	m	struct:__anon13
mAltAcc	NComRxC.h	/^	int mIsAltAccValid;                        double mAltAcc;                   \/\/!< Altitude accuracy. [m]$/;"	m	struct:__anon13
mIsDist2dValid	NComRxC.h	/^	int mIsDist2dValid;                        double mDist2d;                   \/\/!< Distance travelled in horizontal directions. [m]$/;"	m	struct:__anon13
mDist2d	NComRxC.h	/^	int mIsDist2dValid;                        double mDist2d;                   \/\/!< Distance travelled in horizontal directions. [m]$/;"	m	struct:__anon13
mIsDist3dValid	NComRxC.h	/^	int mIsDist3dValid;                        double mDist3d;                   \/\/!< Distance travelled in all directions. [m]$/;"	m	struct:__anon13
mDist3d	NComRxC.h	/^	int mIsDist3dValid;                        double mDist3d;                   \/\/!< Distance travelled in all directions. [m]$/;"	m	struct:__anon13
mIsVnValid	NComRxC.h	/^	int mIsVnValid;                       int mIsVnApprox;                            double mVn;                       \/\/!< North velocity. [m s^(-1)]$/;"	m	struct:__anon13
mIsVnApprox	NComRxC.h	/^	int mIsVnValid;                       int mIsVnApprox;                            double mVn;                       \/\/!< North velocity. [m s^(-1)]$/;"	m	struct:__anon13
mVn	NComRxC.h	/^	int mIsVnValid;                       int mIsVnApprox;                            double mVn;                       \/\/!< North velocity. [m s^(-1)]$/;"	m	struct:__anon13
mIsVeValid	NComRxC.h	/^	int mIsVeValid;                       int mIsVeApprox;                            double mVe;                       \/\/!< East velocity. [m s^(-1)]$/;"	m	struct:__anon13
mIsVeApprox	NComRxC.h	/^	int mIsVeValid;                       int mIsVeApprox;                            double mVe;                       \/\/!< East velocity. [m s^(-1)]$/;"	m	struct:__anon13
mVe	NComRxC.h	/^	int mIsVeValid;                       int mIsVeApprox;                            double mVe;                       \/\/!< East velocity. [m s^(-1)]$/;"	m	struct:__anon13
mIsVdValid	NComRxC.h	/^	int mIsVdValid;                       int mIsVdApprox;                            double mVd;                       \/\/!< Downward velocity. [m s^(-1)]$/;"	m	struct:__anon13
mIsVdApprox	NComRxC.h	/^	int mIsVdValid;                       int mIsVdApprox;                            double mVd;                       \/\/!< Downward velocity. [m s^(-1)]$/;"	m	struct:__anon13
mVd	NComRxC.h	/^	int mIsVdValid;                       int mIsVdApprox;                            double mVd;                       \/\/!< Downward velocity. [m s^(-1)]$/;"	m	struct:__anon13
mIsVfValid	NComRxC.h	/^	int mIsVfValid;                            double mVf;                       \/\/!< Forward velocity. [m s^(-1)]$/;"	m	struct:__anon13
mVf	NComRxC.h	/^	int mIsVfValid;                            double mVf;                       \/\/!< Forward velocity. [m s^(-1)]$/;"	m	struct:__anon13
mIsVlValid	NComRxC.h	/^	int mIsVlValid;                            double mVl;                       \/\/!< Lateral velocity. [m s^(-1)]$/;"	m	struct:__anon13
mVl	NComRxC.h	/^	int mIsVlValid;                            double mVl;                       \/\/!< Lateral velocity. [m s^(-1)]$/;"	m	struct:__anon13
mIsVnAccValid	NComRxC.h	/^	int mIsVnAccValid;                         double mVnAcc;                    \/\/!< North velocity accuracy. [m s^(-1)]$/;"	m	struct:__anon13
mVnAcc	NComRxC.h	/^	int mIsVnAccValid;                         double mVnAcc;                    \/\/!< North velocity accuracy. [m s^(-1)]$/;"	m	struct:__anon13
mIsVeAccValid	NComRxC.h	/^	int mIsVeAccValid;                         double mVeAcc;                    \/\/!< East velocity accuracy. [m s^(-1)]$/;"	m	struct:__anon13
mVeAcc	NComRxC.h	/^	int mIsVeAccValid;                         double mVeAcc;                    \/\/!< East velocity accuracy. [m s^(-1)]$/;"	m	struct:__anon13
mIsVdAccValid	NComRxC.h	/^	int mIsVdAccValid;                         double mVdAcc;                    \/\/!< Down velocity accuracy. [m s^(-1)]$/;"	m	struct:__anon13
mVdAcc	NComRxC.h	/^	int mIsVdAccValid;                         double mVdAcc;                    \/\/!< Down velocity accuracy. [m s^(-1)]$/;"	m	struct:__anon13
mIsSpeed2dValid	NComRxC.h	/^	int mIsSpeed2dValid;                       double mSpeed2d;                  \/\/!< Speed in horizonal directions. [m s^(-1)]$/;"	m	struct:__anon13
mSpeed2d	NComRxC.h	/^	int mIsSpeed2dValid;                       double mSpeed2d;                  \/\/!< Speed in horizonal directions. [m s^(-1)]$/;"	m	struct:__anon13
mIsSpeed3dValid	NComRxC.h	/^	int mIsSpeed3dValid;                       double mSpeed3d;                  \/\/!< Speed in all directions. [m s^(-1)]$/;"	m	struct:__anon13
mSpeed3d	NComRxC.h	/^	int mIsSpeed3dValid;                       double mSpeed3d;                  \/\/!< Speed in all directions. [m s^(-1)]$/;"	m	struct:__anon13
mIsAxValid	NComRxC.h	/^	int mIsAxValid;                            double mAx;                       \/\/!< Acceleration along the X axis. [m s^(-2)]$/;"	m	struct:__anon13
mAx	NComRxC.h	/^	int mIsAxValid;                            double mAx;                       \/\/!< Acceleration along the X axis. [m s^(-2)]$/;"	m	struct:__anon13
mIsAyValid	NComRxC.h	/^	int mIsAyValid;                            double mAy;                       \/\/!< Acceleration along the Y axis. [m s^(-2)]$/;"	m	struct:__anon13
mAy	NComRxC.h	/^	int mIsAyValid;                            double mAy;                       \/\/!< Acceleration along the Y axis. [m s^(-2)]$/;"	m	struct:__anon13
mIsAzValid	NComRxC.h	/^	int mIsAzValid;                            double mAz;                       \/\/!< Acceleration along the Z axis. [m s^(-2)]$/;"	m	struct:__anon13
mAz	NComRxC.h	/^	int mIsAzValid;                            double mAz;                       \/\/!< Acceleration along the Z axis. [m s^(-2)]$/;"	m	struct:__anon13
mIsAfValid	NComRxC.h	/^	int mIsAfValid;                            double mAf;                       \/\/!< Acceleration forward. [m s^(-2)]$/;"	m	struct:__anon13
mAf	NComRxC.h	/^	int mIsAfValid;                            double mAf;                       \/\/!< Acceleration forward. [m s^(-2)]$/;"	m	struct:__anon13
mIsAlValid	NComRxC.h	/^	int mIsAlValid;                            double mAl;                       \/\/!< Acceleration laterally. [m s^(-2)]$/;"	m	struct:__anon13
mAl	NComRxC.h	/^	int mIsAlValid;                            double mAl;                       \/\/!< Acceleration laterally. [m s^(-2)]$/;"	m	struct:__anon13
mIsAdValid	NComRxC.h	/^	int mIsAdValid;                            double mAd;                       \/\/!< Acceleration downward. [m s^(-2)]$/;"	m	struct:__anon13
mAd	NComRxC.h	/^	int mIsAdValid;                            double mAd;                       \/\/!< Acceleration downward. [m s^(-2)]$/;"	m	struct:__anon13
mIsFiltAxValid	NComRxC.h	/^	int mIsFiltAxValid;                        double mFiltAx;                   \/\/!< Filtered acceleration along the X axis. [m s^(-2)]$/;"	m	struct:__anon13
mFiltAx	NComRxC.h	/^	int mIsFiltAxValid;                        double mFiltAx;                   \/\/!< Filtered acceleration along the X axis. [m s^(-2)]$/;"	m	struct:__anon13
mIsFiltAyValid	NComRxC.h	/^	int mIsFiltAyValid;                        double mFiltAy;                   \/\/!< Filtered acceleration along the Y axis. [m s^(-2)]$/;"	m	struct:__anon13
mFiltAy	NComRxC.h	/^	int mIsFiltAyValid;                        double mFiltAy;                   \/\/!< Filtered acceleration along the Y axis. [m s^(-2)]$/;"	m	struct:__anon13
mIsFiltAzValid	NComRxC.h	/^	int mIsFiltAzValid;                        double mFiltAz;                   \/\/!< Filtered acceleration along the Z axis. [m s^(-2)]$/;"	m	struct:__anon13
mFiltAz	NComRxC.h	/^	int mIsFiltAzValid;                        double mFiltAz;                   \/\/!< Filtered acceleration along the Z axis. [m s^(-2)]$/;"	m	struct:__anon13
mIsFiltAfValid	NComRxC.h	/^	int mIsFiltAfValid;                        double mFiltAf;                   \/\/!< Filtered acceleration forward. [m s^(-2)]$/;"	m	struct:__anon13
mFiltAf	NComRxC.h	/^	int mIsFiltAfValid;                        double mFiltAf;                   \/\/!< Filtered acceleration forward. [m s^(-2)]$/;"	m	struct:__anon13
mIsFiltAlValid	NComRxC.h	/^	int mIsFiltAlValid;                        double mFiltAl;                   \/\/!< Filtered acceleration laterally. [m s^(-2)]$/;"	m	struct:__anon13
mFiltAl	NComRxC.h	/^	int mIsFiltAlValid;                        double mFiltAl;                   \/\/!< Filtered acceleration laterally. [m s^(-2)]$/;"	m	struct:__anon13
mIsFiltAdValid	NComRxC.h	/^	int mIsFiltAdValid;                        double mFiltAd;                   \/\/!< Filtered acceleration downward. [m s^(-2)]$/;"	m	struct:__anon13
mFiltAd	NComRxC.h	/^	int mIsFiltAdValid;                        double mFiltAd;                   \/\/!< Filtered acceleration downward. [m s^(-2)]$/;"	m	struct:__anon13
mIsHeadingValid	NComRxC.h	/^	int mIsHeadingValid;                  int mIsHeadingApprox;                       double mHeading;                  \/\/!< Heading. [deg]$/;"	m	struct:__anon13
mIsHeadingApprox	NComRxC.h	/^	int mIsHeadingValid;                  int mIsHeadingApprox;                       double mHeading;                  \/\/!< Heading. [deg]$/;"	m	struct:__anon13
mHeading	NComRxC.h	/^	int mIsHeadingValid;                  int mIsHeadingApprox;                       double mHeading;                  \/\/!< Heading. [deg]$/;"	m	struct:__anon13
mIsPitchValid	NComRxC.h	/^	int mIsPitchValid;                    int mIsPitchApprox;                         double mPitch;                    \/\/!< Pitch. [deg]$/;"	m	struct:__anon13
mIsPitchApprox	NComRxC.h	/^	int mIsPitchValid;                    int mIsPitchApprox;                         double mPitch;                    \/\/!< Pitch. [deg]$/;"	m	struct:__anon13
mPitch	NComRxC.h	/^	int mIsPitchValid;                    int mIsPitchApprox;                         double mPitch;                    \/\/!< Pitch. [deg]$/;"	m	struct:__anon13
mIsRollValid	NComRxC.h	/^	int mIsRollValid;                     int mIsRollApprox;                          double mRoll;                     \/\/!< Roll. [deg]$/;"	m	struct:__anon13
mIsRollApprox	NComRxC.h	/^	int mIsRollValid;                     int mIsRollApprox;                          double mRoll;                     \/\/!< Roll. [deg]$/;"	m	struct:__anon13
mRoll	NComRxC.h	/^	int mIsRollValid;                     int mIsRollApprox;                          double mRoll;                     \/\/!< Roll. [deg]$/;"	m	struct:__anon13
mIsHeadingAccValid	NComRxC.h	/^	int mIsHeadingAccValid;                    double mHeadingAcc;               \/\/!< Heading accuracy. [deg]$/;"	m	struct:__anon13
mHeadingAcc	NComRxC.h	/^	int mIsHeadingAccValid;                    double mHeadingAcc;               \/\/!< Heading accuracy. [deg]$/;"	m	struct:__anon13
mIsPitchAccValid	NComRxC.h	/^	int mIsPitchAccValid;                      double mPitchAcc;                 \/\/!< Pitch accuracy. [deg]$/;"	m	struct:__anon13
mPitchAcc	NComRxC.h	/^	int mIsPitchAccValid;                      double mPitchAcc;                 \/\/!< Pitch accuracy. [deg]$/;"	m	struct:__anon13
mIsRollAccValid	NComRxC.h	/^	int mIsRollAccValid;                       double mRollAcc;                  \/\/!< Roll accuracy. [deg]$/;"	m	struct:__anon13
mRollAcc	NComRxC.h	/^	int mIsRollAccValid;                       double mRollAcc;                  \/\/!< Roll accuracy. [deg]$/;"	m	struct:__anon13
mIsTrackValid	NComRxC.h	/^	int mIsTrackValid;                         double mTrack;                    \/\/!< Track angle. [deg]$/;"	m	struct:__anon13
mTrack	NComRxC.h	/^	int mIsTrackValid;                         double mTrack;                    \/\/!< Track angle. [deg]$/;"	m	struct:__anon13
mIsSlipValid	NComRxC.h	/^	int mIsSlipValid;                          double mSlip;                     \/\/!< Slip angle. [deg]$/;"	m	struct:__anon13
mSlip	NComRxC.h	/^	int mIsSlipValid;                          double mSlip;                     \/\/!< Slip angle. [deg]$/;"	m	struct:__anon13
mIsCurvatureValid	NComRxC.h	/^	int mIsCurvatureValid;                     double mCurvature;                \/\/!< Curvature. [m^(-1)]$/;"	m	struct:__anon13
mCurvature	NComRxC.h	/^	int mIsCurvatureValid;                     double mCurvature;                \/\/!< Curvature. [m^(-1)]$/;"	m	struct:__anon13
mIsWxValid	NComRxC.h	/^	int mIsWxValid;                            double mWx;                       \/\/!< Angular rate about the X axis. [deg s^(-1)]$/;"	m	struct:__anon13
mWx	NComRxC.h	/^	int mIsWxValid;                            double mWx;                       \/\/!< Angular rate about the X axis. [deg s^(-1)]$/;"	m	struct:__anon13
mIsWyValid	NComRxC.h	/^	int mIsWyValid;                            double mWy;                       \/\/!< Angular rate about the Y axis. [deg s^(-1)]$/;"	m	struct:__anon13
mWy	NComRxC.h	/^	int mIsWyValid;                            double mWy;                       \/\/!< Angular rate about the Y axis. [deg s^(-1)]$/;"	m	struct:__anon13
mIsWzValid	NComRxC.h	/^	int mIsWzValid;                            double mWz;                       \/\/!< Angular rate about the Z axis. [deg s^(-1)]$/;"	m	struct:__anon13
mWz	NComRxC.h	/^	int mIsWzValid;                            double mWz;                       \/\/!< Angular rate about the Z axis. [deg s^(-1)]$/;"	m	struct:__anon13
mIsWfValid	NComRxC.h	/^	int mIsWfValid;                            double mWf;                       \/\/!< Angular rate about the forward axis. [deg s^(-1)]$/;"	m	struct:__anon13
mWf	NComRxC.h	/^	int mIsWfValid;                            double mWf;                       \/\/!< Angular rate about the forward axis. [deg s^(-1)]$/;"	m	struct:__anon13
mIsWlValid	NComRxC.h	/^	int mIsWlValid;                            double mWl;                       \/\/!< Angular rate about the lateral axis. [deg s^(-1)]$/;"	m	struct:__anon13
mWl	NComRxC.h	/^	int mIsWlValid;                            double mWl;                       \/\/!< Angular rate about the lateral axis. [deg s^(-1)]$/;"	m	struct:__anon13
mIsWdValid	NComRxC.h	/^	int mIsWdValid;                            double mWd;                       \/\/!< Angular rate about the down axis. [deg s^(-1)]$/;"	m	struct:__anon13
mWd	NComRxC.h	/^	int mIsWdValid;                            double mWd;                       \/\/!< Angular rate about the down axis. [deg s^(-1)]$/;"	m	struct:__anon13
mIsYxValid	NComRxC.h	/^	int mIsYxValid;                            double mYx;                       \/\/!< Angular acceleration about the X axis. [deg s^(-2)]$/;"	m	struct:__anon13
mYx	NComRxC.h	/^	int mIsYxValid;                            double mYx;                       \/\/!< Angular acceleration about the X axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsYyValid	NComRxC.h	/^	int mIsYyValid;                            double mYy;                       \/\/!< Angular acceleration about the Y axis. [deg s^(-2)]$/;"	m	struct:__anon13
mYy	NComRxC.h	/^	int mIsYyValid;                            double mYy;                       \/\/!< Angular acceleration about the Y axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsYzValid	NComRxC.h	/^	int mIsYzValid;                            double mYz;                       \/\/!< Angular acceleration about the Z axis. [deg s^(-2)]$/;"	m	struct:__anon13
mYz	NComRxC.h	/^	int mIsYzValid;                            double mYz;                       \/\/!< Angular acceleration about the Z axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsYfValid	NComRxC.h	/^	int mIsYfValid;                            double mYf;                       \/\/!< Angular acceleration about the forward axis. [deg s^(-2)]$/;"	m	struct:__anon13
mYf	NComRxC.h	/^	int mIsYfValid;                            double mYf;                       \/\/!< Angular acceleration about the forward axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsYlValid	NComRxC.h	/^	int mIsYlValid;                            double mYl;                       \/\/!< Angular acceleration about the lateral axis. [deg s^(-2)]$/;"	m	struct:__anon13
mYl	NComRxC.h	/^	int mIsYlValid;                            double mYl;                       \/\/!< Angular acceleration about the lateral axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsYdValid	NComRxC.h	/^	int mIsYdValid;                            double mYd;                       \/\/!< Angular acceleration about the down axis. [deg s^(-2)]$/;"	m	struct:__anon13
mYd	NComRxC.h	/^	int mIsYdValid;                            double mYd;                       \/\/!< Angular acceleration about the down axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsFiltYxValid	NComRxC.h	/^	int mIsFiltYxValid;                        double mFiltYx;                   \/\/!< Filtered angular acceleration about the X axis. [deg s^(-2)]$/;"	m	struct:__anon13
mFiltYx	NComRxC.h	/^	int mIsFiltYxValid;                        double mFiltYx;                   \/\/!< Filtered angular acceleration about the X axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsFiltYyValid	NComRxC.h	/^	int mIsFiltYyValid;                        double mFiltYy;                   \/\/!< Filtered angular acceleration about the Y axis. [deg s^(-2)]$/;"	m	struct:__anon13
mFiltYy	NComRxC.h	/^	int mIsFiltYyValid;                        double mFiltYy;                   \/\/!< Filtered angular acceleration about the Y axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsFiltYzValid	NComRxC.h	/^	int mIsFiltYzValid;                        double mFiltYz;                   \/\/!< Filtered angular acceleration about the Z axis. [deg s^(-2)]$/;"	m	struct:__anon13
mFiltYz	NComRxC.h	/^	int mIsFiltYzValid;                        double mFiltYz;                   \/\/!< Filtered angular acceleration about the Z axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsFiltYfValid	NComRxC.h	/^	int mIsFiltYfValid;                        double mFiltYf;                   \/\/!< Filtered angular acceleration about the forward axis. [deg s^(-2)]$/;"	m	struct:__anon13
mFiltYf	NComRxC.h	/^	int mIsFiltYfValid;                        double mFiltYf;                   \/\/!< Filtered angular acceleration about the forward axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsFiltYlValid	NComRxC.h	/^	int mIsFiltYlValid;                        double mFiltYl;                   \/\/!< Filtered angular acceleration about the lateral axis. [deg s^(-2)]$/;"	m	struct:__anon13
mFiltYl	NComRxC.h	/^	int mIsFiltYlValid;                        double mFiltYl;                   \/\/!< Filtered angular acceleration about the lateral axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsFiltYdValid	NComRxC.h	/^	int mIsFiltYdValid;                        double mFiltYd;                   \/\/!< Filtered angular acceleration about the down axis. [deg s^(-2)]$/;"	m	struct:__anon13
mFiltYd	NComRxC.h	/^	int mIsFiltYdValid;                        double mFiltYd;                   \/\/!< Filtered angular acceleration about the down axis. [deg s^(-2)]$/;"	m	struct:__anon13
mIsLinAccFiltFreqValid	NComRxC.h	/^	int mIsLinAccFiltFreqValid;                double mLinAccFiltFreq;           \/\/!< Cut-off frequency of linear acceleration low-pass filter. [Hz]$/;"	m	struct:__anon13
mLinAccFiltFreq	NComRxC.h	/^	int mIsLinAccFiltFreqValid;                double mLinAccFiltFreq;           \/\/!< Cut-off frequency of linear acceleration low-pass filter. [Hz]$/;"	m	struct:__anon13
mIsLinAccFiltZetaValid	NComRxC.h	/^	int mIsLinAccFiltZetaValid;                double mLinAccFiltZeta;           \/\/!< Damping ratio of linear acceleration low-pass filter. [-]$/;"	m	struct:__anon13
mLinAccFiltZeta	NComRxC.h	/^	int mIsLinAccFiltZetaValid;                double mLinAccFiltZeta;           \/\/!< Damping ratio of linear acceleration low-pass filter. [-]$/;"	m	struct:__anon13
mIsLinAccFiltFixed	NComRxC.h	/^	int mIsLinAccFiltFixed;$/;"	m	struct:__anon13
mHasLinAccFiltChanged	NComRxC.h	/^	int mHasLinAccFiltChanged;$/;"	m	struct:__anon13
mIsLinAccFiltOff	NComRxC.h	/^	int mIsLinAccFiltOff;$/;"	m	struct:__anon13
mIsAngAccFiltFreqValid	NComRxC.h	/^	int mIsAngAccFiltFreqValid;                double mAngAccFiltFreq;           \/\/!< Cut-off frequency of angular acceleration low-pass filter. [Hz]$/;"	m	struct:__anon13
mAngAccFiltFreq	NComRxC.h	/^	int mIsAngAccFiltFreqValid;                double mAngAccFiltFreq;           \/\/!< Cut-off frequency of angular acceleration low-pass filter. [Hz]$/;"	m	struct:__anon13
mIsAngAccFiltZetaValid	NComRxC.h	/^	int mIsAngAccFiltZetaValid;                double mAngAccFiltZeta;           \/\/!< Damping ratio of angular acceleration low-pass filter. [-]$/;"	m	struct:__anon13
mAngAccFiltZeta	NComRxC.h	/^	int mIsAngAccFiltZetaValid;                double mAngAccFiltZeta;           \/\/!< Damping ratio of angular acceleration low-pass filter. [-]$/;"	m	struct:__anon13
mIsAngAccFiltFixed	NComRxC.h	/^	int mIsAngAccFiltFixed;$/;"	m	struct:__anon13
mHasAngAccFiltChanged	NComRxC.h	/^	int mHasAngAccFiltChanged;$/;"	m	struct:__anon13
mIsAngAccFiltOff	NComRxC.h	/^	int mIsAngAccFiltOff;$/;"	m	struct:__anon13
mInnPosXAge	NComRxC.h	/^	int mInnPosXAge;                           double mInnPosX;                  \/\/!< Innovation in latitude. [-]$/;"	m	struct:__anon13
mInnPosX	NComRxC.h	/^	int mInnPosXAge;                           double mInnPosX;                  \/\/!< Innovation in latitude. [-]$/;"	m	struct:__anon13
mInnPosYAge	NComRxC.h	/^	int mInnPosYAge;                           double mInnPosY;                  \/\/!< Innovation in longitude. [-]$/;"	m	struct:__anon13
mInnPosY	NComRxC.h	/^	int mInnPosYAge;                           double mInnPosY;                  \/\/!< Innovation in longitude. [-]$/;"	m	struct:__anon13
mInnPosZAge	NComRxC.h	/^	int mInnPosZAge;                           double mInnPosZ;                  \/\/!< Innovation in altitude. [-]$/;"	m	struct:__anon13
mInnPosZ	NComRxC.h	/^	int mInnPosZAge;                           double mInnPosZ;                  \/\/!< Innovation in altitude. [-]$/;"	m	struct:__anon13
mInnVelXAge	NComRxC.h	/^	int mInnVelXAge;                           double mInnVelX;                  \/\/!< Innovation in north velocity. [-]$/;"	m	struct:__anon13
mInnVelX	NComRxC.h	/^	int mInnVelXAge;                           double mInnVelX;                  \/\/!< Innovation in north velocity. [-]$/;"	m	struct:__anon13
mInnVelYAge	NComRxC.h	/^	int mInnVelYAge;                           double mInnVelY;                  \/\/!< Innovation in east velocity. [-]$/;"	m	struct:__anon13
mInnVelY	NComRxC.h	/^	int mInnVelYAge;                           double mInnVelY;                  \/\/!< Innovation in east velocity. [-]$/;"	m	struct:__anon13
mInnVelZAge	NComRxC.h	/^	int mInnVelZAge;                           double mInnVelZ;                  \/\/!< Innovation in down velocity. [-]$/;"	m	struct:__anon13
mInnVelZ	NComRxC.h	/^	int mInnVelZAge;                           double mInnVelZ;                  \/\/!< Innovation in down velocity. [-]$/;"	m	struct:__anon13
mInnHeadingAge	NComRxC.h	/^	int mInnHeadingAge;                        double mInnHeading;               \/\/!< Innovation in heading. [-]$/;"	m	struct:__anon13
mInnHeading	NComRxC.h	/^	int mInnHeadingAge;                        double mInnHeading;               \/\/!< Innovation in heading. [-]$/;"	m	struct:__anon13
mInnPitchAge	NComRxC.h	/^	int mInnPitchAge;                          double mInnPitch;                 \/\/!< Innovation in pitch. [-]$/;"	m	struct:__anon13
mInnPitch	NComRxC.h	/^	int mInnPitchAge;                          double mInnPitch;                 \/\/!< Innovation in pitch. [-]$/;"	m	struct:__anon13
mIsWxBiasValid	NComRxC.h	/^	int mIsWxBiasValid;                        double mWxBias;                   \/\/!< X gyroscope bias. [deg s^(-1)]$/;"	m	struct:__anon13
mWxBias	NComRxC.h	/^	int mIsWxBiasValid;                        double mWxBias;                   \/\/!< X gyroscope bias. [deg s^(-1)]$/;"	m	struct:__anon13
mIsWyBiasValid	NComRxC.h	/^	int mIsWyBiasValid;                        double mWyBias;                   \/\/!< Y gyroscope bias. [deg s^(-1)]$/;"	m	struct:__anon13
mWyBias	NComRxC.h	/^	int mIsWyBiasValid;                        double mWyBias;                   \/\/!< Y gyroscope bias. [deg s^(-1)]$/;"	m	struct:__anon13
mIsWzBiasValid	NComRxC.h	/^	int mIsWzBiasValid;                        double mWzBias;                   \/\/!< Z gyroscope bias. [deg s^(-1)]$/;"	m	struct:__anon13
mWzBias	NComRxC.h	/^	int mIsWzBiasValid;                        double mWzBias;                   \/\/!< Z gyroscope bias. [deg s^(-1)]$/;"	m	struct:__anon13
mIsWxBiasAccValid	NComRxC.h	/^	int mIsWxBiasAccValid;                     double mWxBiasAcc;                \/\/!< X gyroscope bias accuracy. [deg s^(-1)]$/;"	m	struct:__anon13
mWxBiasAcc	NComRxC.h	/^	int mIsWxBiasAccValid;                     double mWxBiasAcc;                \/\/!< X gyroscope bias accuracy. [deg s^(-1)]$/;"	m	struct:__anon13
mIsWyBiasAccValid	NComRxC.h	/^	int mIsWyBiasAccValid;                     double mWyBiasAcc;                \/\/!< Y gyroscope bias accuracy. [deg s^(-1)]$/;"	m	struct:__anon13
mWyBiasAcc	NComRxC.h	/^	int mIsWyBiasAccValid;                     double mWyBiasAcc;                \/\/!< Y gyroscope bias accuracy. [deg s^(-1)]$/;"	m	struct:__anon13
mIsWzBiasAccValid	NComRxC.h	/^	int mIsWzBiasAccValid;                     double mWzBiasAcc;                \/\/!< Z gyroscope bias accuracy. [deg s^(-1)]$/;"	m	struct:__anon13
mWzBiasAcc	NComRxC.h	/^	int mIsWzBiasAccValid;                     double mWzBiasAcc;                \/\/!< Z gyroscope bias accuracy. [deg s^(-1)]$/;"	m	struct:__anon13
mIsWxSfValid	NComRxC.h	/^	int mIsWxSfValid;                          double mWxSf;                     \/\/!< X gyroscope scale factor deviation. [-]$/;"	m	struct:__anon13
mWxSf	NComRxC.h	/^	int mIsWxSfValid;                          double mWxSf;                     \/\/!< X gyroscope scale factor deviation. [-]$/;"	m	struct:__anon13
mIsWySfValid	NComRxC.h	/^	int mIsWySfValid;                          double mWySf;                     \/\/!< Y gyroscope scale factor deviation. [-]$/;"	m	struct:__anon13
mWySf	NComRxC.h	/^	int mIsWySfValid;                          double mWySf;                     \/\/!< Y gyroscope scale factor deviation. [-]$/;"	m	struct:__anon13
mIsWzSfValid	NComRxC.h	/^	int mIsWzSfValid;                          double mWzSf;                     \/\/!< Z gyroscope scale factor deviation. [-]$/;"	m	struct:__anon13
mWzSf	NComRxC.h	/^	int mIsWzSfValid;                          double mWzSf;                     \/\/!< Z gyroscope scale factor deviation. [-]$/;"	m	struct:__anon13
mIsWxSfAccValid	NComRxC.h	/^	int mIsWxSfAccValid;                       double mWxSfAcc;                  \/\/!< X gyroscope scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mWxSfAcc	NComRxC.h	/^	int mIsWxSfAccValid;                       double mWxSfAcc;                  \/\/!< X gyroscope scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mIsWySfAccValid	NComRxC.h	/^	int mIsWySfAccValid;                       double mWySfAcc;                  \/\/!< Y gyroscope scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mWySfAcc	NComRxC.h	/^	int mIsWySfAccValid;                       double mWySfAcc;                  \/\/!< Y gyroscope scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mIsWzSfAccValid	NComRxC.h	/^	int mIsWzSfAccValid;                       double mWzSfAcc;                  \/\/!< Z gyroscope scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mWzSfAcc	NComRxC.h	/^	int mIsWzSfAccValid;                       double mWzSfAcc;                  \/\/!< Z gyroscope scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mIsAxBiasValid	NComRxC.h	/^	int mIsAxBiasValid;                        double mAxBias;                   \/\/!< X accelerometer bias. [m s^(-2)]$/;"	m	struct:__anon13
mAxBias	NComRxC.h	/^	int mIsAxBiasValid;                        double mAxBias;                   \/\/!< X accelerometer bias. [m s^(-2)]$/;"	m	struct:__anon13
mIsAyBiasValid	NComRxC.h	/^	int mIsAyBiasValid;                        double mAyBias;                   \/\/!< Y accelerometer bias. [m s^(-2)]$/;"	m	struct:__anon13
mAyBias	NComRxC.h	/^	int mIsAyBiasValid;                        double mAyBias;                   \/\/!< Y accelerometer bias. [m s^(-2)]$/;"	m	struct:__anon13
mIsAzBiasValid	NComRxC.h	/^	int mIsAzBiasValid;                        double mAzBias;                   \/\/!< Z accelerometer bias. [m s^(-2)]$/;"	m	struct:__anon13
mAzBias	NComRxC.h	/^	int mIsAzBiasValid;                        double mAzBias;                   \/\/!< Z accelerometer bias. [m s^(-2)]$/;"	m	struct:__anon13
mIsAxBiasAccValid	NComRxC.h	/^	int mIsAxBiasAccValid;                     double mAxBiasAcc;                \/\/!< X accelerometer bias accuracy. [m s^(-2)]$/;"	m	struct:__anon13
mAxBiasAcc	NComRxC.h	/^	int mIsAxBiasAccValid;                     double mAxBiasAcc;                \/\/!< X accelerometer bias accuracy. [m s^(-2)]$/;"	m	struct:__anon13
mIsAyBiasAccValid	NComRxC.h	/^	int mIsAyBiasAccValid;                     double mAyBiasAcc;                \/\/!< Y accelerometer bias accuracy. [m s^(-2)]$/;"	m	struct:__anon13
mAyBiasAcc	NComRxC.h	/^	int mIsAyBiasAccValid;                     double mAyBiasAcc;                \/\/!< Y accelerometer bias accuracy. [m s^(-2)]$/;"	m	struct:__anon13
mIsAzBiasAccValid	NComRxC.h	/^	int mIsAzBiasAccValid;                     double mAzBiasAcc;                \/\/!< Z accelerometer bias accuracy. [m s^(-2)]$/;"	m	struct:__anon13
mAzBiasAcc	NComRxC.h	/^	int mIsAzBiasAccValid;                     double mAzBiasAcc;                \/\/!< Z accelerometer bias accuracy. [m s^(-2)]$/;"	m	struct:__anon13
mIsAxSfValid	NComRxC.h	/^	int mIsAxSfValid;                          double mAxSf;                     \/\/!< X accelerometer scale factor deviation. [-]$/;"	m	struct:__anon13
mAxSf	NComRxC.h	/^	int mIsAxSfValid;                          double mAxSf;                     \/\/!< X accelerometer scale factor deviation. [-]$/;"	m	struct:__anon13
mIsAySfValid	NComRxC.h	/^	int mIsAySfValid;                          double mAySf;                     \/\/!< Y accelerometer scale factor deviation. [-]$/;"	m	struct:__anon13
mAySf	NComRxC.h	/^	int mIsAySfValid;                          double mAySf;                     \/\/!< Y accelerometer scale factor deviation. [-]$/;"	m	struct:__anon13
mIsAzSfValid	NComRxC.h	/^	int mIsAzSfValid;                          double mAzSf;                     \/\/!< Z accelerometer scale factor deviation. [-]$/;"	m	struct:__anon13
mAzSf	NComRxC.h	/^	int mIsAzSfValid;                          double mAzSf;                     \/\/!< Z accelerometer scale factor deviation. [-]$/;"	m	struct:__anon13
mIsAxSfAccValid	NComRxC.h	/^	int mIsAxSfAccValid;                       double mAxSfAcc;                  \/\/!< X accelerometer scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mAxSfAcc	NComRxC.h	/^	int mIsAxSfAccValid;                       double mAxSfAcc;                  \/\/!< X accelerometer scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mIsAySfAccValid	NComRxC.h	/^	int mIsAySfAccValid;                       double mAySfAcc;                  \/\/!< Y accelerometer scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mAySfAcc	NComRxC.h	/^	int mIsAySfAccValid;                       double mAySfAcc;                  \/\/!< Y accelerometer scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mIsAzSfAccValid	NComRxC.h	/^	int mIsAzSfAccValid;                       double mAzSfAcc;                  \/\/!< Z accelerometer scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mAzSfAcc	NComRxC.h	/^	int mIsAzSfAccValid;                       double mAzSfAcc;                  \/\/!< Z accelerometer scale factor deviation accuracy. [-]$/;"	m	struct:__anon13
mIsGAPxValid	NComRxC.h	/^	int mIsGAPxValid;                          double mGAPx;                     \/\/!< Primary GPS antenna position X offset. [m]$/;"	m	struct:__anon13
mGAPx	NComRxC.h	/^	int mIsGAPxValid;                          double mGAPx;                     \/\/!< Primary GPS antenna position X offset. [m]$/;"	m	struct:__anon13
mIsGAPyValid	NComRxC.h	/^	int mIsGAPyValid;                          double mGAPy;                     \/\/!< Primary GPS antenna position Y offset. [m]$/;"	m	struct:__anon13
mGAPy	NComRxC.h	/^	int mIsGAPyValid;                          double mGAPy;                     \/\/!< Primary GPS antenna position Y offset. [m]$/;"	m	struct:__anon13
mIsGAPzValid	NComRxC.h	/^	int mIsGAPzValid;                          double mGAPz;                     \/\/!< Primary GPS antenna position Z offset. [m]$/;"	m	struct:__anon13
mGAPz	NComRxC.h	/^	int mIsGAPzValid;                          double mGAPz;                     \/\/!< Primary GPS antenna position Z offset. [m]$/;"	m	struct:__anon13
mIsGAPxAccValid	NComRxC.h	/^	int mIsGAPxAccValid;                       double mGAPxAcc;                  \/\/!< Primary GPS antenna position X offset accuracy. [m]$/;"	m	struct:__anon13
mGAPxAcc	NComRxC.h	/^	int mIsGAPxAccValid;                       double mGAPxAcc;                  \/\/!< Primary GPS antenna position X offset accuracy. [m]$/;"	m	struct:__anon13
mIsGAPyAccValid	NComRxC.h	/^	int mIsGAPyAccValid;                       double mGAPyAcc;                  \/\/!< Primary GPS antenna position Y offset accuracy. [m]$/;"	m	struct:__anon13
mGAPyAcc	NComRxC.h	/^	int mIsGAPyAccValid;                       double mGAPyAcc;                  \/\/!< Primary GPS antenna position Y offset accuracy. [m]$/;"	m	struct:__anon13
mIsGAPzAccValid	NComRxC.h	/^	int mIsGAPzAccValid;                       double mGAPzAcc;                  \/\/!< Primary GPS antenna position Z offset accuracy. [m]$/;"	m	struct:__anon13
mGAPzAcc	NComRxC.h	/^	int mIsGAPzAccValid;                       double mGAPzAcc;                  \/\/!< Primary GPS antenna position Z offset accuracy. [m]$/;"	m	struct:__anon13
mIsAtHValid	NComRxC.h	/^	int mIsAtHValid;                           double mAtH;                      \/\/!< Secondary GPS antenna relative heading. [deg]$/;"	m	struct:__anon13
mAtH	NComRxC.h	/^	int mIsAtHValid;                           double mAtH;                      \/\/!< Secondary GPS antenna relative heading. [deg]$/;"	m	struct:__anon13
mIsAtPValid	NComRxC.h	/^	int mIsAtPValid;                           double mAtP;                      \/\/!< Secondary GPS antenna relative pitch. [deg]$/;"	m	struct:__anon13
mAtP	NComRxC.h	/^	int mIsAtPValid;                           double mAtP;                      \/\/!< Secondary GPS antenna relative pitch. [deg]$/;"	m	struct:__anon13
mIsAtHAccValid	NComRxC.h	/^	int mIsAtHAccValid;                        double mAtHAcc;                   \/\/!< Secondary GPS antenna relative heading accuracy. [deg]$/;"	m	struct:__anon13
mAtHAcc	NComRxC.h	/^	int mIsAtHAccValid;                        double mAtHAcc;                   \/\/!< Secondary GPS antenna relative heading accuracy. [deg]$/;"	m	struct:__anon13
mIsAtPAccValid	NComRxC.h	/^	int mIsAtPAccValid;                        double mAtPAcc;                   \/\/!< Secondary GPS antenna relative pitch accuracy. [deg]$/;"	m	struct:__anon13
mAtPAcc	NComRxC.h	/^	int mIsAtPAccValid;                        double mAtPAcc;                   \/\/!< Secondary GPS antenna relative pitch accuracy. [deg]$/;"	m	struct:__anon13
mIsBaseLineLengthValid	NComRxC.h	/^	int mIsBaseLineLengthValid;           int mIsBaseLineLengthConfig;                double mBaseLineLength;           \/\/!< Distance between GPS antennas. [m]$/;"	m	struct:__anon13
mIsBaseLineLengthConfig	NComRxC.h	/^	int mIsBaseLineLengthValid;           int mIsBaseLineLengthConfig;                double mBaseLineLength;           \/\/!< Distance between GPS antennas. [m]$/;"	m	struct:__anon13
mBaseLineLength	NComRxC.h	/^	int mIsBaseLineLengthValid;           int mIsBaseLineLengthConfig;                double mBaseLineLength;           \/\/!< Distance between GPS antennas. [m]$/;"	m	struct:__anon13
mIsBaseLineLengthAccValid	NComRxC.h	/^	int mIsBaseLineLengthAccValid;        int mIsBaseLineLengthAccConfig;             double mBaseLineLengthAcc;        \/\/!< Distance between GPS antennas accuracy. [m]$/;"	m	struct:__anon13
mIsBaseLineLengthAccConfig	NComRxC.h	/^	int mIsBaseLineLengthAccValid;        int mIsBaseLineLengthAccConfig;             double mBaseLineLengthAcc;        \/\/!< Distance between GPS antennas accuracy. [m]$/;"	m	struct:__anon13
mBaseLineLengthAcc	NComRxC.h	/^	int mIsBaseLineLengthAccValid;        int mIsBaseLineLengthAccConfig;             double mBaseLineLengthAcc;        \/\/!< Distance between GPS antennas accuracy. [m]$/;"	m	struct:__anon13
mIsImuMissedPktsValid	NComRxC.h	/^	int mIsImuMissedPktsValid;               uint32_t mImuMissedPkts;            \/\/!< Number of IMU hardware missed packets.$/;"	m	struct:__anon13
mImuMissedPkts	NComRxC.h	/^	int mIsImuMissedPktsValid;               uint32_t mImuMissedPkts;            \/\/!< Number of IMU hardware missed packets.$/;"	m	struct:__anon13
mIsImuResetCountValid	NComRxC.h	/^	int mIsImuResetCountValid;               uint32_t mImuResetCount;            \/\/!< Number of IMU hardware resets.$/;"	m	struct:__anon13
mImuResetCount	NComRxC.h	/^	int mIsImuResetCountValid;               uint32_t mImuResetCount;            \/\/!< Number of IMU hardware resets.$/;"	m	struct:__anon13
mIsImuErrorCountValid	NComRxC.h	/^	int mIsImuErrorCountValid;               uint32_t mImuErrorCount;            \/\/!< Number of IMU hardware errors.$/;"	m	struct:__anon13
mImuErrorCount	NComRxC.h	/^	int mIsImuErrorCountValid;               uint32_t mImuErrorCount;            \/\/!< Number of IMU hardware errors.$/;"	m	struct:__anon13
mIsGPSPosRejectValid	NComRxC.h	/^	int mIsGPSPosRejectValid;                uint32_t mGPSPosReject;             \/\/!< Number of successive GPS position updates rejected.$/;"	m	struct:__anon13
mGPSPosReject	NComRxC.h	/^	int mIsGPSPosRejectValid;                uint32_t mGPSPosReject;             \/\/!< Number of successive GPS position updates rejected.$/;"	m	struct:__anon13
mIsGPSVelRejectValid	NComRxC.h	/^	int mIsGPSVelRejectValid;                uint32_t mGPSVelReject;             \/\/!< Number of successive GPS velocity updates rejected.$/;"	m	struct:__anon13
mGPSVelReject	NComRxC.h	/^	int mIsGPSVelRejectValid;                uint32_t mGPSVelReject;             \/\/!< Number of successive GPS velocity updates rejected.$/;"	m	struct:__anon13
mIsGPSAttRejectValid	NComRxC.h	/^	int mIsGPSAttRejectValid;                uint32_t mGPSAttReject;             \/\/!< Number of successive GPS attitude updates rejected.$/;"	m	struct:__anon13
mGPSAttReject	NComRxC.h	/^	int mIsGPSAttRejectValid;                uint32_t mGPSAttReject;             \/\/!< Number of successive GPS attitude updates rejected.$/;"	m	struct:__anon13
mIsImuCharsValid	NComRxC.h	/^	int mIsImuCharsValid;                    uint32_t mImuChars;                 \/\/!< IMU number of bytes.$/;"	m	struct:__anon13
mImuChars	NComRxC.h	/^	int mIsImuCharsValid;                    uint32_t mImuChars;                 \/\/!< IMU number of bytes.$/;"	m	struct:__anon13
mIsImuCharsSkippedValid	NComRxC.h	/^	int mIsImuCharsSkippedValid;             uint32_t mImuCharsSkipped;          \/\/!< IMU number of invalid bytes.$/;"	m	struct:__anon13
mImuCharsSkipped	NComRxC.h	/^	int mIsImuCharsSkippedValid;             uint32_t mImuCharsSkipped;          \/\/!< IMU number of invalid bytes.$/;"	m	struct:__anon13
mIsImuPktsValid	NComRxC.h	/^	int mIsImuPktsValid;                     uint32_t mImuPkts;                  \/\/!< IMU number of valid packets.$/;"	m	struct:__anon13
mImuPkts	NComRxC.h	/^	int mIsImuPktsValid;                     uint32_t mImuPkts;                  \/\/!< IMU number of valid packets.$/;"	m	struct:__anon13
mIsCmdCharsValid	NComRxC.h	/^	int mIsCmdCharsValid;                    uint32_t mCmdChars;                 \/\/!< Command number of bytes.$/;"	m	struct:__anon13
mCmdChars	NComRxC.h	/^	int mIsCmdCharsValid;                    uint32_t mCmdChars;                 \/\/!< Command number of bytes.$/;"	m	struct:__anon13
mIsCmdCharsSkippedValid	NComRxC.h	/^	int mIsCmdCharsSkippedValid;             uint32_t mCmdCharsSkipped;          \/\/!< Command number of invalid bytes.$/;"	m	struct:__anon13
mCmdCharsSkipped	NComRxC.h	/^	int mIsCmdCharsSkippedValid;             uint32_t mCmdCharsSkipped;          \/\/!< Command number of invalid bytes.$/;"	m	struct:__anon13
mIsCmdPktsValid	NComRxC.h	/^	int mIsCmdPktsValid;                     uint32_t mCmdPkts;                  \/\/!< Command number of valid packets.$/;"	m	struct:__anon13
mCmdPkts	NComRxC.h	/^	int mIsCmdPktsValid;                     uint32_t mCmdPkts;                  \/\/!< Command number of valid packets.$/;"	m	struct:__anon13
mIsCmdErrorsValid	NComRxC.h	/^	int mIsCmdErrorsValid;                   uint32_t mCmdErrors;                \/\/!< Command number of errors.$/;"	m	struct:__anon13
mCmdErrors	NComRxC.h	/^	int mIsCmdErrorsValid;                   uint32_t mCmdErrors;                \/\/!< Command number of errors.$/;"	m	struct:__anon13
mIsImu2VehHeadingValid	NComRxC.h	/^	int mIsImu2VehHeadingValid;                double mImu2VehHeading;           \/\/!< Heading. [deg]$/;"	m	struct:__anon13
mImu2VehHeading	NComRxC.h	/^	int mIsImu2VehHeadingValid;                double mImu2VehHeading;           \/\/!< Heading. [deg]$/;"	m	struct:__anon13
mIsImu2VehPitchValid	NComRxC.h	/^	int mIsImu2VehPitchValid;                  double mImu2VehPitch;             \/\/!< Pitch. [deg]$/;"	m	struct:__anon13
mImu2VehPitch	NComRxC.h	/^	int mIsImu2VehPitchValid;                  double mImu2VehPitch;             \/\/!< Pitch. [deg]$/;"	m	struct:__anon13
mIsImu2VehRollValid	NComRxC.h	/^	int mIsImu2VehRollValid;                   double mImu2VehRoll;              \/\/!< Roll. [deg]$/;"	m	struct:__anon13
mImu2VehRoll	NComRxC.h	/^	int mIsImu2VehRollValid;                   double mImu2VehRoll;              \/\/!< Roll. [deg]$/;"	m	struct:__anon13
mIsTrigTimeValid	NComRxC.h	/^	int mIsTrigTimeValid;                 int mIsTrigTimeNew;                      double mTrigTime;                 \/\/!< Time of last trigger falling edge. [s]$/;"	m	struct:__anon13
mIsTrigTimeNew	NComRxC.h	/^	int mIsTrigTimeValid;                 int mIsTrigTimeNew;                      double mTrigTime;                 \/\/!< Time of last trigger falling edge. [s]$/;"	m	struct:__anon13
mTrigTime	NComRxC.h	/^	int mIsTrigTimeValid;                 int mIsTrigTimeNew;                      double mTrigTime;                 \/\/!< Time of last trigger falling edge. [s]$/;"	m	struct:__anon13
mIsTrig2TimeValid	NComRxC.h	/^	int mIsTrig2TimeValid;                int mIsTrig2TimeNew;                     double mTrig2Time;                \/\/!< Time of last trigger rising edge. [s]$/;"	m	struct:__anon13
mIsTrig2TimeNew	NComRxC.h	/^	int mIsTrig2TimeValid;                int mIsTrig2TimeNew;                     double mTrig2Time;                \/\/!< Time of last trigger rising edge. [s]$/;"	m	struct:__anon13
mTrig2Time	NComRxC.h	/^	int mIsTrig2TimeValid;                int mIsTrig2TimeNew;                     double mTrig2Time;                \/\/!< Time of last trigger rising edge. [s]$/;"	m	struct:__anon13
mIsDigitalOutTimeValid	NComRxC.h	/^	int mIsDigitalOutTimeValid;           int mIsDigitalOutTimeNew;                double mDigitalOutTime;           \/\/!< Time of last digital output. [s]$/;"	m	struct:__anon13
mIsDigitalOutTimeNew	NComRxC.h	/^	int mIsDigitalOutTimeValid;           int mIsDigitalOutTimeNew;                double mDigitalOutTime;           \/\/!< Time of last digital output. [s]$/;"	m	struct:__anon13
mDigitalOutTime	NComRxC.h	/^	int mIsDigitalOutTimeValid;           int mIsDigitalOutTimeNew;                double mDigitalOutTime;           \/\/!< Time of last digital output. [s]$/;"	m	struct:__anon13
mIsRemoteLeverArmXValid	NComRxC.h	/^	int mIsRemoteLeverArmXValid;               double mRemoteLeverArmX;          \/\/!< Remote lever arm X position. [m]$/;"	m	struct:__anon13
mRemoteLeverArmX	NComRxC.h	/^	int mIsRemoteLeverArmXValid;               double mRemoteLeverArmX;          \/\/!< Remote lever arm X position. [m]$/;"	m	struct:__anon13
mIsRemoteLeverArmYValid	NComRxC.h	/^	int mIsRemoteLeverArmYValid;               double mRemoteLeverArmY;          \/\/!< Remote lever arm Y position. [m]$/;"	m	struct:__anon13
mRemoteLeverArmY	NComRxC.h	/^	int mIsRemoteLeverArmYValid;               double mRemoteLeverArmY;          \/\/!< Remote lever arm Y position. [m]$/;"	m	struct:__anon13
mIsRemoteLeverArmZValid	NComRxC.h	/^	int mIsRemoteLeverArmZValid;               double mRemoteLeverArmZ;          \/\/!< Remote lever arm Z position. [m]$/;"	m	struct:__anon13
mRemoteLeverArmZ	NComRxC.h	/^	int mIsRemoteLeverArmZValid;               double mRemoteLeverArmZ;          \/\/!< Remote lever arm Z position. [m]$/;"	m	struct:__anon13
mIsRefLatValid	NComRxC.h	/^	int mIsRefLatValid;                        double mRefLat;                   \/\/!< Reference frame latitude. [deg]$/;"	m	struct:__anon13
mRefLat	NComRxC.h	/^	int mIsRefLatValid;                        double mRefLat;                   \/\/!< Reference frame latitude. [deg]$/;"	m	struct:__anon13
mIsRefLonValid	NComRxC.h	/^	int mIsRefLonValid;                        double mRefLon;                   \/\/!< Reference frame longitude. [deg]$/;"	m	struct:__anon13
mRefLon	NComRxC.h	/^	int mIsRefLonValid;                        double mRefLon;                   \/\/!< Reference frame longitude. [deg]$/;"	m	struct:__anon13
mIsRefAltValid	NComRxC.h	/^	int mIsRefAltValid;                        double mRefAlt;                   \/\/!< Reference frame altitude. [m]$/;"	m	struct:__anon13
mRefAlt	NComRxC.h	/^	int mIsRefAltValid;                        double mRefAlt;                   \/\/!< Reference frame altitude. [m]$/;"	m	struct:__anon13
mIsRefHeadingValid	NComRxC.h	/^	int mIsRefHeadingValid;                    double mRefHeading;               \/\/!< Reference frame heading. [deg]$/;"	m	struct:__anon13
mRefHeading	NComRxC.h	/^	int mIsRefHeadingValid;                    double mRefHeading;               \/\/!< Reference frame heading. [deg]$/;"	m	struct:__anon13
mInnZeroVelXAge	NComRxC.h	/^	int mInnZeroVelXAge;                       double mInnZeroVelX;              \/\/!< Discrepancy from zero of north velocity. [-]$/;"	m	struct:__anon13
mInnZeroVelX	NComRxC.h	/^	int mInnZeroVelXAge;                       double mInnZeroVelX;              \/\/!< Discrepancy from zero of north velocity. [-]$/;"	m	struct:__anon13
mInnZeroVelYAge	NComRxC.h	/^	int mInnZeroVelYAge;                       double mInnZeroVelY;              \/\/!< Discrepancy from zero of east velocity. [-]$/;"	m	struct:__anon13
mInnZeroVelY	NComRxC.h	/^	int mInnZeroVelYAge;                       double mInnZeroVelY;              \/\/!< Discrepancy from zero of east velocity. [-]$/;"	m	struct:__anon13
mInnZeroVelZAge	NComRxC.h	/^	int mInnZeroVelZAge;                       double mInnZeroVelZ;              \/\/!< Discrepancy from zero of downward velocity. [-]$/;"	m	struct:__anon13
mInnZeroVelZ	NComRxC.h	/^	int mInnZeroVelZAge;                       double mInnZeroVelZ;              \/\/!< Discrepancy from zero of downward velocity. [-]$/;"	m	struct:__anon13
mInnNoSlipHAge	NComRxC.h	/^	int mInnNoSlipHAge;                        double mInnNoSlipH;               \/\/!< Discrepancy of slip angle at rear wheels. [-]$/;"	m	struct:__anon13
mInnNoSlipH	NComRxC.h	/^	int mInnNoSlipHAge;                        double mInnNoSlipH;               \/\/!< Discrepancy of slip angle at rear wheels. [-]$/;"	m	struct:__anon13
mIsZeroVelLeverArmXValid	NComRxC.h	/^	int mIsZeroVelLeverArmXValid;              double mZeroVelLeverArmX;         \/\/!< Zero velocity position X offset. [m]$/;"	m	struct:__anon13
mZeroVelLeverArmX	NComRxC.h	/^	int mIsZeroVelLeverArmXValid;              double mZeroVelLeverArmX;         \/\/!< Zero velocity position X offset. [m]$/;"	m	struct:__anon13
mIsZeroVelLeverArmYValid	NComRxC.h	/^	int mIsZeroVelLeverArmYValid;              double mZeroVelLeverArmY;         \/\/!< Zero velocity position Y offset. [m]$/;"	m	struct:__anon13
mZeroVelLeverArmY	NComRxC.h	/^	int mIsZeroVelLeverArmYValid;              double mZeroVelLeverArmY;         \/\/!< Zero velocity position Y offset. [m]$/;"	m	struct:__anon13
mIsZeroVelLeverArmZValid	NComRxC.h	/^	int mIsZeroVelLeverArmZValid;              double mZeroVelLeverArmZ;         \/\/!< Zero velocity position Z offset. [m]$/;"	m	struct:__anon13
mZeroVelLeverArmZ	NComRxC.h	/^	int mIsZeroVelLeverArmZValid;              double mZeroVelLeverArmZ;         \/\/!< Zero velocity position Z offset. [m]$/;"	m	struct:__anon13
mIsZeroVelLeverArmXAccValid	NComRxC.h	/^	int mIsZeroVelLeverArmXAccValid;           double mZeroVelLeverArmXAcc;      \/\/!< Zero velocity position X offset accuracy. [m]$/;"	m	struct:__anon13
mZeroVelLeverArmXAcc	NComRxC.h	/^	int mIsZeroVelLeverArmXAccValid;           double mZeroVelLeverArmXAcc;      \/\/!< Zero velocity position X offset accuracy. [m]$/;"	m	struct:__anon13
mIsZeroVelLeverArmYAccValid	NComRxC.h	/^	int mIsZeroVelLeverArmYAccValid;           double mZeroVelLeverArmYAcc;      \/\/!< Zero velocity position Y offset accuracy. [m]$/;"	m	struct:__anon13
mZeroVelLeverArmYAcc	NComRxC.h	/^	int mIsZeroVelLeverArmYAccValid;           double mZeroVelLeverArmYAcc;      \/\/!< Zero velocity position Y offset accuracy. [m]$/;"	m	struct:__anon13
mIsZeroVelLeverArmZAccValid	NComRxC.h	/^	int mIsZeroVelLeverArmZAccValid;           double mZeroVelLeverArmZAcc;      \/\/!< Zero velocity position Z offset accuracy. [m]$/;"	m	struct:__anon13
mZeroVelLeverArmZAcc	NComRxC.h	/^	int mIsZeroVelLeverArmZAccValid;           double mZeroVelLeverArmZAcc;      \/\/!< Zero velocity position Z offset accuracy. [m]$/;"	m	struct:__anon13
mIsNoSlipLeverArmXValid	NComRxC.h	/^	int mIsNoSlipLeverArmXValid;               double mNoSlipLeverArmX;          \/\/!< Rear wheel position X offset. [m]$/;"	m	struct:__anon13
mNoSlipLeverArmX	NComRxC.h	/^	int mIsNoSlipLeverArmXValid;               double mNoSlipLeverArmX;          \/\/!< Rear wheel position X offset. [m]$/;"	m	struct:__anon13
mIsNoSlipLeverArmYValid	NComRxC.h	/^	int mIsNoSlipLeverArmYValid;               double mNoSlipLeverArmY;          \/\/!< Rear wheel position Y offset. [m]$/;"	m	struct:__anon13
mNoSlipLeverArmY	NComRxC.h	/^	int mIsNoSlipLeverArmYValid;               double mNoSlipLeverArmY;          \/\/!< Rear wheel position Y offset. [m]$/;"	m	struct:__anon13
mIsNoSlipLeverArmZValid	NComRxC.h	/^	int mIsNoSlipLeverArmZValid;               double mNoSlipLeverArmZ;          \/\/!< Rear wheel position Z offset. [m]$/;"	m	struct:__anon13
mNoSlipLeverArmZ	NComRxC.h	/^	int mIsNoSlipLeverArmZValid;               double mNoSlipLeverArmZ;          \/\/!< Rear wheel position Z offset. [m]$/;"	m	struct:__anon13
mIsNoSlipLeverArmXAccValid	NComRxC.h	/^	int mIsNoSlipLeverArmXAccValid;            double mNoSlipLeverArmXAcc;       \/\/!< Rear wheel position X offset accuracy. [m]$/;"	m	struct:__anon13
mNoSlipLeverArmXAcc	NComRxC.h	/^	int mIsNoSlipLeverArmXAccValid;            double mNoSlipLeverArmXAcc;       \/\/!< Rear wheel position X offset accuracy. [m]$/;"	m	struct:__anon13
mIsNoSlipLeverArmYAccValid	NComRxC.h	/^	int mIsNoSlipLeverArmYAccValid;            double mNoSlipLeverArmYAcc;       \/\/!< Rear wheel position Y offset accuracy. [m]$/;"	m	struct:__anon13
mNoSlipLeverArmYAcc	NComRxC.h	/^	int mIsNoSlipLeverArmYAccValid;            double mNoSlipLeverArmYAcc;       \/\/!< Rear wheel position Y offset accuracy. [m]$/;"	m	struct:__anon13
mIsNoSlipLeverArmZAccValid	NComRxC.h	/^	int mIsNoSlipLeverArmZAccValid;            double mNoSlipLeverArmZAcc;       \/\/!< Rear wheel position Z offset accuracy. [m]$/;"	m	struct:__anon13
mNoSlipLeverArmZAcc	NComRxC.h	/^	int mIsNoSlipLeverArmZAccValid;            double mNoSlipLeverArmZAcc;       \/\/!< Rear wheel position Z offset accuracy. [m]$/;"	m	struct:__anon13
mIsHeadingMisAlignValid	NComRxC.h	/^	int mIsHeadingMisAlignValid;               double mHeadingMisAlign;          \/\/!< Estimated heading offset between unit and vehicle. [deg]$/;"	m	struct:__anon13
mHeadingMisAlign	NComRxC.h	/^	int mIsHeadingMisAlignValid;               double mHeadingMisAlign;          \/\/!< Estimated heading offset between unit and vehicle. [deg]$/;"	m	struct:__anon13
mIsHeadingMisAlignAccValid	NComRxC.h	/^	int mIsHeadingMisAlignAccValid;            double mHeadingMisAlignAcc;       \/\/!< Estimated accuracy of heading offset between unit and vehicle. [deg]$/;"	m	struct:__anon13
mHeadingMisAlignAcc	NComRxC.h	/^	int mIsHeadingMisAlignAccValid;            double mHeadingMisAlignAcc;       \/\/!< Estimated accuracy of heading offset between unit and vehicle. [deg]$/;"	m	struct:__anon13
mIsOptionSZVDelayValid	NComRxC.h	/^	int mIsOptionSZVDelayValid;           int mIsOptionSZVDelayConfig;                double mOptionSZVDelay;           \/\/!< Garage mode setting. [s]$/;"	m	struct:__anon13
mIsOptionSZVDelayConfig	NComRxC.h	/^	int mIsOptionSZVDelayValid;           int mIsOptionSZVDelayConfig;                double mOptionSZVDelay;           \/\/!< Garage mode setting. [s]$/;"	m	struct:__anon13
mOptionSZVDelay	NComRxC.h	/^	int mIsOptionSZVDelayValid;           int mIsOptionSZVDelayConfig;                double mOptionSZVDelay;           \/\/!< Garage mode setting. [s]$/;"	m	struct:__anon13
mIsOptionSZVPeriodValid	NComRxC.h	/^	int mIsOptionSZVPeriodValid;          int mIsOptionSZVPeriodConfig;               double mOptionSZVPeriod;          \/\/!< Garage mode setting. [s]$/;"	m	struct:__anon13
mIsOptionSZVPeriodConfig	NComRxC.h	/^	int mIsOptionSZVPeriodValid;          int mIsOptionSZVPeriodConfig;               double mOptionSZVPeriod;          \/\/!< Garage mode setting. [s]$/;"	m	struct:__anon13
mOptionSZVPeriod	NComRxC.h	/^	int mIsOptionSZVPeriodValid;          int mIsOptionSZVPeriodConfig;               double mOptionSZVPeriod;          \/\/!< Garage mode setting. [s]$/;"	m	struct:__anon13
mIsOptionNSDelayValid	NComRxC.h	/^	int mIsOptionNSDelayValid;            int mIsOptionNSDelayConfig;                 double mOptionNSDelay;            \/\/!< Advanced slip setting. [s]$/;"	m	struct:__anon13
mIsOptionNSDelayConfig	NComRxC.h	/^	int mIsOptionNSDelayValid;            int mIsOptionNSDelayConfig;                 double mOptionNSDelay;            \/\/!< Advanced slip setting. [s]$/;"	m	struct:__anon13
mOptionNSDelay	NComRxC.h	/^	int mIsOptionNSDelayValid;            int mIsOptionNSDelayConfig;                 double mOptionNSDelay;            \/\/!< Advanced slip setting. [s]$/;"	m	struct:__anon13
mIsOptionNSPeriodValid	NComRxC.h	/^	int mIsOptionNSPeriodValid;           int mIsOptionNSPeriodConfig;                double mOptionNSPeriod;           \/\/!< Advanced slip setting. [s]$/;"	m	struct:__anon13
mIsOptionNSPeriodConfig	NComRxC.h	/^	int mIsOptionNSPeriodValid;           int mIsOptionNSPeriodConfig;                double mOptionNSPeriod;           \/\/!< Advanced slip setting. [s]$/;"	m	struct:__anon13
mOptionNSPeriod	NComRxC.h	/^	int mIsOptionNSPeriodValid;           int mIsOptionNSPeriodConfig;                double mOptionNSPeriod;           \/\/!< Advanced slip setting. [s]$/;"	m	struct:__anon13
mIsOptionNSAngleStdValid	NComRxC.h	/^	int mIsOptionNSAngleStdValid;         int mIsOptionNSAngleStdConfig;              double mOptionNSAngleStd;         \/\/!< Advanced slip setting. [deg]$/;"	m	struct:__anon13
mIsOptionNSAngleStdConfig	NComRxC.h	/^	int mIsOptionNSAngleStdValid;         int mIsOptionNSAngleStdConfig;              double mOptionNSAngleStd;         \/\/!< Advanced slip setting. [deg]$/;"	m	struct:__anon13
mOptionNSAngleStd	NComRxC.h	/^	int mIsOptionNSAngleStdValid;         int mIsOptionNSAngleStdConfig;              double mOptionNSAngleStd;         \/\/!< Advanced slip setting. [deg]$/;"	m	struct:__anon13
mIsOptionNSHAccelValid	NComRxC.h	/^	int mIsOptionNSHAccelValid;           int mIsOptionNSHAccelConfig;                double mOptionNSHAccel;           \/\/!< Advanced slip setting. [m s^(-2)]$/;"	m	struct:__anon13
mIsOptionNSHAccelConfig	NComRxC.h	/^	int mIsOptionNSHAccelValid;           int mIsOptionNSHAccelConfig;                double mOptionNSHAccel;           \/\/!< Advanced slip setting. [m s^(-2)]$/;"	m	struct:__anon13
mOptionNSHAccel	NComRxC.h	/^	int mIsOptionNSHAccelValid;           int mIsOptionNSHAccelConfig;                double mOptionNSHAccel;           \/\/!< Advanced slip setting. [m s^(-2)]$/;"	m	struct:__anon13
mIsOptionNSVAccelValid	NComRxC.h	/^	int mIsOptionNSVAccelValid;           int mIsOptionNSVAccelConfig;                double mOptionNSVAccel;           \/\/!< Advanced slip setting. [m s^(-2)]$/;"	m	struct:__anon13
mIsOptionNSVAccelConfig	NComRxC.h	/^	int mIsOptionNSVAccelValid;           int mIsOptionNSVAccelConfig;                double mOptionNSVAccel;           \/\/!< Advanced slip setting. [m s^(-2)]$/;"	m	struct:__anon13
mOptionNSVAccel	NComRxC.h	/^	int mIsOptionNSVAccelValid;           int mIsOptionNSVAccelConfig;                double mOptionNSVAccel;           \/\/!< Advanced slip setting. [m s^(-2)]$/;"	m	struct:__anon13
mIsOptionNSSpeedValid	NComRxC.h	/^	int mIsOptionNSSpeedValid;            int mIsOptionNSSpeedConfig;                 double mOptionNSSpeed;            \/\/!< Advanced slip setting. [m s^(-1)]$/;"	m	struct:__anon13
mIsOptionNSSpeedConfig	NComRxC.h	/^	int mIsOptionNSSpeedValid;            int mIsOptionNSSpeedConfig;                 double mOptionNSSpeed;            \/\/!< Advanced slip setting. [m s^(-1)]$/;"	m	struct:__anon13
mOptionNSSpeed	NComRxC.h	/^	int mIsOptionNSSpeedValid;            int mIsOptionNSSpeedConfig;                 double mOptionNSSpeed;            \/\/!< Advanced slip setting. [m s^(-1)]$/;"	m	struct:__anon13
mIsOptionNSRadiusValid	NComRxC.h	/^	int mIsOptionNSRadiusValid;           int mIsOptionNSRadiusConfig;                double mOptionNSRadius;           \/\/!< Advanced slip setting. [m]$/;"	m	struct:__anon13
mIsOptionNSRadiusConfig	NComRxC.h	/^	int mIsOptionNSRadiusValid;           int mIsOptionNSRadiusConfig;                double mOptionNSRadius;           \/\/!< Advanced slip setting. [m]$/;"	m	struct:__anon13
mOptionNSRadius	NComRxC.h	/^	int mIsOptionNSRadiusValid;           int mIsOptionNSRadiusConfig;                double mOptionNSRadius;           \/\/!< Advanced slip setting. [m]$/;"	m	struct:__anon13
mInnWSpeedAge	NComRxC.h	/^	int mInnWSpeedAge;                         double mInnWSpeed;                \/\/!< Wheel speed innovation. [-]$/;"	m	struct:__anon13
mInnWSpeed	NComRxC.h	/^	int mInnWSpeedAge;                         double mInnWSpeed;                \/\/!< Wheel speed innovation. [-]$/;"	m	struct:__anon13
mIsWSpeedLeverArmXValid	NComRxC.h	/^	int mIsWSpeedLeverArmXValid;               double mWSpeedLeverArmX;          \/\/!< Wheel speed position X offset. [m]$/;"	m	struct:__anon13
mWSpeedLeverArmX	NComRxC.h	/^	int mIsWSpeedLeverArmXValid;               double mWSpeedLeverArmX;          \/\/!< Wheel speed position X offset. [m]$/;"	m	struct:__anon13
mIsWSpeedLeverArmYValid	NComRxC.h	/^	int mIsWSpeedLeverArmYValid;               double mWSpeedLeverArmY;          \/\/!< Wheel speed position Y offset. [m]$/;"	m	struct:__anon13
mWSpeedLeverArmY	NComRxC.h	/^	int mIsWSpeedLeverArmYValid;               double mWSpeedLeverArmY;          \/\/!< Wheel speed position Y offset. [m]$/;"	m	struct:__anon13
mIsWSpeedLeverArmZValid	NComRxC.h	/^	int mIsWSpeedLeverArmZValid;               double mWSpeedLeverArmZ;          \/\/!< Wheel speed position Z offset. [m]$/;"	m	struct:__anon13
mWSpeedLeverArmZ	NComRxC.h	/^	int mIsWSpeedLeverArmZValid;               double mWSpeedLeverArmZ;          \/\/!< Wheel speed position Z offset. [m]$/;"	m	struct:__anon13
mIsWSpeedLeverArmXAccValid	NComRxC.h	/^	int mIsWSpeedLeverArmXAccValid;            double mWSpeedLeverArmXAcc;       \/\/!< Wheel speed position X offset accuracy. [m]$/;"	m	struct:__anon13
mWSpeedLeverArmXAcc	NComRxC.h	/^	int mIsWSpeedLeverArmXAccValid;            double mWSpeedLeverArmXAcc;       \/\/!< Wheel speed position X offset accuracy. [m]$/;"	m	struct:__anon13
mIsWSpeedLeverArmYAccValid	NComRxC.h	/^	int mIsWSpeedLeverArmYAccValid;            double mWSpeedLeverArmYAcc;       \/\/!< Wheel speed position Y offset accuracy. [m]$/;"	m	struct:__anon13
mWSpeedLeverArmYAcc	NComRxC.h	/^	int mIsWSpeedLeverArmYAccValid;            double mWSpeedLeverArmYAcc;       \/\/!< Wheel speed position Y offset accuracy. [m]$/;"	m	struct:__anon13
mIsWSpeedLeverArmZAccValid	NComRxC.h	/^	int mIsWSpeedLeverArmZAccValid;            double mWSpeedLeverArmZAcc;       \/\/!< Wheel speed position Z offset accuracy. [m]$/;"	m	struct:__anon13
mWSpeedLeverArmZAcc	NComRxC.h	/^	int mIsWSpeedLeverArmZAccValid;            double mWSpeedLeverArmZAcc;       \/\/!< Wheel speed position Z offset accuracy. [m]$/;"	m	struct:__anon13
mIsWSpeedScaleValid	NComRxC.h	/^	int mIsWSpeedScaleValid;              int mIsWSpeedScaleConfig;                   double mWSpeedScale;              \/\/!< Wheel speed scale factor. [pulse m^(-1)]$/;"	m	struct:__anon13
mIsWSpeedScaleConfig	NComRxC.h	/^	int mIsWSpeedScaleValid;              int mIsWSpeedScaleConfig;                   double mWSpeedScale;              \/\/!< Wheel speed scale factor. [pulse m^(-1)]$/;"	m	struct:__anon13
mWSpeedScale	NComRxC.h	/^	int mIsWSpeedScaleValid;              int mIsWSpeedScaleConfig;                   double mWSpeedScale;              \/\/!< Wheel speed scale factor. [pulse m^(-1)]$/;"	m	struct:__anon13
mIsWSpeedScaleStdValid	NComRxC.h	/^	int mIsWSpeedScaleStdValid;           int mIsWSpeedScaleStdConfig;                double mWSpeedScaleStd;           \/\/!< Wheel speed scale factor accuracy. [%]$/;"	m	struct:__anon13
mIsWSpeedScaleStdConfig	NComRxC.h	/^	int mIsWSpeedScaleStdValid;           int mIsWSpeedScaleStdConfig;                double mWSpeedScaleStd;           \/\/!< Wheel speed scale factor accuracy. [%]$/;"	m	struct:__anon13
mWSpeedScaleStd	NComRxC.h	/^	int mIsWSpeedScaleStdValid;           int mIsWSpeedScaleStdConfig;                double mWSpeedScaleStd;           \/\/!< Wheel speed scale factor accuracy. [%]$/;"	m	struct:__anon13
mIsOptionWSpeedDelayValid	NComRxC.h	/^	int mIsOptionWSpeedDelayValid;        int mIsOptionWSpeedDelayConfig;             double mOptionWSpeedDelay;        \/\/!< Wheel speed setting. [s]$/;"	m	struct:__anon13
mIsOptionWSpeedDelayConfig	NComRxC.h	/^	int mIsOptionWSpeedDelayValid;        int mIsOptionWSpeedDelayConfig;             double mOptionWSpeedDelay;        \/\/!< Wheel speed setting. [s]$/;"	m	struct:__anon13
mOptionWSpeedDelay	NComRxC.h	/^	int mIsOptionWSpeedDelayValid;        int mIsOptionWSpeedDelayConfig;             double mOptionWSpeedDelay;        \/\/!< Wheel speed setting. [s]$/;"	m	struct:__anon13
mIsOptionWSpeedZVDelayValid	NComRxC.h	/^	int mIsOptionWSpeedZVDelayValid;      int mIsOptionWSpeedZVDelayConfig;           double mOptionWSpeedZVDelay;      \/\/!< Wheel speed setting. [s]$/;"	m	struct:__anon13
mIsOptionWSpeedZVDelayConfig	NComRxC.h	/^	int mIsOptionWSpeedZVDelayValid;      int mIsOptionWSpeedZVDelayConfig;           double mOptionWSpeedZVDelay;      \/\/!< Wheel speed setting. [s]$/;"	m	struct:__anon13
mOptionWSpeedZVDelay	NComRxC.h	/^	int mIsOptionWSpeedZVDelayValid;      int mIsOptionWSpeedZVDelayConfig;           double mOptionWSpeedZVDelay;      \/\/!< Wheel speed setting. [s]$/;"	m	struct:__anon13
mIsOptionWSpeedNoiseStdValid	NComRxC.h	/^	int mIsOptionWSpeedNoiseStdValid;     int mIsOptionWSpeedNoiseStdConfig;          double mOptionWSpeedNoiseStd;     \/\/!< Wheel speed setting.$/;"	m	struct:__anon13
mIsOptionWSpeedNoiseStdConfig	NComRxC.h	/^	int mIsOptionWSpeedNoiseStdValid;     int mIsOptionWSpeedNoiseStdConfig;          double mOptionWSpeedNoiseStd;     \/\/!< Wheel speed setting.$/;"	m	struct:__anon13
mOptionWSpeedNoiseStd	NComRxC.h	/^	int mIsOptionWSpeedNoiseStdValid;     int mIsOptionWSpeedNoiseStdConfig;          double mOptionWSpeedNoiseStd;     \/\/!< Wheel speed setting.$/;"	m	struct:__anon13
mIsWSpeedTimeValid	NComRxC.h	/^	int mIsWSpeedTimeValid;                    double mWSpeedTime;               \/\/!< Time of last wheel speed measurement. [s]$/;"	m	struct:__anon13
mWSpeedTime	NComRxC.h	/^	int mIsWSpeedTimeValid;                    double mWSpeedTime;               \/\/!< Time of last wheel speed measurement. [s]$/;"	m	struct:__anon13
mIsWSpeedCountValid	NComRxC.h	/^	int mIsWSpeedCountValid;                   double mWSpeedCount;              \/\/!< Count at last wheel speed measurement.$/;"	m	struct:__anon13
mWSpeedCount	NComRxC.h	/^	int mIsWSpeedCountValid;                   double mWSpeedCount;              \/\/!< Count at last wheel speed measurement.$/;"	m	struct:__anon13
mIsWSpeedTimeUnchangedValid	NComRxC.h	/^	int mIsWSpeedTimeUnchangedValid;           double mWSpeedTimeUnchanged;      \/\/!< Time since last count. [s]$/;"	m	struct:__anon13
mWSpeedTimeUnchanged	NComRxC.h	/^	int mIsWSpeedTimeUnchangedValid;           double mWSpeedTimeUnchanged;      \/\/!< Time since last count. [s]$/;"	m	struct:__anon13
mIsWSpeedFreqValid	NComRxC.h	/^	int mIsWSpeedFreqValid;                    double mWSpeedFreq;               \/\/!< Wheel speed frequency. [Hz]$/;"	m	struct:__anon13
mWSpeedFreq	NComRxC.h	/^	int mIsWSpeedFreqValid;                    double mWSpeedFreq;               \/\/!< Wheel speed frequency. [Hz]$/;"	m	struct:__anon13
mInnHeadingHAge	NComRxC.h	/^	int mInnHeadingHAge;                       double mInnHeadingH;              \/\/!< Heading lock innovation. [-]$/;"	m	struct:__anon13
mInnHeadingH	NComRxC.h	/^	int mInnHeadingHAge;                       double mInnHeadingH;              \/\/!< Heading lock innovation. [-]$/;"	m	struct:__anon13
mIsOptionHLDelayValid	NComRxC.h	/^	int mIsOptionHLDelayValid;            int mIsOptionHLDelayConfig;                 double mOptionHLDelay;            \/\/!< Heading lock setting. [s]$/;"	m	struct:__anon13
mIsOptionHLDelayConfig	NComRxC.h	/^	int mIsOptionHLDelayValid;            int mIsOptionHLDelayConfig;                 double mOptionHLDelay;            \/\/!< Heading lock setting. [s]$/;"	m	struct:__anon13
mOptionHLDelay	NComRxC.h	/^	int mIsOptionHLDelayValid;            int mIsOptionHLDelayConfig;                 double mOptionHLDelay;            \/\/!< Heading lock setting. [s]$/;"	m	struct:__anon13
mIsOptionHLPeriodValid	NComRxC.h	/^	int mIsOptionHLPeriodValid;           int mIsOptionHLPeriodConfig;                double mOptionHLPeriod;           \/\/!< Heading lock setting. [s]$/;"	m	struct:__anon13
mIsOptionHLPeriodConfig	NComRxC.h	/^	int mIsOptionHLPeriodValid;           int mIsOptionHLPeriodConfig;                double mOptionHLPeriod;           \/\/!< Heading lock setting. [s]$/;"	m	struct:__anon13
mOptionHLPeriod	NComRxC.h	/^	int mIsOptionHLPeriodValid;           int mIsOptionHLPeriodConfig;                double mOptionHLPeriod;           \/\/!< Heading lock setting. [s]$/;"	m	struct:__anon13
mIsOptionHLAngleStdValid	NComRxC.h	/^	int mIsOptionHLAngleStdValid;         int mIsOptionHLAngleStdConfig;              double mOptionHLAngleStd;         \/\/!< Heading lock setting. [deg]$/;"	m	struct:__anon13
mIsOptionHLAngleStdConfig	NComRxC.h	/^	int mIsOptionHLAngleStdValid;         int mIsOptionHLAngleStdConfig;              double mOptionHLAngleStd;         \/\/!< Heading lock setting. [deg]$/;"	m	struct:__anon13
mOptionHLAngleStd	NComRxC.h	/^	int mIsOptionHLAngleStdValid;         int mIsOptionHLAngleStdConfig;              double mOptionHLAngleStd;         \/\/!< Heading lock setting. [deg]$/;"	m	struct:__anon13
mIsOptionStatDelayValid	NComRxC.h	/^	int mIsOptionStatDelayValid;          int mIsOptionStatDelayConfig;               double mOptionStatDelay;          \/\/!< Heading lock setting. [s]$/;"	m	struct:__anon13
mIsOptionStatDelayConfig	NComRxC.h	/^	int mIsOptionStatDelayValid;          int mIsOptionStatDelayConfig;               double mOptionStatDelay;          \/\/!< Heading lock setting. [s]$/;"	m	struct:__anon13
mOptionStatDelay	NComRxC.h	/^	int mIsOptionStatDelayValid;          int mIsOptionStatDelayConfig;               double mOptionStatDelay;          \/\/!< Heading lock setting. [s]$/;"	m	struct:__anon13
mIsOptionStatSpeedValid	NComRxC.h	/^	int mIsOptionStatSpeedValid;          int mIsOptionStatSpeedConfig;               double mOptionStatSpeed;          \/\/!< Heading lock setting. [m s^(-1)]$/;"	m	struct:__anon13
mIsOptionStatSpeedConfig	NComRxC.h	/^	int mIsOptionStatSpeedValid;          int mIsOptionStatSpeedConfig;               double mOptionStatSpeed;          \/\/!< Heading lock setting. [m s^(-1)]$/;"	m	struct:__anon13
mOptionStatSpeed	NComRxC.h	/^	int mIsOptionStatSpeedValid;          int mIsOptionStatSpeedConfig;               double mOptionStatSpeed;          \/\/!< Heading lock setting. [m s^(-1)]$/;"	m	struct:__anon13
mIsTimeMismatchValid	NComRxC.h	/^	int mIsTimeMismatchValid;                     int mTimeMismatch;             \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mTimeMismatch	NComRxC.h	/^	int mIsTimeMismatchValid;                     int mTimeMismatch;             \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mIsImuTimeDiffValid	NComRxC.h	/^	int mIsImuTimeDiffValid;                      int mImuTimeDiff;              \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mImuTimeDiff	NComRxC.h	/^	int mIsImuTimeDiffValid;                      int mImuTimeDiff;              \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mIsImuTimeMarginValid	NComRxC.h	/^	int mIsImuTimeMarginValid;                    int mImuTimeMargin;            \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mImuTimeMargin	NComRxC.h	/^	int mIsImuTimeMarginValid;                    int mImuTimeMargin;            \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mIsImuLoopTimeValid	NComRxC.h	/^	int mIsImuLoopTimeValid;                      int mImuLoopTime;              \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mImuLoopTime	NComRxC.h	/^	int mIsImuLoopTimeValid;                      int mImuLoopTime;              \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mIsOpLoopTimeValid	NComRxC.h	/^	int mIsOpLoopTimeValid;                       int mOpLoopTime;               \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mOpLoopTime	NComRxC.h	/^	int mIsOpLoopTimeValid;                       int mOpLoopTime;               \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mIsBnsLagValid	NComRxC.h	/^	int mIsBnsLagValid;                           int mBnsLag;                   \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mBnsLag	NComRxC.h	/^	int mIsBnsLagValid;                           int mBnsLag;                   \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mIsBnsLagFiltValid	NComRxC.h	/^	int mIsBnsLagFiltValid;                    double mBnsLagFilt;               \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mBnsLagFilt	NComRxC.h	/^	int mIsBnsLagFiltValid;                    double mBnsLagFilt;               \/\/!< Reserved for testing.$/;"	m	struct:__anon13
mInternal	NComRxC.h	/^	NComRxCInternal *mInternal;  \/\/!< Private decoder state and work space.$/;"	m	struct:__anon13
NComRxC	NComRxC.h	/^} NComRxC;$/;"	t	typeref:struct:__anon13
